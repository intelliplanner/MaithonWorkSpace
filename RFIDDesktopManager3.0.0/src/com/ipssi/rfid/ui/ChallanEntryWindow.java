/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.ipssi.rfid.ui;

import java.awt.Color;
import java.awt.event.KeyEvent;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;

import javax.swing.JOptionPane;
import javax.swing.JSpinner;
import javax.swing.SpinnerDateModel;

import com.ipssi.gen.utils.DBConnectionPool;
import com.ipssi.gen.utils.Misc;
import com.ipssi.gen.utils.Pair;
import com.ipssi.rfid.beans.ComboItem;
import com.ipssi.rfid.beans.RFIDHolder;
import com.ipssi.rfid.beans.TPRecord;
import com.ipssi.rfid.beans.TPSQuestionDetail;
import com.ipssi.rfid.constant.Results;
import com.ipssi.rfid.constant.Status;
import com.ipssi.rfid.constant.UIConstant;
import com.ipssi.rfid.constant.Status.TPRQuestion;
import com.ipssi.rfid.database.DropDownValues;
import com.ipssi.rfid.database.GateInDao;
import com.ipssi.rfid.processor.TPRBlockManager;
import com.ipssi.rfid.processor.TPRInformation;
import com.ipssi.rfid.processor.TPRUtils;
import com.ipssi.rfid.processor.TokenManager;
import com.ipssi.rfid.processor.Utils;
import com.ipssi.rfid.readers.UIHandler;

/**
 *
 * @author Vi$ky
 */
public class ChallanEntryWindow extends javax.swing.JDialog {

    UIConstant ApplicationConstant;
    int tprId = Misc.getUndefInt();
    private TPRecord tpRecord = null;
    TPRBlockManager tprBlockManager = null;
    private int userId = Misc.getUndefInt();
    private UIHandler handler = null;
    private ArrayList<Pair> doList = null;

    /**
     * Creates new form ChallanInformation
     * @param tprBlockManager 
     */
    public ChallanEntryWindow(java.awt.Frame parent, boolean modal, TPRecord tpRecord, TPRBlockManager tprBlockManager, int userId, UIHandler handler) {
        super(parent, modal);
        initComponents();
        this.setLocation(280, 90);
        this.tpRecord = tpRecord;
        this.tprId = tpRecord == null ? Misc.getUndefInt() : tpRecord.getTprId();
        this.userId = userId;
        this.handler = handler;
        this.tprBlockManager = tprBlockManager;
        setMinesList();
        setValuesFromParent();
        getFocus();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
    	invoiceValueText = new javax.swing.JTextField();
        invoiceValueLabel = new javax.swing.JLabel();
    	challanWbText = new javax.swing.JTextField();
    	challanWbLabel = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        vehicleName = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        lr = new javax.swing.JTextField();
        challanNo = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        Tarewt = new javax.swing.JTextField();
        mines = new javax.swing.JComboBox();
        grade = new javax.swing.JComboBox();
        transporter = new javax.swing.JComboBox();
        doRr = new javax.swing.JComboBox();
        jButton2 = new javax.swing.JButton();
        weighment = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        wbUse = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        grossWt = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        bedAssigned = new javax.swing.JLabel();
        Date dt = new Date() ;
        dt.setTime(dt.getTime() - 1000 * 60 * 30 );
        SpinnerDateModel sm= new SpinnerDateModel(dt,null,null,Calendar.DATE);
        challanDate = new javax.swing.JSpinner(sm);
        Date date = new Date() ;
        date.setTime(date.getTime() - 1000 * 60 * 30 );
        SpinnerDateModel sdm= new SpinnerDateModel(date,null,null,Calendar.DATE);
        lrDate = new javax.swing.JSpinner(sdm);
        jPanel5 = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        rfTagInfo = new javax.swing.JLabel();
        vehicleInfor = new javax.swing.JLabel();
        driverInformation = new javax.swing.JLabel();
        challanRecord = new javax.swing.JLabel();
        multipleTPR = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBackground(java.awt.SystemColor.controlLtHighlight);

        jLabel6.setFont(ApplicationConstant.subHeadingFont);
        jLabel6.setText("Challan Information");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(290, Short.MAX_VALUE)
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 261, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(249, 249, 249))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 800, -1));

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));

        jLabel2.setFont(ApplicationConstant.labelFont);
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("Grade:");

        jLabel3.setFont(ApplicationConstant.labelFont);
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText("Vehicle #:");

        jLabel4.setFont(ApplicationConstant.labelFont);
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("Transporter#:");

        jLabel5.setFont(ApplicationConstant.labelFont);
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel5.setText("Invoice#");

        vehicleName.setEditable(false);
        vehicleName.setFont(ApplicationConstant.textFont);
        vehicleName.setForeground(ApplicationConstant.textFontColor);
        vehicleName.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        vehicleName.setFocusable(false);
        vehicleName.setMinimumSize(null);
        vehicleName.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                vehicleNameMouseClicked(evt);
            }
        });
        vehicleName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                vehicleNameKeyPressed(evt);
            }
        });

        jLabel7.setFont(ApplicationConstant.labelFont);
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel7.setText("DO/RR#:");

        jLabel8.setFont(ApplicationConstant.labelFont);
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel8.setText("LR #:");

        jLabel9.setFont(ApplicationConstant.labelFont);
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel9.setText("Mines:");

        lr.setFont(ApplicationConstant.textFont);
        lr.setForeground(ApplicationConstant.textFontColor);
        lr.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        lr.setMinimumSize(null);
        lr.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lrMouseClicked(evt);
            }
        });
        lr.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                lrKeyPressed(evt);
            }
        });

        challanNo.setFont(ApplicationConstant.textFont);
        challanNo.setForeground(ApplicationConstant.textFontColor);
        challanNo.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        challanNo.setMinimumSize(null);
        challanNo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                challanNoMouseClicked(evt);
            }
        });
        challanNo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                challanNoKeyPressed(evt);
            }
        });

        
        challanWbText.setFont(UIConstant.textFont);
        challanWbText.setForeground(UIConstant.textFontColor);
        challanWbText.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        challanWbText.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
            	challanWbTextFocusGained(evt);
            }
			public void focusLost(java.awt.event.FocusEvent evt) {
				challanWbTextFocusLost(evt);
            }
        });
        challanWbText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
            	challanWbTextKeyPressed(evt);
            }
        });
        
        
        challanWbLabel.setFont(UIConstant.labelFont);
        challanWbLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        challanWbLabel.setText("Challan WB#:");

        
        
        invoiceValueText.setFont(UIConstant.textFont);
        invoiceValueText.setForeground(UIConstant.textFontColor);
        invoiceValueText.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        invoiceValueText.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
            	invoiceValueTextFocusGained(evt);
            }
			public void focusLost(java.awt.event.FocusEvent evt) {
            	invoiceValueTextFocusLost(evt);
            }
        });
        invoiceValueText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
            	invoiceValueTextKeyPressed(evt);
            }
        });
        
        
       
        
        invoiceValueLabel.setFont(UIConstant.labelFont);
        invoiceValueLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        invoiceValueLabel.setText("Invoice Value:");
       
        
        
        
        
        jLabel19.setFont(ApplicationConstant.labelFont);
        jLabel19.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel19.setText("Party Tare Wt:");

        Tarewt.setFont(ApplicationConstant.textFont);
        Tarewt.setForeground(ApplicationConstant.textFontColor);
        Tarewt.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        Tarewt.setMinimumSize(null);
        Tarewt.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TarewtMouseClicked(evt);
            }
        });
        Tarewt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TarewtKeyPressed(evt);
            }
        });

        mines.setFont(ApplicationConstant.textFont);
        mines.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select" }));
        mines.setToolTipText("");
        mines.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                minesMouseClicked(evt);
            }
        });
        mines.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
               // minesActionPerformed(evt);
            	setDoRrLst(0,DropDownValues.getComboSelectedVal(mines));  
            }
        });
        mines.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                //minesFocusLost(evt);
            }
        });
        mines.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                minesKeyPressed(evt);
            }
        });

        grade.setFont(ApplicationConstant.textFont);
        grade.addItem(new ComboItem(0, "Select"));
        grade.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gradeActionPerformed(evt);
            }
        });
        grade.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                gradeKeyPressed(evt);
            }
        });

        transporter.setFont(ApplicationConstant.textFont);
        transporter.addItem(new ComboItem(0, "Select"));
        transporter.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                transporterMouseClicked(evt);
            }
        });
        transporter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                transporterActionPerformed(evt);
            }
        });
        transporter.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                transporterFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                transporterFocusLost(evt);
            }
        });
        transporter.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                transporterKeyPressed(evt);
            }
        });

        doRr.setFont(ApplicationConstant.textFont);
        doRr.addItem(new ComboItem(0, "Select"));
        doRr.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                doRrMouseClicked(evt);
            }
        });
        doRr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                //doRrActionPerformed(evt);
            	setTransporterList(0,DropDownValues.getComboSelectedVal(doRr));
                transporterOnCahange();
                setGradeList(0,DropDownValues.getComboSelectedVal(doRr));
            }
        });
        doRr.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                //doRrFocusLost(evt);
            }
        });
        doRr.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                doRrKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(doRr, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(5, 5, 5)
                        .addComponent(grade, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(5, 5, 5)
                        .addComponent(vehicleName, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(4, 4, 4)
                        .addComponent(transporter, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(5, 5, 5)
                        .addComponent(challanNo, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(5, 5, 5)
                        .addComponent(lr, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(5, 5, 5)
                        .addComponent(Tarewt, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(mines, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(15, 15, 15))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mines, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(doRr, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(grade, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(vehicleName, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(transporter, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(challanNo, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lr, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Tarewt, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        jPanel1.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 66, -1, 320));

        jButton2.setFont(ApplicationConstant.buttonFont);
        jButton2.setText("Clear");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jButton2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jButton2FocusGained(evt);
            }
        });
        jButton2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jButton2KeyPressed(evt);
            }
        });
        jPanel1.add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(257, 414, 132, 38));

        weighment.setFont(ApplicationConstant.buttonFont);
        weighment.setText("Save");
        weighment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                weighmentActionPerformed(evt);
            }
        });
        weighment.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                weighmentFocusGained(evt);
            }
        });
        weighment.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                weighmentKeyPressed(evt);
            }
        });
        jPanel1.add(weighment, new org.netbeans.lib.awtextra.AbsoluteConstraints(418, 413, 256, 40));

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));

        wbUse.setFont(ApplicationConstant.textFont);
        wbUse.setForeground(ApplicationConstant.textFontColor);
        wbUse.setBorder(null);
        wbUse.setEditable(false);
        wbUse.setBackground(Color.WHITE);
        wbUse.setVisible(false);
        /*wbUse.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                wbUseMouseClicked(evt);
            }
        });
        wbUse.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                wbUseKeyPressed(evt);
            }
        });*/

        jLabel12.setFont(ApplicationConstant.labelFont);
        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel12.setText("Invoice Date:");

        jLabel13.setFont(ApplicationConstant.labelFont);
        jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel13.setText("LR Date:");

        jLabel14.setFont(ApplicationConstant.labelFont);
        jLabel14.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel14.setText("WB to Use:");
        jLabel14.setVisible(false);

        jLabel24.setFont(ApplicationConstant.labelFont);
        jLabel24.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel24.setText("Party Gross Wt:");

        grossWt.setFont(ApplicationConstant.textFont);
        grossWt.setForeground(ApplicationConstant.textFontColor);
        grossWt.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        grossWt.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                grossWtMouseClicked(evt);
            }
        });
        grossWt.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                grossWtFocusGained(evt);
            }
        });
        grossWt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                grossWtKeyPressed(evt);
            }
        });

        jLabel1.setFont(ApplicationConstant.labelFont);
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel1.setText("Bed Assigned:");

        bedAssigned.setFont(ApplicationConstant.textFont);
        bedAssigned.setForeground(ApplicationConstant.textFontColor);

        JSpinner.DateEditor de = new JSpinner.DateEditor(challanDate,"dd/MM/yyyy HH:mm");
        challanDate.setEditor(de);
        challanDate.setFont(UIConstant.textFont);
        challanDate.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                challanDateKeyPressed(evt);
            }
        });

        JSpinner.DateEditor dedit = new JSpinner.DateEditor(lrDate,"dd/MM/yyyy HH:mm");
        lrDate.setFont(UIConstant.textFont);
        lrDate.setEditor(dedit);
        lrDate.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                lrDateKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(bedAssigned, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                         .addComponent(invoiceValueLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                         .addGap(6, 6, 6)
                         .addComponent(invoiceValueText, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE))		
                	.addGroup(jPanel4Layout.createSequentialGroup()
                         .addComponent(challanWbLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                         .addGap(6, 6, 6)
                         .addComponent(challanWbText, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE))	
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(challanDate, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(lrDate, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel24, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(4, 4, 4)
                        .addComponent(grossWt, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(4, 4, 4)
                        .addComponent(wbUse, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bedAssigned, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4)
                 .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(invoiceValueLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(invoiceValueText, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(challanWbLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(challanWbText, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(challanDate, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lrDate, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel24, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(grossWt, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(wbUse, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        jPanel1.add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(388, 154, -1, -1));

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));
        jPanel5.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel15.setVisible(false);
        jLabel15.setFont(UIConstant.labelFont);
        jLabel15.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel15.setText("RF Tag:");
        jPanel5.add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(36, 2, 164, 25));

        jLabel16.setVisible(false);
        jLabel16.setFont(UIConstant.labelFont);
        jLabel16.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel16.setText("Vehicle Info:");
        jPanel5.add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(36, 33, 164, 25));

        jLabel17.setVisible(false);
        jLabel17.setFont(UIConstant.labelFont);
        jLabel17.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel17.setText("Driver Info:");
        jPanel5.add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(36, 60, 164, 25));

        jLabel18.setVisible(false);
        jLabel18.setFont(UIConstant.labelFont);
        jLabel18.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel18.setText("Challan Record:");
        jPanel5.add(jLabel18, new org.netbeans.lib.awtextra.AbsoluteConstraints(36, 87, 164, 23));

        jLabel28.setFont(UIConstant.labelFont);
        jLabel28.setVisible(false);
        jLabel28.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel28.setText("Multiple TPR:");
        jPanel5.add(jLabel28, new org.netbeans.lib.awtextra.AbsoluteConstraints(36, 112, 164, 25));

        rfTagInfo.setFont(UIConstant.textFont);
        rfTagInfo.setVisible(false);
        rfTagInfo.setForeground(UIConstant.textFontColor);
        jPanel5.add(rfTagInfo, new org.netbeans.lib.awtextra.AbsoluteConstraints(206, 2, 158, 25));

        vehicleInfor.setFont(UIConstant.textFont);
        vehicleInfor.setVisible(false);
        vehicleInfor.setForeground(UIConstant.textFontColor);
        jPanel5.add(vehicleInfor, new org.netbeans.lib.awtextra.AbsoluteConstraints(206, 33, 158, 25));

        driverInformation.setFont(UIConstant.textFont);
        driverInformation.setVisible(false);
        driverInformation.setForeground(UIConstant.textFontColor);
        jPanel5.add(driverInformation, new org.netbeans.lib.awtextra.AbsoluteConstraints(206, 60, 158, 25));

        challanRecord.setFont(UIConstant.textFont);
        challanRecord.setVisible(false);
        challanRecord.setForeground(UIConstant.textFontColor);
        jPanel5.add(challanRecord, new org.netbeans.lib.awtextra.AbsoluteConstraints(206, 87, 158, 23));

        multipleTPR.setFont(UIConstant.textFont);
        multipleTPR.setVisible(false);
        multipleTPR.setForeground(UIConstant.textFontColor);
        jPanel5.add(multipleTPR, new org.netbeans.lib.awtextra.AbsoluteConstraints(206, 114, 158, 23));

        jPanel1.add(jPanel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(387, 68, -1, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void weighmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_weighmentActionPerformed
        saveAction();
    }//GEN-LAST:event_weighmentActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        cleanInputs();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void gradeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gradeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_gradeActionPerformed

    private void vehicleNameMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_vehicleNameMouseClicked
        setBackgrountWhite();
        vehicleName.requestFocusInWindow();
        vehicleName.setBackground(UIConstant.focusPanelColor);
    }//GEN-LAST:event_vehicleNameMouseClicked

    private void challanNoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_challanNoMouseClicked
        setBackgrountWhite();
        challanNo.requestFocusInWindow();
        challanNo.setBackground(UIConstant.focusPanelColor);
    }//GEN-LAST:event_challanNoMouseClicked

    private void lrMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lrMouseClicked
        setBackgrountWhite();
        lr.requestFocusInWindow();
        lr.setBackground(UIConstant.focusPanelColor);
    }//GEN-LAST:event_lrMouseClicked

    private void TarewtMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TarewtMouseClicked
        setBackgrountWhite();
        Tarewt.requestFocusInWindow();
        Tarewt.setBackground(UIConstant.focusPanelColor);
    }//GEN-LAST:event_TarewtMouseClicked

    private void grossWtFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_grossWtFocusGained
        setBackgrountWhite();
        grossWt.requestFocusInWindow();
        grossWt.setBackground(UIConstant.focusPanelColor);
    }//GEN-LAST:event_grossWtFocusGained

    private void wbUseMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_wbUseMouseClicked
        setBackgrountWhite();
        wbUse.requestFocusInWindow();
        wbUse.setBackground(UIConstant.focusPanelColor);
    }//GEN-LAST:event_wbUseMouseClicked

    private void minesKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_minesKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            setBackgrountWhite();
            doRr.requestFocusInWindow();
            // wbUse.setBackground(UIConstant.focusPanelColor);
        }
    }//GEN-LAST:event_minesKeyPressed

    private void minesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_minesMouseClicked
        setBackgrountWhite();
        mines.requestFocusInWindow();
    }//GEN-LAST:event_minesMouseClicked

    private void gradeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_gradeKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            setBackgrountWhite();
            transporter.requestFocusInWindow();
        }
    }//GEN-LAST:event_gradeKeyPressed

    private void vehicleNameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_vehicleNameKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            setBackgrountWhite();
            transporter.requestFocusInWindow();
            // wbUse.setBackground(UIConstant.focusPanelColor);
        }
    }//GEN-LAST:event_vehicleNameKeyPressed

    private void challanNoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_challanNoKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            setBackgrountWhite();
            lr.requestFocusInWindow();
            lr.setBackground(UIConstant.focusPanelColor);
        }
    }//GEN-LAST:event_challanNoKeyPressed

    
    private void challanWbTextFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_mineralPermitNoFocusGained
    	setBackgrountWhite();
        challanWbText.setBackground(UIConstant.focusPanelColor);
    }//GEN-LAST:event_mineralPermitNoFocusGained

    private void challanWbTextFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_mineralPermitNoFocusLost
    	setBackgrountWhite();
    }//GEN-LAST:event_mineralPermitNoFocusLost

    private void challanWbTextKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_mineralPermitNoKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
        	setBackgrountWhite();
            challanDate.requestFocusInWindow();
        }
    }//GEN-LAST:event_mineralPermitNoKeyPressed
    
    
    private void invoiceValueTextFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_mineralPermitNoFocusGained
    	setBackgrountWhite();
        invoiceValueText.setBackground(UIConstant.focusPanelColor);
    }//GEN-LAST:event_mineralPermitNoFocusGained

    private void invoiceValueTextFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_mineralPermitNoFocusLost
    	setBackgrountWhite();
    }//GEN-LAST:event_mineralPermitNoFocusLost

    private void invoiceValueTextKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_mineralPermitNoKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
        	setBackgrountWhite();
            challanWbText.requestFocusInWindow();
        }
    }
    
    
    private void lrKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_lrKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            setBackgrountWhite();
            Tarewt.requestFocusInWindow();
            Tarewt.setBackground(UIConstant.focusPanelColor);
        }
    }//GEN-LAST:event_lrKeyPressed

    private void TarewtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TarewtKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            setBackgrountWhite();
            invoiceValueText.requestFocusInWindow();
//            BedAllocation.setBackground(UIConstant.focusPanelColor);
        }
    }//GEN-LAST:event_TarewtKeyPressed

    private void grossWtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_grossWtKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            setBackgrountWhite();
            weighment.requestFocusInWindow();
            //wbUse.setBackground(UIConstant.focusPanelColor);
        }
    }//GEN-LAST:event_grossWtKeyPressed

    private void grossWtMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_grossWtMouseClicked
        grossWt.requestFocusInWindow();
        grossWt.setBackground(UIConstant.focusPanelColor);
    }//GEN-LAST:event_grossWtMouseClicked

    private void wbUseKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_wbUseKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            setBackgrountWhite();
            weighment.requestFocusInWindow();
            //   wbUse.setBackground(UIConstant.focusPanelColor);
        }
    }//GEN-LAST:event_wbUseKeyPressed

    private void jButton2FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jButton2FocusGained
        setBackgrountWhite();
    }//GEN-LAST:event_jButton2FocusGained

    private void weighmentFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_weighmentFocusGained
        setBackgrountWhite();  // TODO add your handling code here:
    }//GEN-LAST:event_weighmentFocusGained

    private void transporterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_transporterActionPerformed
        
     
    }//GEN-LAST:event_transporterActionPerformed

    private void transporterKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_transporterKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            setBackgrountWhite();
            challanNo.setBackground(UIConstant.focusPanelColor);
            challanNo.requestFocusInWindow();
        }
    }//GEN-LAST:event_transporterKeyPressed

    private void doRrMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_doRrMouseClicked
        setBackgrountWhite();
        doRr.requestFocusInWindow();
    }//GEN-LAST:event_doRrMouseClicked

    private void doRrKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_doRrKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            setBackgrountWhite();
//            setTransporterList(0);
//            setGradeList(0);
            grade.requestFocusInWindow();
        }
    }//GEN-LAST:event_doRrKeyPressed

    private void transporterMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_transporterMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_transporterMouseClicked

    private void weighmentKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_weighmentKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            saveAction();
        }
    }//GEN-LAST:event_weighmentKeyPressed

    private void jButton2KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jButton2KeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            cleanInputs();
        }
    }//GEN-LAST:event_jButton2KeyPressed

    private void lrDateKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_lrDateKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            setBackgrountWhite();
            grossWt.requestFocusInWindow();
        }
    }//GEN-LAST:event_lrDateKeyPressed

    private void challanDateKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_challanDateKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            setBackgrountWhite();
            lrDate.requestFocusInWindow();
        }
    }//GEN-LAST:event_challanDateKeyPressed

    private void doRrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doRrActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_doRrActionPerformed

    private void minesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_minesActionPerformed
      //      setDoRrLst(0,mines.getSelectedIndex());
    }//GEN-LAST:event_minesActionPerformed

    private void minesFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_minesFocusLost
                // TODO add your handling code here:
    }//GEN-LAST:event_minesFocusLost

    private void doRrFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_doRrFocusLost
                // TODO add your handling code here:
    }//GEN-LAST:event_doRrFocusLost

    private void transporterFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_transporterFocusGained

    }//GEN-LAST:event_transporterFocusGained

    private void transporterFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_transporterFocusLost
         transporterOnCahange();
    }//GEN-LAST:event_transporterFocusLost
    private void transporterOnCahange() {//GEN-FIRST:event_transporterFocusLost
    	Connection conn = null;
    	boolean destroyIt = false;
    	try{
    		conn = DBConnectionPool.getConnectionFromPoolNonWeb();
    		int selectedtransporter = DropDownValues.getComboSelectedVal(transporter);
    		int selectedMines = DropDownValues.getComboSelectedVal(mines);
    		int selectedGrade = DropDownValues.getComboSelectedVal(grade);
    		int selectedDo = DropDownValues.getComboSelectedVal(doRr);
    		Pair<Integer, String> bedAssign = TPRUtils.getBedAllignment(conn, selectedtransporter, selectedMines, selectedGrade,selectedDo);
    		bedAssigned.setText(bedAssign.second);
    	}catch(Exception ex){
    		ex.printStackTrace();
    		destroyIt = true;
    	}finally{
    		try{
    			DBConnectionPool.returnConnectionToPoolNonWeb(conn, destroyIt);
    		}catch(Exception ex){
    			ex.printStackTrace();
    		}
    	}
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            ex.printStackTrace();
        } catch (InstantiationException ex) {
            ex.printStackTrace();
        } catch (IllegalAccessException ex) {
            ex.printStackTrace();
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            ex.printStackTrace();
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
//                ChallanEntryWindow dialog = new ChallanEntryWindow(new javax.swing.JFrame(), true,null,null,null,null);
            	ChallanEntryWindow dialog = new ChallanEntryWindow(new javax.swing.JFrame(), true, null, null,1,null);
//            	dialog.addWindowListener(new java.awt.event.WindowAdapter() {
//                    @Override
//                    public void windowClosing(java.awt.event.WindowEvent e) {
//                        System.exit(0);
//                    }
//                });
//                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField invoiceValueText;
    private javax.swing.JLabel invoiceValueLabel;
    private javax.swing.JTextField challanWbText;
    private javax.swing.JLabel challanWbLabel;
    private javax.swing.JTextField Tarewt;
    private javax.swing.JLabel bedAssigned;
    private javax.swing.JSpinner challanDate;
    private javax.swing.JTextField challanNo;
    public static javax.swing.JLabel challanRecord;
    private javax.swing.JComboBox doRr;
    public static javax.swing.JLabel driverInformation;
    private javax.swing.JComboBox grade;
    private javax.swing.JTextField grossWt;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JTextField lr;
    private javax.swing.JSpinner lrDate;
    private javax.swing.JComboBox mines;
    public static javax.swing.JLabel multipleTPR;
    private javax.swing.JLabel rfTagInfo;
    private javax.swing.JComboBox transporter;
    public static javax.swing.JLabel vehicleInfor;
    private javax.swing.JTextField vehicleName;
    private javax.swing.JTextField wbUse;
    private javax.swing.JButton weighment;
    // End of variables declaration//GEN-END:variables

    private void setValuesFromParent() {
        if (tpRecord != null) {
             vehicleName.setText(tpRecord.getVehicleName());
             if (tpRecord.getMinesId() != Misc.getUndefInt()) {
            	 DropDownValues.setComboItem(mines, tpRecord.getMinesId());
            }
            if (tpRecord.getDoId() != Misc.getUndefInt()) {
                 setDoRrLst(tpRecord.getDoId(),tpRecord.getMinesId() == Misc.getUndefInt() ? 0 : tpRecord.getMinesId() );
            }
           
            if (tpRecord.getMaterialGradeId() != Misc.getUndefInt()) {
                setGradeList(tpRecord.getMaterialGradeId(),tpRecord.getDoId() == Misc.getUndefInt() ? 0 : tpRecord.getDoId());
            }
            if (tpRecord.getTransporterId() != Misc.getUndefInt()) {
                setTransporterList(tpRecord.getTransporterId(),tpRecord.getDoId() == Misc.getUndefInt() ? 0 : tpRecord.getDoId());
            }
            if (!Utils.isNull(tpRecord.getChallanNo())) {
                challanNo.setText(tpRecord.getChallanNo());
            }
            if (!Utils.isNull(tpRecord.getLrNo())) {
                lr.setText(tpRecord.getLrNo());
            }
            Tarewt.setText(Misc.getPrintableDouble(tpRecord.getLoadTare()));
            grossWt.setText(Misc.getPrintableDouble(tpRecord.getLoadGross()));
            if (tpRecord.getChallanDate() != null) {
                challanDate.setValue(tpRecord.getChallanDate());
            }
            if (tpRecord.getLrDate() != null) {
                lrDate.setValue(tpRecord.getLrDate());
            }
            wbUse.setText("WB"+TokenManager.getNextStationSuffix());
//            if (!Utils.isNull(tpRecord.getBedAssigned())) {
//                BedAllocation.setText(tpRecord.getBedAssigned());
//            }
        }
    }

    private void cleanInputs() {
//        BedAllocation.setText("");
    	challanWbText.setText("");
    	invoiceValueText.setText("");
        doList = null;
        doRr.removeAllItems();
        doRr.addItem(new ComboItem(0, "Select"));
        doRr.setSelectedIndex(0);
        mines.setSelectedIndex(0);
        transporter.removeAllItems();
        transporter.addItem(new ComboItem(0, "Select"));
        transporter.setSelectedIndex(0);
        grade.removeAllItems();
        grade.addItem(new ComboItem(0, "Select"));
        grade.setSelectedIndex(0);
        Tarewt.setText("");
        challanDate.setValue(getDate());
        challanNo.setText("");
        grossWt.setText("");
        lr.setText("");
        bedAssigned.setText("");
        lrDate.setValue(getDate());
        transporter.setSelectedIndex(0);
//        vehicleName.setText("");
        wbUse.setText("");
        setMinesList();
        mines.requestFocusInWindow();
    }

/*    private void setTransporterList() {
    	Connection conn = null;
    	boolean destroyIt = false;
    	try{
    		conn = DBConnectionPool.getConnectionFromPoolNonWeb();
    		ArrayList<ComboItem> transporterList = DropDownValues.getTranporterList(conn,TokenManager.materialCat);
    		for (int i = 0; i < transporterList.size(); i++) {
    			transporter.addItem(transporterList.get(i));
    			transporter.setSelectedIndex(0);
    		}
    	}catch(Exception ex){
    		ex.printStackTrace();
    		destroyIt = true;
    	}finally{
    		try{
    			DBConnectionPool.returnConnectionToPoolNonWeb(conn, destroyIt);
    		}catch(Exception ex){
    			ex.printStackTrace();
    		}
    	}
    }*/

    private void setMinesList() {
    	Connection conn = null;
    	boolean destroyIt = false;
    	try{
    		conn = DBConnectionPool.getConnectionFromPoolNonWeb();
    		ArrayList<ComboItem> minesList = DropDownValues.getMinesList(conn);
    		for (int i = 0; i < minesList.size(); i++) {
    			mines.addItem(minesList.get(i));
    		}
    	}catch(Exception ex){
    		ex.printStackTrace();
    		destroyIt = true;
    	}finally{
    		try{
    			DBConnectionPool.returnConnectionToPoolNonWeb(conn, destroyIt);
    		}catch(Exception ex){
    			ex.printStackTrace();
    		}
    	}
    }

    private void setGardeList() {
    	Connection conn = null;
    	boolean destroyIt = false;
    	try{
    		conn = DBConnectionPool.getConnectionFromPoolNonWeb();
    		ArrayList<ComboItem> gradeList = DropDownValues.getGradeList(conn);
    		for (int i = 0; i < gradeList.size(); i++) {
    			grade.addItem(gradeList.get(i));
    		}
    	}catch(Exception ex){
    		ex.printStackTrace();
    		destroyIt = true;
    	}finally{
    		try{
    			DBConnectionPool.returnConnectionToPoolNonWeb(conn, destroyIt);
    		}catch(Exception ex){
    			ex.printStackTrace();
    		}
    	}
    }

    void getFocus() {
        mines.requestFocusInWindow();
    }

    void setBackgrountWhite() {
//        BedAllocation.setBackground(UIConstant.PanelWhite);
        Tarewt.setBackground(UIConstant.PanelWhite);
        challanNo.setBackground(UIConstant.PanelWhite);
        grossWt.setBackground(UIConstant.PanelWhite);
        lr.setBackground(UIConstant.PanelWhite);
        vehicleName.setBackground(UIConstant.PanelWhite);
        wbUse.setBackground(UIConstant.PanelWhite);
        challanWbText.setBackground(UIConstant.PanelWhite);
        invoiceValueText.setBackground(UIConstant.PanelWhite);
    }

    private void setDoRrList() {
    	Connection conn = null;
    	boolean destroyIt = false;
    	try{
    		conn = DBConnectionPool.getConnectionFromPoolNonWeb();
    		ArrayList<ComboItem> doRrdList = DropDownValues.getDoRrList(conn);
    		for (int i = 0; i < doRrdList.size(); i++) {
    			doRr.addItem(doRrdList.get(i));
    		}
    	}catch(Exception ex){
    		ex.printStackTrace();
    		destroyIt = true;
    	}finally{
    		try{
    			DBConnectionPool.returnConnectionToPoolNonWeb(conn, destroyIt);
    		}catch(Exception ex){
    			ex.printStackTrace();
    		}
    	}
    }

    private void saveAction() {
        Connection conn = null;
        boolean destroyIt = false;
    	try {
    		conn = DBConnectionPool.getConnectionFromPoolNonWeb();
            if (DropDownValues.isNull(mines)){//mines.getSelectedIndex() == 0) {
                JOptionPane.showMessageDialog(null, "Please Select Mines");
                mines.requestFocusInWindow();
                return;
            } else if (DropDownValues.isNull(doRr)){//doRr.getSelectedIndex() == 0) {
                JOptionPane.showMessageDialog(null, "Please Select DO Number");
                doRr.requestFocusInWindow();
                return;
            } else if (DropDownValues.isNull(grade)){//grade.getSelectedIndex() == 0) {
                JOptionPane.showMessageDialog(null, "Please Select grade");
                grade.requestFocusInWindow();
                return;
            } else if (Utils.isNull(vehicleName.getText())) {
                JOptionPane.showMessageDialog(null, "Please Enter Vehicle Name");
                vehicleName.setBackground(UIConstant.focusPanelColor);
                vehicleName.requestFocusInWindow();
                return;
            } else if (DropDownValues.isNull(transporter)){//transporter.getSelectedIndex() == 0) {
                JOptionPane.showMessageDialog(null, "Please Select Transporter");
                transporter.requestFocusInWindow();
                return;
            } else if (Utils.isNull(challanNo.getText())) {
                JOptionPane.showMessageDialog(null, "Please Enter Challan Number");
                challanNo.setBackground(UIConstant.focusPanelColor);
                challanNo.requestFocusInWindow();
                return;
            } else if (Utils.isNull(lr.getText())) {
                JOptionPane.showMessageDialog(null, "Please Enter Lr Number");
                lr.setBackground(UIConstant.focusPanelColor);
                lr.requestFocusInWindow();
                return;
            } else if (!Utils.isNumericDigit(grossWt.getText()) || Misc.getParamAsDouble(grossWt.getText()) > 30.00 || Misc.getParamAsDouble(grossWt.getText()) < 15.00) {
                JOptionPane.showMessageDialog(null, "Please Enter Correct  Gross Wt");
                grossWt.requestFocusInWindow();
                grossWt.setBackground(UIConstant.focusPanelColor);
                return;
            } else if (!Utils.isNumericDigit(Tarewt.getText()) || Misc.getParamAsDouble(Tarewt.getText()) > 14.99 || Misc.getParamAsDouble(Tarewt.getText()) < 8.00) {
                JOptionPane.showMessageDialog(null, "Please Enter Tare Wt");
                Tarewt.requestFocusInWindow();
                Tarewt.setBackground(UIConstant.focusPanelColor);
                return;
            }
            if (tpRecord != null) {
            	
            	RFIDHolder prevData = tpRecord.getHolderManualData();
                tpRecord.setDoId(DropDownValues.getComboSelectedVal(doRr));
                tpRecord.setMinesId(DropDownValues.getComboSelectedVal(mines));
                tpRecord.setMaterialGradeId(DropDownValues.getComboSelectedVal(grade));
               // tpRecord.setVehicleName(vehicleName.getText());
                tpRecord.setTransporterId(DropDownValues.getComboSelectedVal(transporter));
                tpRecord.setChallanNo(challanNo.getText());
                tpRecord.setLrNo(lr.getText());
                tpRecord.setLoadTare(Misc.getParamAsDouble(Tarewt.getText()));
//                tpRecord.setBedAssigned(BedAllocation.getText());
                tpRecord.setChallanDate((Date) challanDate.getValue());
                tpRecord.setLrDate((Date) lrDate.getValue());
                tpRecord.setLoadGross(Misc.getParamAsDouble(grossWt.getText()));
                tpRecord.setWbChallanNo(challanWbText.getText());
                tpRecord.setInvoiceValue(Misc.getParamAsDouble(invoiceValueText.getText()));
                RFIDHolder currData = tpRecord.getHolderManualData();
                tpRecord.setChallanDataEditAtReg(currData.isMatched(prevData) ? 0 : 1);
                RFIDHolder manualDataHolder = tpRecord.getHolderManualData();
        		int matchingTPRId = manualDataHolder == null ? Misc.getUndefInt() :  manualDataHolder.getConflictingTPRId(conn);
        		if(!Misc.isUndef(matchingTPRId)){
        			JOptionPane.showMessageDialog(null, "Challan and mines match with existing tpr id "+matchingTPRId);
        			return;
        		}
                TPRInformation.insertUpdateTpr(conn, tpRecord);
                GateInDao.updateTPRQuestion(conn, tpRecord.getTprId(), TokenManager.currWorkStationId, Status.TPRQuestion.isChallanExist, Results.Questions.YES, userId);
                if(tprBlockManager != null)
                	tprBlockManager.addQuestions(new TPSQuestionDetail(TPRQuestion.isChallanExist, Results.Questions.YES));
                if (handler != null) {
                    handler.updateVehicleBlockStatus(conn, tpRecord == null ? null : tpRecord.getVehicleId(), tpRecord);
                }
                conn.commit();
                JOptionPane.showMessageDialog(null, "Detail Saved");
                this.dispose();
            } else {
                JOptionPane.showMessageDialog(null, "TPR Not Exist");
            }
        } catch(Exception ex){
        	JOptionPane.showMessageDialog(null, UIConstant.SAVE_FAILER_MESSAGE);
    		ex.printStackTrace();
    		destroyIt = true;
    	}finally{
    		try{
    			DBConnectionPool.returnConnectionToPoolNonWeb(conn, destroyIt);
    		}catch(Exception ex){
    			ex.printStackTrace();
    		}
    	}
    }

    private Date getDate() {
        Date dt = new Date();
        dt.setTime(dt.getTime() - 1000 * 60 * 30);
        return dt;

    }

    private void setTransporterList(int selectedIndex, int selectedDo) {
    	Connection conn = null;
    	boolean destroyIt = false;
    	try{
    		conn = DBConnectionPool.getConnectionFromPoolNonWeb();
    		transporter.removeAllItems();
    		transporter.getItemCount();
    		ArrayList<ComboItem> getTransporter = DropDownValues.getTransporterList(conn, Misc.getUndefInt(), selectedDo);
    		for (int i = 0; i < getTransporter.size(); i++) {
    			ComboItem item = getTransporter.get(i);
    			transporter.addItem(item);
    			if (item.getValue() == selectedIndex) {
    				transporter.setSelectedIndex(i);
    			}
    		}
    	}catch(Exception ex){
    		ex.printStackTrace();
    		destroyIt = true;
    	}finally{
    		try{
    			DBConnectionPool.returnConnectionToPoolNonWeb(conn, destroyIt);
    		}catch(Exception ex){
    			ex.printStackTrace();
    		}
    	}
    }


    private void setGradeList(int selectedIndex, int selectedDo) {
    	Connection conn = null;
    	boolean destroyIt = false;
    	try{
    		conn = DBConnectionPool.getConnectionFromPoolNonWeb();
    		grade.removeAllItems();
    		ArrayList<Pair> getGradeList = DropDownValues.getGradeList(conn, selectedDo);
    		for (int i = 0; i < getGradeList.size(); i++) {
    			Pair<Integer, String> pairVal = getGradeList.get(i);
    			grade.addItem(new ComboItem(pairVal.first, pairVal.second));
    			if (selectedIndex == pairVal.first) {
    				grade.setSelectedIndex(i);
    			}
    		}
    	}catch(Exception ex){
    		ex.printStackTrace();
    		destroyIt = true;
    	}finally{
    		try{
    			DBConnectionPool.returnConnectionToPoolNonWeb(conn, destroyIt);
    		}catch(Exception ex){
    			ex.printStackTrace();
    		}
    	}
    }

    private void setDoRrLst(int selectedDo, int minesIndex) {
    	Connection conn = null;
    	boolean destroyIt = false;
    	try{
    		conn = DBConnectionPool.getConnectionFromPoolNonWeb();
        //int selectedmines = minesIndex;
        doRr.removeAllItems();
        doList = DropDownValues.getDoRrNumber(conn, minesIndex);
        for (int i = 0; i < doList.size(); i++) {
            Pair<Integer, String> pairVal = doList.get(i);
            doRr.addItem(new ComboItem(pairVal.first, pairVal.second));
            if (selectedDo == pairVal.first) {
            	doRr.setSelectedIndex(i);
            }
        }
        //doRr.addItem(new ComboItem(1000, "Temp DO"));
    	}catch(Exception ex){
    		ex.printStackTrace();
    		destroyIt = true;
    	}finally{
    		try{
    			DBConnectionPool.returnConnectionToPoolNonWeb(conn, destroyIt);
    		}catch(Exception ex){
    			ex.printStackTrace();
    		}
    	}
    }
}
