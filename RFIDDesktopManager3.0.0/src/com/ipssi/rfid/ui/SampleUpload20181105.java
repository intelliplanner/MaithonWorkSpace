/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.ipssi.rfid.ui;

import com.ipssi.gen.utils.DBConnectionPool;
import com.ipssi.gen.utils.DimInfo;
import com.ipssi.gen.utils.Misc;
import com.ipssi.gen.utils.Pair;
import com.ipssi.gen.utils.Triple;
import com.ipssi.rfid.coalSample.SampleDefinitionBean;
import com.ipssi.rfid.coalSample.SampleInformation;
import com.ipssi.rfid.coalSample.SampleMaster;
import com.ipssi.rfid.coalSample.SampleParamBean;
import com.ipssi.rfid.constant.UIConstant;
import com.ipssi.rfid.controller.ControllerI;
import com.ipssi.rfid.database.GateInDao;
import com.ipssi.rfid.database.IssueTag;
import com.ipssi.rfid.processor.TokenManager;
import java.awt.HeadlessException;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.FileInputStream;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.HashMap;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author IPSSI
 */
public class SampleUpload20181105 extends javax.swing.JFrame implements ControllerI {

    /**
     * Creates new form SampleUpload
     */
    private  File file = null;
//    private  Pair<Integer,String> pair = null;
    private Triple<Integer, String, Integer> pair = null;
    private static SampleUpload20181105 single_instance = null;
    public SampleUpload20181105() {
        initComponents();
        lotIdLabel.setFont(UIConstant.labelFont);
        lotNameLabel.setFont(UIConstant.labelFont);
        lotId.setFont(UIConstant.textFont);
        lotName.setFont(UIConstant.textFont);
        jLabel1.setFont(UIConstant.subHeadingFont);
        username.setFont(UIConstant.textFont);
        this.setExtendedState(this.getExtendedState() | this.MAXIMIZED_BOTH);
    }

    
    public static SampleUpload20181105 getInstance()
    {
        if (single_instance == null)
            single_instance = new SampleUpload20181105();
 
        return single_instance;
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        scanTag = new javax.swing.JButton();
        lotIdLabel = new javax.swing.JLabel();
        lotNameLabel = new javax.swing.JLabel();
        lotId = new javax.swing.JLabel();
        lotName = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        labelFileDesc = new javax.swing.JLabel();
        fileNameLabel = new javax.swing.JLabel();
        chooseFile = new javax.swing.JButton();
        uploadFile = new javax.swing.JButton();
        iconLabel = new javax.swing.JLabel();
        signOut = new java.awt.Button();
        jLabel1 = new javax.swing.JLabel();
        iconLabel2 = new javax.swing.JLabel();
        clear = new javax.swing.JButton();
        msgDisplay = new javax.swing.JLabel();
        username = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        scanTag.setText("Scan Tag");
        scanTag.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scanTagActionPerformed(evt);
            }
        });
        scanTag.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                scanTagKeyPressed(evt);
            }
        });

        lotIdLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lotIdLabel.setText("Lot-Id:");

        lotNameLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lotNameLabel.setText("Lot Name:");

        lotId.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        lotName.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(scanTag, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lotIdLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lotNameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 133, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lotId, javax.swing.GroupLayout.DEFAULT_SIZE, 230, Short.MAX_VALUE)
                    .addComponent(lotName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(13, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lotIdLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 29, Short.MAX_VALUE)
                    .addComponent(lotId, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lotNameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 29, Short.MAX_VALUE)
                    .addComponent(lotName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(51, 51, 51))
            .addComponent(scanTag, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        labelFileDesc.setText("<html>Please upload the xlsx file containing definition of the Sample Upload.<br> "  +
            "<font color='red'>The expected format for the CSV file is as follows: Sl.No., Name of Siding/Colliety/Loading Point, Sized and Declared GCV/Grade,<br> Date of Unloading, Date of Sample Preparation, No. of Trucks Unloaded,	Wet Qty (MT), TM %(ARB),<br> Analysis Result on ADB(IM %, Ash %, VM %, FC %, GCV (Kcal/kg)) ,GCV (Kcal/kg)(ARB), " +
            "<br> EQ Conditions of 60% RH & 40C( IM %, Ash %,	VM %, FC %, GCV (Kcal/kg) ), Analyzed Grade </font></html>");
        labelFileDesc.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        labelFileDesc.setAlignmentX(0.5F);

        fileNameLabel.setText("No File Choosen");

        chooseFile.setText("Choose File");
        chooseFile.setBorderPainted(false);
        chooseFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseFileActionPerformed(evt);
            }
        });
        chooseFile.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                chooseFileKeyPressed(evt);
            }
        });

        uploadFile.setBackground(new java.awt.Color(0, 0, 0));
        uploadFile.setForeground(new java.awt.Color(255, 255, 255));
        uploadFile.setText("Upload");
        uploadFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uploadFileActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(labelFileDesc, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(2, 2, 2)
                .addComponent(chooseFile, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(fileNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 379, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(uploadFile, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(50, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(labelFileDesc, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chooseFile, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fileNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(uploadFile, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22))
        );

        iconLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/ipssi/rfid/ui/intelliplanner.png"))); // NOI18N

        signOut.setLabel("Sign Out");
        signOut.setBackground(new java.awt.Color(255, 255, 255));
        signOut.setFocusable(false);
        signOut.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        signOut.setForeground(new java.awt.Color(0, 102, 153));
        signOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                signOutActionPerformed(evt);
            }
        });

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Sample Upload");
        jLabel1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        iconLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/ipssi/rfid/ui/cover_01_right_top.gif"))); // NOI18N

        clear.setText("Clear");
        clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearActionPerformed(evt);
            }
        });

        msgDisplay.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        msgDisplay.setAlignmentX(0.5F);

        username.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        username.setText("Hello");

        jPanel4.setBackground(new java.awt.Color(102, 102, 102));

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 4, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(iconLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 318, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(102, 102, 102)
                .addComponent(username, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(signOut, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(44, 44, 44)
                .addComponent(iconLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(msgDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, 349, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(clear, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(118, Short.MAX_VALUE))
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(iconLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(signOut, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(iconLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(username, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(msgDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(clear, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(225, 225, 225))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>                        

    private void signOutActionPerformed(java.awt.event.ActionEvent evt) {                                        
        // GateInDao.forceSignut(TokenManager.userId,TokenManager.srcType,Integer.toString(TokenManager.systemId));
        this.dispose();
        new LoginSampleUpload().setVisible(true);
    }                                       

    private void scanTagActionPerformed(java.awt.event.ActionEvent evt) {                                        
        scanTag();
    }                                       

    private void scanTagKeyPressed(java.awt.event.KeyEvent evt) {                                   
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            scanTag();
        }        // TODO add your handling code here:
    }                                  

    private void clearActionPerformed(java.awt.event.ActionEvent evt) {                                      
        clearInputs();   
        msgDisplay.setText("");
        // TODO add your handling code here:
    }                                     

    private void chooseFileActionPerformed(java.awt.event.ActionEvent evt) {                                           
        chooseFile();
    }                                          

    private void chooseFileKeyPressed(java.awt.event.KeyEvent evt) {   
    	
    	
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            chooseFile();
        }
    }                                     

    private void uploadFileActionPerformed(java.awt.event.ActionEvent evt) {                                           
        if(save()){
           JOptionPane.showMessageDialog(null, "Successfully Saved.");
        }else{
        	JOptionPane.showMessageDialog(null, "Some Error Occur.");
        }
    }                                          

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SampleUpload20181105.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SampleUpload20181105.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SampleUpload20181105.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SampleUpload20181105.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SampleUpload20181105().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton chooseFile;
    private javax.swing.JButton clear;
    private javax.swing.JLabel fileNameLabel;
    private javax.swing.JLabel iconLabel;
    private javax.swing.JLabel iconLabel2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JLabel labelFileDesc;
    private javax.swing.JLabel lotId;
    private javax.swing.JLabel lotIdLabel;
    private javax.swing.JLabel lotName;
    private javax.swing.JLabel lotNameLabel;
    private javax.swing.JLabel msgDisplay;
    private javax.swing.JButton scanTag;
    public static java.awt.Button signOut;
    private javax.swing.JButton uploadFile;
    public static javax.swing.JLabel username;
    // End of variables declaration                   


    private void chooseFile() {
        

    	try {
//    		if(pair == null){
//    			JOptionPane.showMessageDialog(null,"Please Scan Tag");
//    			return;
//    		}
    		msgDisplay.setText("");
    		fileNameLabel.setText("No File Choosen");
    		      JFileChooser fileChooser = new JFileChooser();
    		int retval = fileChooser.showSaveDialog(null);

    		if (retval == JFileChooser.APPROVE_OPTION) {
    			file = fileChooser.getSelectedFile();
    			if (file != null) {
    				if (file.getName().toLowerCase().endsWith(".xls") || file.getName().toLowerCase().endsWith(".xlsx")) {
    					file = new File(file.getParentFile(), file.getName());
    					fileNameLabel.setText(file.getPath());
    				}else{
    					JOptionPane.showMessageDialog(null, "Please Select Excel File");
    				}
    			}
    		}

    	} catch (HeadlessException e) {
    		System.out.println("Sample Upload : chooseFile(), " + e);
    	}

    }

 

    private void scanTag() {
    	Connection conn = null;
    	boolean destroyIt = false;
    	try{
    		conn = DBConnectionPool.getConnectionFromPoolNonWeb();
    		IssueTag issueTag = new IssueTag();
    		Pair<Integer, String> pairVal= issueTag.getTagEPC();
    		String msgStr = "";
    		if(pairVal != null){
    			msgStr = pairVal.first == 0 ? "Tag Read Successfully" : pairVal.first == 1 ? "Not Issued" :  pairVal.first == 3 ? "multiple tags" : pairVal.first == 4 ?  "Tag No Read" : "Reader Not Connected";
    		}

    		if(pairVal.first==0){
    			pair = GateInDao.isLotExist(conn, pairVal.second);
    			if(pair != null){
    				GateInDao.updatePostLotData(conn,pairVal.first,pairVal.second);
    				uploadFile.setVisible(true);
    				msgDisplay.setText("Tag Scanned Please Upload File");
    				lotId.setText(pair.first + "");
    				lotName.setText(pair.second);
    			}else{
    				JOptionPane.showMessageDialog(null,"No Lot Exist");
    			}
    		}else{
    			JOptionPane.showMessageDialog(null, msgStr);
    		}

    	}catch(Exception ex){
    		JOptionPane.showMessageDialog(null, UIConstant.SCAN_TAG_MESSAGE);
    		ex.printStackTrace();
    		destroyIt = true;
    	}finally{
    		try{
    			DBConnectionPool.returnConnectionToPoolNonWeb(conn, destroyIt);
    		}catch(Exception ex){
    			ex.printStackTrace();
    		}
    	}    

    
    }

    @Override
    public void hideControls(boolean isTrue) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void enableControls(boolean isTrue) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void getFocus() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void clearInputs() {
        file = null;
        fileNameLabel.setText("");
        pair = null;
        lotId.setText("");
        lotName.setText("");
        fileNameLabel.setText("No File Choosen");
      //  msgDisplay.setText("");
    }

    @Override
    public boolean save() {
        
    	boolean status = false;
    	msgDisplay.setText("");
    	if(pair == null){
    		JOptionPane.showMessageDialog(null,"Please Scan Tag");
    		return false;
    	}
    	else 
    		if (fileNameLabel.getText().equalsIgnoreCase("No File choosen") || fileNameLabel.getText().equalsIgnoreCase("")) {
    		JOptionPane.showMessageDialog(null, "Please Choose File to Upload");
    		return false;
    	}
    	Connection conn = null;
    	boolean destroyIt = false;
    	FileInputStream  input = null;
    	HashMap<Integer, SampleParamBean> sampleParamList = null;
    	try{
    		conn = DBConnectionPool.getConnectionFromPoolNonWeb();
    		SampleDefinitionBean sampleDef = null;
    		String ext = "";
    		boolean sampleUpdate =  false;
    		Triple<Integer, Integer, StringBuilder> result = null;
    		int portNodeId = Misc.isUndef(TokenManager.portNodeId) ? 463 : TokenManager.portNodeId;
    		sampleDef = SampleInformation.getSampleDefinitionByPortNodeId(conn, portNodeId, true);
    		if (sampleDef != null) {
    			//SampleInformation.loadSampleDefinition(conn);
    			sampleParamList = sampleDef != null ? sampleDef.getSampleParamList() : null;
    			ArrayList<DimInfo.ValInfo> valList = DimInfo.getDimInfo("sample_mapping_params") != null ? (ArrayList<DimInfo.ValInfo>)DimInfo.getDimInfo("sample_mapping_params").getValList() : null;
    			String fname = file.getName();
    			if (fname != null) {
    				int dotIndex = 0;
    				dotIndex = fname.lastIndexOf('.');
    				if (dotIndex != -1) {
    					ext = fname.substring(dotIndex + 1);
    				}
    			}
    			boolean doingXLS2007 = "xlsx".equals(ext == null ? "" : ext);
    			boolean doingXLS2003 = "xls".equals(ext == null ? "" : ext);

    			input = new FileInputStream(new File(file.getPath()));
    			if (input != null) {
    				int userId = Misc.getUndefInt();
    				if (doingXLS2003){
    					result = SampleMaster.processContentXLS2003(conn, input, portNodeId, sampleDef, sampleParamList, valList,userId,sampleUpdate,pair.first,pair.third);
    				}else if (doingXLS2007){
    					result = SampleMaster.processContentXLS2007(conn, input, portNodeId, sampleDef, sampleParamList, valList,userId,sampleUpdate,pair.first,pair.third);
    					if(result.first > 0){
    						GateInDao.updateLotSampleAfterUpload(conn, pair.first);
    						GateInDao.freeLotNumberAfterUpload(conn, pair.first);
    						status=true;
    					}
    					else
    						status=false;
    				}
    			}
    		}
    		msgDisplay.setText(result != null && result.third != null ? "<html>"+ ((StringBuilder)result.third).toString() + "</html>": "");

    	}catch(Exception ex){
    		JOptionPane.showMessageDialog(null, UIConstant.SAVE_FAILER_MESSAGE);
    		ex.printStackTrace();
    		destroyIt = true;
    	}finally{
    		try{
    			DBConnectionPool.returnConnectionToPoolNonWeb(conn, destroyIt);
    		}catch(Exception ex){
    			ex.printStackTrace();
    		}
    	}
    	clearInputs();
    	return status;

    }
}
