package com.ipssi.rfid.ui;

import com.ipssi.gen.utils.DBConnectionPool;
import com.ipssi.gen.utils.DimInfo;
import com.ipssi.gen.utils.Misc;
import com.ipssi.gen.utils.Pair;
import com.ipssi.gen.utils.Triple;
import com.ipssi.rfid.coalSample.SampleDefinitionBean;
import com.ipssi.rfid.coalSample.SampleInformation;
import com.ipssi.rfid.coalSample.SampleMaster;
import com.ipssi.rfid.constant.UIConstant;
import com.ipssi.rfid.controller.ControllerI;
import com.ipssi.rfid.database.GateInDao;
import com.ipssi.rfid.coalSample.SampleParamBean;
import com.ipssi.rfid.database.IssueTag;
import com.ipssi.rfid.db.RFIDMasterDao;
import com.ipssi.rfid.processor.TokenManager;
import com.ipssi.rfid.processor.Utils;
import com.ipssi.rfid.readers.RFIDDataHandler;
import com.ipssi.rfid.readers.RFIDException;
import com.ipssi.rfid.readers.RFIDMaster;
import java.awt.Desktop;
import java.awt.Event;
import java.awt.HeadlessException;
import java.awt.event.KeyEvent;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.HashMap;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;


public class SamplUpload20180810 extends javax.swing.JFrame implements ControllerI{
	/*
	 * To change this license header, choose License Headers in Project Properties.
	 * To change this template file, choose Tools | Templates
	 * and open the template in the editor.
	 */

	/**
	 *
	 * @author IPSSI
	 */

//	    private RFIDDataHandler rfidHandler = null;
	    private  File file = null;
//	    private  Pair<Integer,String> pair = null;
	    private Triple<Integer, String, Integer> pair = null;
	    
	    /**
	     * Creates new form SampleUpload
	     */
	    public void SampleUploadBackUp() {
	        initComponents();
	        lotIdLabel.setFont(UIConstant.labelFont);
	        lotNameLabel.setFont(UIConstant.labelFont);
	        lotId.setFont(UIConstant.textFont);
	        lotName.setFont(UIConstant.textFont);
	        
	        this.setExtendedState(this.getExtendedState() | this.MAXIMIZED_BOTH);
	    }

	    /**
	     * This method is called from within the constructor to initialize the form.
	     * WARNING: Do NOT modify this code. The content of this method is always
	     * regenerated by the Form Editor.
	     */
	    @SuppressWarnings("unchecked")
	    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
	    private void initComponents() {

	        jPanel1 = new javax.swing.JPanel();
	        jLabel1 = new javax.swing.JLabel();
	        username = new javax.swing.JLabel();
	        signOut = new java.awt.Button();
	        uploadFile = new javax.swing.JButton();
	        iconLabel = new javax.swing.JLabel();
	        iconLabel2 = new javax.swing.JLabel();
	        fileNameLabel = new javax.swing.JLabel();
	        scanTag = new javax.swing.JButton();
	        lotIdLabel = new javax.swing.JLabel();
	        lotNameLabel = new javax.swing.JLabel();
	        lotId = new javax.swing.JLabel();
	        lotName = new javax.swing.JLabel();
	        chooseFile = new javax.swing.JButton();
	        msgAlert = new javax.swing.JLabel();
	        clear = new javax.swing.JButton();
	        errorDisplay = new javax.swing.JLabel();
	        labelFileDesc = new javax.swing.JLabel();

	        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

	        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

	        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
	        jLabel1.setText("Sample Upload");
	        jLabel1.setFont(UIConstant.subHeadingFont);
	        jLabel1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

	        username.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);

	        signOut.setLabel("Sign Out");
	        signOut.setBackground(new java.awt.Color(255, 255, 255));
	        signOut.setFocusable(false);
	        signOut.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
	        signOut.setForeground(new java.awt.Color(0, 102, 153));
	        signOut.addActionListener(new java.awt.event.ActionListener() {
	            public void actionPerformed(java.awt.event.ActionEvent evt) {
	                signOutActionPerformed(evt);
	            }
	        });

	        uploadFile.setBackground(new java.awt.Color(0, 0, 0));
	        uploadFile.setForeground(new java.awt.Color(255, 255, 255));
	        uploadFile.setText("Upload");
	        uploadFile.addActionListener(new java.awt.event.ActionListener() {
	            public void actionPerformed(java.awt.event.ActionEvent evt) {
	                uploadFileActionPerformed(evt);
	            }
	        });

	        iconLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/ipssi/rfid/ui/intelliplanner.png"))); // NOI18N

	        iconLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/ipssi/rfid/ui/cover_01_right_top.gif"))); // NOI18N

	        fileNameLabel.setText("No File Choosen");

	        scanTag.setText("Scan Tag");
	        scanTag.addActionListener(new java.awt.event.ActionListener() {
	            public void actionPerformed(java.awt.event.ActionEvent evt) {
	                scanTagActionPerformed(evt);
	            }
	        });
	        scanTag.addKeyListener(new java.awt.event.KeyAdapter() {
	            public void keyPressed(java.awt.event.KeyEvent evt) {
	                scanTagKeyPressed(evt);
	            }
	        });

	        lotIdLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
	        lotIdLabel.setText("Lot-Id:");

	        lotNameLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
	        lotNameLabel.setText("Lot Name:");

	        chooseFile.setText("Choose File");
	        chooseFile.setBorderPainted(false);
	        chooseFile.addActionListener(new java.awt.event.ActionListener() {
	            public void actionPerformed(java.awt.event.ActionEvent evt) {
	                chooseFileActionPerformed(evt);
	            }
	        });
	        chooseFile.addKeyListener(new java.awt.event.KeyAdapter() {
	            public void keyPressed(java.awt.event.KeyEvent evt) {
	                chooseFileKeyPressed(evt);
	            }
	        });

	        clear.setText("Clear");
	        clear.addActionListener(new java.awt.event.ActionListener() {
	            public void actionPerformed(java.awt.event.ActionEvent evt) {
	                clearActionPerformed(evt);
	            }
	        });

	        errorDisplay.setVerticalAlignment(javax.swing.SwingConstants.TOP);
	        errorDisplay.setAlignmentX(0.5F);

	        labelFileDesc.setText("<html>Please upload the xlsx file containing definition of the Landmarks.<br>" +
	            "The expected format for the CSV file is as follows: Name,Longitude,Latitude,Organization,Description</html>");

	        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
	        jPanel1.setLayout(jPanel1Layout);
	        jPanel1Layout.setHorizontalGroup(
	            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
	            .addGroup(jPanel1Layout.createSequentialGroup()
	                .addComponent(iconLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
	                .addGap(276, 276, 276)
	                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 486, javax.swing.GroupLayout.PREFERRED_SIZE)
	                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
	                .addComponent(username, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
	                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
	                .addComponent(signOut, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
	                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
	                .addComponent(iconLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
	            .addGroup(jPanel1Layout.createSequentialGroup()
	                .addGap(92, 92, 92)
	                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
	                    .addGroup(jPanel1Layout.createSequentialGroup()
	                        .addComponent(scanTag, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE)
	                        .addGap(12, 12, 12)
	                        .addComponent(msgAlert, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)
	                        .addGap(18, 18, Short.MAX_VALUE))
	                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
	                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
	                            .addComponent(lotIdLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
	                            .addComponent(lotNameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
	                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
	                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
	                            .addComponent(clear, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
	                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
	                                .addComponent(lotName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
	                                .addComponent(lotId, javax.swing.GroupLayout.DEFAULT_SIZE, 218, Short.MAX_VALUE)))
	                        .addGap(77, 77, 77)))
	                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
	                    .addGroup(jPanel1Layout.createSequentialGroup()
	                        .addComponent(chooseFile, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
	                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
	                        .addComponent(fileNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 371, javax.swing.GroupLayout.PREFERRED_SIZE)
	                        .addGap(36, 36, 36)
	                        .addComponent(uploadFile, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE))
	                    .addComponent(labelFileDesc, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
	                    .addComponent(errorDisplay, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
	                .addGap(137, 137, 137))
	        );
	        jPanel1Layout.setVerticalGroup(
	            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
	            .addGroup(jPanel1Layout.createSequentialGroup()
	                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
	                    .addComponent(iconLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
	                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
	                        .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
	                        .addComponent(username, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
	                    .addComponent(signOut, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
	                    .addComponent(iconLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
	                .addGap(106, 106, 106)
	                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
	                    .addGroup(jPanel1Layout.createSequentialGroup()
	                        .addComponent(labelFileDesc, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
	                        .addGap(18, 18, 18)
	                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
	                            .addComponent(chooseFile)
	                            .addComponent(fileNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
	                            .addComponent(uploadFile, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)))
	                    .addGroup(jPanel1Layout.createSequentialGroup()
	                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
	                            .addComponent(msgAlert, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
	                            .addComponent(scanTag, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
	                        .addGap(29, 29, 29)
	                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
	                            .addComponent(lotId, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
	                            .addComponent(lotIdLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))))
	                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
	                    .addGroup(jPanel1Layout.createSequentialGroup()
	                        .addGap(28, 28, 28)
	                        .addComponent(errorDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE))
	                    .addGroup(jPanel1Layout.createSequentialGroup()
	                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
	                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
	                            .addComponent(lotName, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
	                            .addComponent(lotNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
	                        .addGap(18, 18, 18)
	                        .addComponent(clear, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)))
	                .addGap(254, 339, Short.MAX_VALUE))
	        );

	        signOut.getAccessibleContext().setAccessibleName("");

	        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
	        getContentPane().setLayout(layout);
	        layout.setHorizontalGroup(
	            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
	            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
	        );
	        layout.setVerticalGroup(
	            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
	            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
	        );

	        pack();
	    }// </editor-fold>                        

	    private void signOutActionPerformed(java.awt.event.ActionEvent evt) {                                        
	        // GateInDao.forceSignut(TokenManager.userId,TokenManager.srcType,Integer.toString(TokenManager.systemId));
	        this.dispose();
	        new LoginSampleUpload().setVisible(true);        
	    }                                       

	    private void uploadFileActionPerformed(java.awt.event.ActionEvent evt) {                                           
	        if(save()){
	            //JOptionPane.showMessageDialog(null, "Successfully Saved");
	        }
	    }                                          

	    private void scanTagActionPerformed(java.awt.event.ActionEvent evt) {                                        
	        scanTag();
	    }                                       

	    private void chooseFileActionPerformed(java.awt.event.ActionEvent evt) {                                           
	        chooseFile();
	    }                                          

	    private void chooseFileKeyPressed(java.awt.event.KeyEvent evt) {                                      
	        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
	            chooseFile();
	        }
	    }                                     

	    private void scanTagKeyPressed(java.awt.event.KeyEvent evt) {                                   
	        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
	            scanTag();
	        }
	    }                                  

	    private void clearActionPerformed(java.awt.event.ActionEvent evt) {                                      
	        clearInputs();        // TODO add your handling code here:
	    }                                     

	    
	    /**
	     * @param args the command line arguments
	     */
	    public static void main(String args[]) {
	        /* Set the Nimbus look and feel */
	        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
	        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
	         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
	         */
	        try {
	            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
	                if ("Nimbus".equals(info.getName())) {
	                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
	                    break;
	                }
	            }
	        } catch (ClassNotFoundException ex) {
	            java.util.logging.Logger.getLogger(SampleUpload.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
	        } catch (InstantiationException ex) {
	            java.util.logging.Logger.getLogger(SampleUpload.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
	        } catch (IllegalAccessException ex) {
	            java.util.logging.Logger.getLogger(SampleUpload.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
	        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
	            java.util.logging.Logger.getLogger(SampleUpload.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
	        }
	        //</editor-fold>

	        /* Create and display the form */
	        java.awt.EventQueue.invokeLater(new Runnable() {
	            public void run() {
	                new SampleUpload().setVisible(true);
	            }
	        });
	    }

	    // Variables declaration - do not modify                     
	    private javax.swing.JButton chooseFile;
	    private javax.swing.JButton clear;
	    private javax.swing.JLabel errorDisplay;
	    private javax.swing.JLabel fileNameLabel;
	    private javax.swing.JLabel iconLabel;
	    private javax.swing.JLabel iconLabel2;
	    private javax.swing.JLabel jLabel1;
	    private javax.swing.JPanel jPanel1;
	    private javax.swing.JLabel labelFileDesc;
	    private javax.swing.JLabel lotId;
	    private javax.swing.JLabel lotIdLabel;
	    private javax.swing.JLabel lotName;
	    private javax.swing.JLabel lotNameLabel;
	    private javax.swing.JLabel msgAlert;
	    private javax.swing.JButton scanTag;
	    public static java.awt.Button signOut;
	    private javax.swing.JButton uploadFile;
	    public static javax.swing.JLabel username;
	    // End of variables declaration                   

	   

	   


	    private void chooseFile() {

	    	try {
	    		if(pair == null){
	    			JOptionPane.showMessageDialog(null,"Please Scan Tag");
	    			return;
	    		}
	    		errorDisplay.setText("");
	    		fileNameLabel.setText("No File Choosen");
	    		JFileChooser fileChooser = new JFileChooser();
	    		int retval = fileChooser.showSaveDialog(null);

	    		if (retval == JFileChooser.APPROVE_OPTION) {
	    			file = fileChooser.getSelectedFile();
	    			if (file != null) {
	    				if (file.getName().toLowerCase().endsWith(".xls") || file.getName().toLowerCase().endsWith(".xlsx")) {
	    					file = new File(file.getParentFile(), file.getName());

	    					fileNameLabel.setText(file.getPath());

	    					//                            try {
	    						//                                Desktop.getDesktop().open(file);
	    					//                            } catch (IOException ex) {
	    					// Logger.getLogger(ProfileManagement.class.getName()).log(Level.SEVERE, null, ex);
	    					//                            }
	    				}else{
	    					JOptionPane.showMessageDialog(null, "Please Select Excel File");

	    				}
	    			}
	    		}

	    	} catch (HeadlessException e) {
	    		System.out.println("Sample Upload : chooseFile(), " + e);
	    	}

	    }

	    private void scanTag() {
	        
	        Connection conn = null;
	        boolean destroyIt = false;
	        try{
	            conn = DBConnectionPool.getConnectionFromPoolNonWeb();
	            IssueTag issueTag = new IssueTag();
				Pair<Integer, String> pairVal= issueTag.getTagEPC();
				String msgStr = "";
				if(pairVal != null){
					 msgStr = pairVal.first == 0 ? "Tag Read Successfully" : pairVal.first == 1 ? "Not Issued" :  pairVal.first == 3 ? "multiple tags" : pairVal.first == 4 ?  "Tag No Read" : "Reader Not Connected";
				}
				
				if(pairVal.first==0){
					pair = GateInDao.isLotExist(conn, pairVal.second);
					if(pair != null){
						uploadFile.setVisible(true);
						errorDisplay.setText("Tag Scanned Please Upload File");
						lotId.setText(pair.first + "");
						lotName.setText(pair.second);
					}else{
						JOptionPane.showMessageDialog(null,"No Lot Exist");
					}
				}else{
				    JOptionPane.showMessageDialog(null, msgStr);
				}
	            
	        }catch(Exception ex){
	            JOptionPane.showMessageDialog(null, UIConstant.SCAN_TAG_MESSAGE);
	            ex.printStackTrace();
	            destroyIt = true;
	        }finally{
	            try{
	                DBConnectionPool.returnConnectionToPoolNonWeb(conn, destroyIt);
	            }catch(Exception ex){
	                ex.printStackTrace();
	            }
	        }    
	    
	    }

	    @Override
	    public void clearInputs() {
	        file = null;
	        fileNameLabel.setText("");
	        pair = null;
//	        rfidHandler = null;
	        lotId.setText("");
	        lotName.setText("");
	        fileNameLabel.setText("No File Choosen");
	        errorDisplay.setText("");
	    }

	    @Override
	    public boolean save() {
	    	errorDisplay.setText("");
	        if (fileNameLabel.getText().equalsIgnoreCase("No File choosen") || fileNameLabel.getText().equalsIgnoreCase("")) {
	            JOptionPane.showMessageDialog(null, "Please Choose File to Upload");
	            return false;
	        }
	        Connection conn = null;
	    	boolean destroyIt = false;
	    	FileInputStream  input = null;
	    	HashMap<Integer, SampleParamBean> sampleParamList = null;
	    	try{
	    		conn = DBConnectionPool.getConnectionFromPoolNonWeb();
	            SampleDefinitionBean sampleDef = null;
	            String ext = "";
	            boolean sampleUpdate =  false;
	            Triple<Integer, Integer, StringBuilder> result = null;
	            int portNodeId = Misc.isUndef(TokenManager.portNodeId) ? 463 : TokenManager.portNodeId;
	            sampleDef = SampleInformation.getSampleDefinitionByPortNodeId(conn, portNodeId, true);
	            if (sampleDef != null) {
	            	//SampleInformation.loadSampleDefinition(conn);
					sampleParamList = sampleDef != null ? sampleDef.getSampleParamList() : null;
					ArrayList<DimInfo.ValInfo> valList = DimInfo.getDimInfo("sample_mapping_params") != null ? (ArrayList<DimInfo.ValInfo>)DimInfo.getDimInfo("sample_mapping_params").getValList() : null;
	                String fname = file.getName();
	                if (fname != null) {
	                    int dotIndex = 0;
	                    dotIndex = fname.lastIndexOf('.');
	                    if (dotIndex != -1) {
	                        ext = fname.substring(dotIndex + 1);
	                    }
	                }
	                boolean doingXLS2007 = "xlsx".equals(ext == null ? "" : ext);
	                boolean doingXLS2003 = "xls".equals(ext == null ? "" : ext);
	                
	                 input = new FileInputStream(new File(file.getPath()));
	              if (input != null) {
					int userId = Misc.getUndefInt();
					if (doingXLS2003){
						//result = SampleMaster.processContentXLS2003(conn, input, portNodeId, sampleDef, sampleParamList, valList,userId,sampleUpdate);
					}
					else if (doingXLS2007)
						result = SampleMaster.processContentXLS2007(conn, input, portNodeId, sampleDef, sampleParamList, valList,userId,sampleUpdate,pair.first,pair.third);
	              	}
	              }
	            errorDisplay.setText(result != null && result.third != null ? "<html>"+ ((StringBuilder)result.third).toString() + "</html>": "");
	        }catch(Exception ex){
	    		JOptionPane.showMessageDialog(null, UIConstant.SAVE_FAILER_MESSAGE);
	    		ex.printStackTrace();
	    		destroyIt = true;
	    	}finally{
	    		try{
	   			 DBConnectionPool.returnConnectionToPoolNonWeb(conn, destroyIt);
	   		 }catch(Exception ex){
	   			 ex.printStackTrace();
	   		 }
	    	}
	    	clearInputs();
	        return true;
	    
	    
	    }

	    @Override
	    public void hideControls(boolean isTrue) {
	        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
	    }

	    @Override
	    public void enableControls(boolean isTrue) {
	        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
	    }

	    @Override
	    public void getFocus() {
	        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
	    }
	}