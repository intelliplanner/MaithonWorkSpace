/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.ipssi.rfid.ui;

import com.ipssi.SingleSession;
import com.ipssi.gen.utils.DBConnectionPool;
import com.ipssi.gen.utils.Misc;
import com.ipssi.gen.utils.Pair;
import com.ipssi.gen.utils.Triple;
import com.ipssi.logger.RFLogger;
import com.ipssi.rfid.constant.RFIDConstant;
import com.ipssi.rfid.processor.TokenManager;
import com.ipssi.rfid.ui.SyncClockService;
import com.ipssi.rfid.constant.UIConstant;
import com.ipssi.rfid.database.GateInDao;
import com.ipssi.rfid.database.LoginDao;
import com.ipssi.rfid.processor.AccessMaster;
import com.ipssi.rfid.processor.Utils;
import java.awt.event.KeyEvent;
import java.sql.Connection;
import java.util.Properties;
import javax.swing.JOptionPane;
import java.net.InetAddress;
import java.net.NetworkInterface;
import java.net.SocketException;
import java.net.UnknownHostException;
import java.util.ArrayList;

/**
 *
 * @author IPSSI
 */
public class LoginSampleUpload extends javax.swing.JFrame implements com.ipssi.rfid.controller.ControllerI{
    /**
     * Creates new form LoginWindow2nd
     */
    public static boolean isTimeSync = false;
    private static Properties pros = null;
    private String username1 = null;
    private String userDisplayName = null;
    private char[] password1 = null;
    private boolean isSampleUploadVisible = false;
    
    public LoginSampleUpload() {
        initComponents();
        this.setExtendedState(this.getExtendedState() | this.MAXIMIZED_BOTH);
         TokenManager.initSystemConfig();
         if(!TokenManager.isDebug){
        	    RFLogger.init();
         	RFLogger.RouteStdOutErrToFile();
         }
         if(com.ipssi.rfid.processor.TokenManager.syncClock){
        	 new SyncClockService().start();
         }
         
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        loginLabel = new javax.swing.JLabel();
        passwordLabel = new javax.swing.JLabel();
        username = new javax.swing.JTextField();
        uploadSampleTab = new java.awt.Button();
        jLabel4 = new javax.swing.JLabel();
        submit = new java.awt.Button();
        password = new javax.swing.JPasswordField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 17));
        jLabel1.setForeground(new java.awt.Color(255, 0, 0));
        jLabel1.setText("<html><center>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Welcome to MIPS Tool</center></html>");

        loginLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        loginLabel.setText("Login:");

        passwordLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        passwordLabel.setText("Password:");

        username.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        username.setName("username"); // NOI18N
        username.setBackground(new java.awt.Color(255, 204, 204));
        username.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        username.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                usernameActionPerformed(evt);
            }
        });
        username.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                usernameKeyPressed(evt);
            }
        });

        uploadSampleTab.setBackground(new java.awt.Color(255, 255, 255));
        uploadSampleTab.setLabel("Upload Sample");
        uploadSampleTab.setFont(UIConstant.textFont);
        uploadSampleTab.setVisible(false);
        uploadSampleTab.setBackground(new java.awt.Color(0, 0, 0));
        uploadSampleTab.setForeground(new java.awt.Color(255, 255, 255));
        uploadSampleTab.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uploadSampleTabActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 17));
        jLabel4.setForeground(new java.awt.Color(255, 0, 0));
        jLabel4.setText("<html><center>IntelliPlanner Movement Information & Planning System</center></html>");

        submit.setActionCommand("submit");
        submit.setBackground(new java.awt.Color(0, 0, 0));
        submit.setForeground(new java.awt.Color(255, 255, 255));
        submit.setLabel("Submit");
        submit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitActionPerformed(evt);
            }
        });
        submit.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                submitKeyPressed(evt);
            }
        });

        password.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        password.setBackground(new java.awt.Color(255, 204, 204));
        password.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        password.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                passwordKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(uploadSampleTab, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(529, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, 667, Short.MAX_VALUE))
                .addContainerGap(319, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(323, 323, 323)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(passwordLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(loginLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 302, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(username)
                        .addComponent(password, javax.swing.GroupLayout.DEFAULT_SIZE, 167, Short.MAX_VALUE))
                    .addComponent(submit, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(uploadSampleTab, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(197, 197, 197)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(loginLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(username, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(passwordLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(11, 11, 11))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(password)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addComponent(submit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(314, Short.MAX_VALUE))
        );

        uploadSampleTab.getAccessibleContext().setAccessibleName("");
        uploadSampleTab.setFocusable(false);
        submit.getAccessibleContext().setAccessibleName("submit");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void usernameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_usernameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_usernameActionPerformed

    private void usernameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_usernameKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            if (Utils.isNull(username.getText())) {
                JOptionPane.showMessageDialog(null, "Please Enter Login ID");
                username.requestFocusInWindow();
            } else {
                password.requestFocusInWindow();
            }
        }
    }//GEN-LAST:event_usernameKeyPressed

    private void submitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitActionPerformed
         submitActionPerformed();
    }//GEN-LAST:event_submitActionPerformed

    private void uploadSampleTabActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uploadSampleTabActionPerformed
        // TODO add your handling code here
         try{
    		TokenManager.initConfig("Sample Upload",com.ipssi.rfid.constant.Type.WorkStationType.GATE_IN_TYPE);
    		TokenManager.materialCat = com.ipssi.rfid.constant.Type.TPRMATERIAL.COAL;//coal
    		TokenManager.currWorkStationType = com.ipssi.rfid.constant.Type.WorkStationType.GATE_IN_TYPE;//coal
    		System.out.println("COAL-TokenManager.currWorkStationType: "+TokenManager.currWorkStationType);
    		SampleUpload gt = SampleUpload.getInstance();//new SampleUpload();
    		SampleUpload.username.setText("<html><body><span style='color:red;  font-size:12pt;'>Hello, &nbsp;"+userDisplayName+"</span></html></body>");
    		this.setVisible(false);
    		gt.setVisible(true);
    	}catch(Exception ex){
    		ex.printStackTrace();
    	}
    }//GEN-LAST:event_uploadSampleTabActionPerformed

    private void passwordKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_passwordKeyPressed
         if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            submitActionPerformed();
        }
    }//GEN-LAST:event_passwordKeyPressed

    private void submitKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_submitKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            submitActionPerformed();
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_submitKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LoginSampleUpload.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LoginSampleUpload.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LoginSampleUpload.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LoginSampleUpload.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new LoginSampleUpload().setVisible(true);
            }
        });
    }

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel loginLabel;
    private javax.swing.JPasswordField password;
    private javax.swing.JLabel passwordLabel;
    private java.awt.Button submit;
    private java.awt.Button uploadSampleTab;
    private javax.swing.JTextField username;
    // End of variables declaration//GEN-END:variables

    private void setVisibleControl(boolean isTrue) {
        
    }

    @Override
    public void clearInputs() {
        isSampleUploadVisible = false;
        pros = null;
        username1 = null;
        password1 = null;
        username.setText("");
        password.setText("");
        loginLabel.setText("Login:");
        passwordLabel.setVisible(true);
        username.setVisible(true);
        password.setVisible(true);
        //button1.setVisible(true);
        submit.setLabel("Submit");
        uploadSampleTab.setVisible(false);
        userDisplayName = "";
    }

    @Override
    public boolean save() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void hideControls(boolean isTrue) {
        
    }

    private void submitActionPerformed() {
        
        Connection conn = null;
        boolean destroyIt = false;
        try {
            if (!submit.getLabel().equalsIgnoreCase("submit")) {
                clearInputs();
                username.requestFocusInWindow();
                return;
            }
            username1 = username.getText();
            password1 = password.getPassword();
            if (username1.length() == 0) {
                JOptionPane.showMessageDialog(null, "Please Enter Login ID");
                username.requestFocusInWindow();
            } else if (password1.toString().length() == 0) {
                JOptionPane.showMessageDialog(null, "Please Enter Password !!!");
                password.requestFocusInWindow();
            } else {

                conn = DBConnectionPool.getConnectionFromPoolNonWeb();
                Pair<Integer, String> userPair = LoginDao.Login(conn, username1, password1);
                int userId = userPair.first;
                String macAdd = getMachineMac();
                Triple<Boolean, String, String> tripleVal= SingleSession.checkAndUpdateSingleSignonResult(conn, userId, 1,null , macAdd, Integer.toString(TokenManager.systemId), null);
                
                
                userDisplayName = Utils.isNull(userPair.second) ? username1 : userPair.second;
                if (!Misc.isUndef(userId) && tripleVal.first) {
                    RFIDConstant.setReaderConfiguration();
                    TokenManager.userId = userId;
                    TokenManager.userName = userDisplayName;
                    loginLabel.setText("You are logged in as " + userDisplayName);// login label
                    //jLabel9.setVisible(false);
                    password.setVisible(false); // password label
                    username.setVisible(false);
                    passwordLabel.setVisible(false);
                    submit.setLabel("Sign Out");
//                    serverProxy.setVisible(false);
//                    loadSetting.setVisible(false);

                    initScreenList(conn, userId);
                    GateInDao.initManualEntry(conn,TokenManager.forceManual);
//                    GateInDao.initQCRandom(conn);
                }
                else {
                	if(tripleVal.second == null || tripleVal.second.length() == 0)
                		JOptionPane.showMessageDialog(null, " Incorrect Password !!!");
                	else
                		JOptionPane.showMessageDialog(null, tripleVal.second);                		
                    password.requestFocusInWindow();
                }

            }
        } catch (Exception e) {
            e.printStackTrace();
            destroyIt = true;
        } finally {
            try {
                DBConnectionPool.returnConnectionToPoolNonWeb(conn, destroyIt);
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }
    
    }

    private String getMachineMac() {
    
		// TODO Auto-generated method stub
    	StringBuilder sb = null;
    	 InetAddress ip;
         try {
             ip = InetAddress.getLocalHost();
             System.out.println("Current IP address : " + ip.getHostAddress());

             NetworkInterface network = NetworkInterface.getByInetAddress(ip);

             byte[] mac = network.getHardwareAddress();

             System.out.print("Current MAC address : ");

             sb = new StringBuilder();
             for (int i = 0; i < mac.length; i++) {
                 sb.append(String.format("%02X%s", mac[i], (i < mac.length - 1) ? "-" : ""));        
             }
             System.out.println(sb.toString());

         } catch (UnknownHostException e) {

             e.printStackTrace();

         } catch (SocketException e){

             e.printStackTrace();

         }
		return sb.toString();
    }

    private void initScreenList(Connection conn, int userId) {
        
        if (conn == null || Misc.isUndef(userId)) {
            return;
        }
        try {
            if (AccessMaster.isSuperUser(conn, userId)) {
                isSampleUploadVisible = true;
            } else {
                ArrayList<Integer> privList = AccessMaster.getPrivList(conn, userId);
                for (int i = 0, is = privList == null ? 0 : privList.size(); i < is; i++) {
                    if (privList.get(i) == 80055) {
                        isSampleUploadVisible = true;
                    }
                }
            }
            showScreenTab();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    
    }

    private void showScreenTab() {
        uploadSampleTab.setVisible(isSampleUploadVisible);
    }

    @Override
    public void enableControls(boolean isTrue) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void getFocus() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    
}
