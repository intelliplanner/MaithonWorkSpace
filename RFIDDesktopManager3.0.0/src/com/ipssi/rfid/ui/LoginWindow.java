/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.ipssi.rfid.ui;

import java.awt.event.KeyEvent;
import java.io.FileNotFoundException;
import java.net.InetAddress;
import java.net.NetworkInterface;
import java.net.SocketException;
import java.net.UnknownHostException;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.Properties;

import javax.swing.ButtonGroup;
import javax.swing.JOptionPane;

import com.ipssi.SingleSession;
import com.ipssi.gen.utils.DBConnectionPool;
import com.ipssi.gen.utils.Misc;
import com.ipssi.gen.utils.Pair;
import com.ipssi.gen.utils.Triple;
import com.ipssi.logger.RFLogger;
import com.ipssi.rfid.InternetProxySetting.SetHttpSetting;
import com.ipssi.rfid.connection.ConfigUtility;
import com.ipssi.rfid.constant.RFIDConstant;
import com.ipssi.rfid.constant.UIConstant;
import com.ipssi.rfid.constant.Type.WorkStationType;
import com.ipssi.rfid.database.GateInDao;
import com.ipssi.rfid.database.LoginDao;
import com.ipssi.rfid.processor.AccessMaster;
import com.ipssi.rfid.processor.TokenManager;
import com.ipssi.rfid.processor.Utils;

/**
 *
 * @author Vi$ky
 */
public class LoginWindow  extends javax.swing.JFrame {

    private static ConfigUtility cfg = null;
    private static int selectScreen = Misc.getUndefInt();
    private static boolean isGateInVisible = false;
    private static boolean isGateOutVisible = false;
    private static boolean isWbInVisible = false;
    private static boolean isWbOutVisible = false;
    private static boolean isYardInVisible = false;
    private static boolean isYardOutVisible = false;
    private static boolean isRegistrationVisible = false;
    private static boolean isFlyAshInVisible = false;
    private static boolean isFlyAshGrossVisible = false;
    private static boolean isFlyAshTareVisible = false;
    private static boolean isStoneWtGrossVisible = false;
    private static boolean isStoneWtTareVisible = false;
    private static boolean isWeighmentFirstVisible = false;
    private static boolean isWeighmentSecondVisible = false;
    public static boolean isTimeSync = false;
    
    private static Properties pros = null;
    
    private String username1 = null;
    private String userDisplayName = null;
    private char[] password1 = null;
    /**
     * Creates new form LoginForm
     */
    ButtonGroup bg = new ButtonGroup();
    int selectedScreen = 1;

    /**
     * Creates new form Login1
     */
    public LoginWindow() {
        initComponents();
        this.setExtendedState(this.getExtendedState()
                | this.MAXIMIZED_BOTH);
        this.setTitle(UIConstant.formTitle);
         clearInput();
        //getScreenList(selectedScreen);
        // showScreenTab();
         TokenManager.initSystemConfig();
         if(!TokenManager.isDebug){
        	RFLogger.init();
         	RFLogger.RouteStdOutErrToFile();
         }
         if(TokenManager.syncClock){
        	 new SyncClockService().start();
         }
         
        setTab.setVisible(false);
        getFocus();
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        jPanel5 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        coalGateIn = new java.awt.Button();
        coalGateOut = new java.awt.Button();
        weighBridgeIn = new java.awt.Button();
        weighBridgeOut = new java.awt.Button();
        vehicleMaster = new java.awt.Button();
        yardIn = new java.awt.Button();
        yardOut = new java.awt.Button();
        flyAshIn = new java.awt.Button();
        flyAshInGross = new java.awt.Button();
        flyAshInTare = new java.awt.Button();
        stoneWtGross = new java.awt.Button();
        stoneWtTare = new java.awt.Button();
        weighmentGross = new java.awt.Button();
        weighmentTare = new java.awt.Button();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        username = new javax.swing.JTextField();
        password = new javax.swing.JPasswordField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        serverProxy = new javax.swing.JCheckBox();
        panel1 = new java.awt.Panel();
        button1 = new java.awt.Button();
        loadSetting = new java.awt.Button();
        setTab = new java.awt.Button();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));
        jPanel5.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel6.setBackground(new java.awt.Color(0, 0, 0));
        jPanel6.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));

        coalGateIn.setFont(UIConstant.textFont);
        coalGateIn.setVisible(false);
        coalGateIn.setBackground(new java.awt.Color(0, 0, 0));
        coalGateIn.setFocusable(false);
        coalGateIn.setForeground(new java.awt.Color(255, 255, 255));
        coalGateIn.setLabel("Coal Gate In");
        coalGateIn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                coalGateInActionPerformed(evt);
            }
        });

        coalGateOut.setFont(UIConstant.textFont);
        coalGateOut.setBackground(new java.awt.Color(0, 0, 0));
        coalGateOut.setVisible(false);
        coalGateOut.setFocusable(false);
        coalGateOut.setForeground(new java.awt.Color(255, 255, 255));
        coalGateOut.setLabel("Gate Out");
        coalGateOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                coalGateOutActionPerformed(evt);
            }
        });

        weighBridgeIn.setFont(UIConstant.textFont);
        weighBridgeIn.setBackground(new java.awt.Color(0, 0, 0));
        weighBridgeIn.setVisible(false);
        weighBridgeIn.setFocusable(false);
        weighBridgeIn.setForeground(new java.awt.Color(255, 255, 255));
        weighBridgeIn.setLabel("Coal WB Gross");//Weigh Bridge In
        weighBridgeIn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                weighBridgeInActionPerformed(evt);
            }
        });

        weighBridgeOut.setFont(UIConstant.textFont);
        weighBridgeOut.setBackground(new java.awt.Color(0, 0, 0));
        weighBridgeOut.setVisible(false);
        weighBridgeOut.setFocusable(false);
        weighBridgeOut.setForeground(new java.awt.Color(255, 255, 255));
        weighBridgeOut.setLabel("Coal WB Tare");//Weigh Bridge Out
        weighBridgeOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                weighBridgeOutActionPerformed(evt);
            }
        });

        vehicleMaster.setFont(UIConstant.textFont);
        vehicleMaster.setBackground(new java.awt.Color(0, 0, 0));
        vehicleMaster.setVisible(false);
        vehicleMaster.setFocusable(false);
        vehicleMaster.setForeground(new java.awt.Color(255, 255, 255));
        vehicleMaster.setLabel("Registration");
        vehicleMaster.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vehicleMasterActionPerformed(evt);
            }
        });

        yardIn.setFont(UIConstant.textFont);
        yardIn.setBackground(new java.awt.Color(0, 0, 0));
        yardIn.setVisible(false);
        yardIn.setFocusable(false);
        yardIn.setForeground(new java.awt.Color(255, 255, 255));
        yardIn.setLabel("Coal Yard In");
        yardIn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                yardInActionPerformed(evt);
            }
        });

        yardOut.setFont(UIConstant.textFont);
        yardOut.setBackground(new java.awt.Color(0, 0, 0));
        yardOut.setVisible(false);
        yardOut.setFocusable(false);
        yardOut.setForeground(new java.awt.Color(255, 255, 255));
        yardOut.setLabel("Coal Yard Out");
        yardOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                yardOutActionPerformed(evt);
            }
        });

        flyAshIn.setFont(UIConstant.textFont);
        flyAshIn.setBackground(new java.awt.Color(0, 0, 0));
        flyAshIn.setVisible(false);
        flyAshIn.setFocusable(false);
        flyAshIn.setForeground(new java.awt.Color(255, 255, 255));
        flyAshIn.setLabel("Ash Gate In");
        flyAshIn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                flyAshInActionPerformed(evt);
            }
        });

        flyAshInGross.setFont(UIConstant.textFont);
        flyAshInGross.setBackground(new java.awt.Color(0, 0, 0));
        flyAshInGross.setVisible(false);
        flyAshInGross.setFocusable(false);
        flyAshInGross.setForeground(new java.awt.Color(255, 255, 255));
        flyAshInGross.setLabel("Ash WB Gross");
        flyAshInGross.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                flyAshInGrossActionPerformed(evt);
            }
        });

        flyAshInTare.setFont(UIConstant.textFont);
        flyAshInTare.setVisible(false);
        flyAshInTare.setFocusable(false);
        flyAshInTare.setBackground(new java.awt.Color(0, 0, 0));
        flyAshInTare.setForeground(new java.awt.Color(255, 255, 255));
        flyAshInTare.setLabel("Ash WB Tare");
        flyAshInTare.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                flyAshInTareActionPerformed(evt);
            }
        });

        stoneWtGross.setFont(UIConstant.textFont);
        stoneWtGross.setVisible(false);
        stoneWtGross.setBackground(new java.awt.Color(0, 0, 0));
        stoneWtGross.setFocusable(false);
        stoneWtGross.setForeground(new java.awt.Color(255, 255, 255));
        stoneWtGross.setLabel("Stone WB Gross");
        stoneWtGross.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stoneWtGrossActionPerformed(evt);
            }
        });

        stoneWtTare.setFont(UIConstant.textFont);
        stoneWtTare.setVisible(false);
        stoneWtTare.setBackground(new java.awt.Color(0, 0, 0));
        stoneWtTare.setFocusable(false);
        stoneWtTare.setForeground(new java.awt.Color(255, 255, 255));
        stoneWtTare.setLabel("Stone WB Tare");
        stoneWtTare.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stoneWtTareActionPerformed(evt);
            }
        });

        weighmentGross.setFont(UIConstant.textFont);
        weighmentGross.setVisible(false);
        weighmentGross.setBackground(new java.awt.Color(0, 0, 0));
        weighmentGross.setFocusable(false);
        weighmentGross.setForeground(new java.awt.Color(255, 255, 255));
        weighmentGross.setLabel("Other WB Gross");
        weighmentGross.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                weighmentGrossActionPerformed(evt);
            }
        });

        weighmentTare.setFont(UIConstant.textFont);
        weighmentTare.setVisible(false);
        weighmentTare.setBackground(new java.awt.Color(0, 0, 0));
        weighmentTare.setFocusable(false);
        weighmentTare.setForeground(new java.awt.Color(255, 255, 255));
        weighmentTare.setLabel("Other WB Tare");
        weighmentTare.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                weighmentTareActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addComponent(coalGateIn, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(weighBridgeIn, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(yardIn, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(yardOut, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(weighBridgeOut, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(coalGateOut, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(vehicleMaster, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(flyAshIn, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(flyAshInGross, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(flyAshInTare, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(stoneWtGross, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(stoneWtTare, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(weighmentGross, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(weighmentTare, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(yardIn, javax.swing.GroupLayout.DEFAULT_SIZE, 55, Short.MAX_VALUE)
            .addComponent(coalGateIn, javax.swing.GroupLayout.DEFAULT_SIZE, 55, Short.MAX_VALUE)
            .addComponent(coalGateOut, javax.swing.GroupLayout.DEFAULT_SIZE, 55, Short.MAX_VALUE)
            .addComponent(vehicleMaster, javax.swing.GroupLayout.DEFAULT_SIZE, 55, Short.MAX_VALUE)
            .addComponent(weighBridgeOut, javax.swing.GroupLayout.DEFAULT_SIZE, 55, Short.MAX_VALUE)
            .addComponent(weighBridgeIn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 55, Short.MAX_VALUE)
            .addComponent(yardOut, javax.swing.GroupLayout.DEFAULT_SIZE, 55, Short.MAX_VALUE)
            .addComponent(flyAshIn, javax.swing.GroupLayout.DEFAULT_SIZE, 55, Short.MAX_VALUE)
            .addComponent(flyAshInGross, javax.swing.GroupLayout.DEFAULT_SIZE, 55, Short.MAX_VALUE)
            .addComponent(flyAshInTare, javax.swing.GroupLayout.DEFAULT_SIZE, 55, Short.MAX_VALUE)
            .addComponent(stoneWtGross, javax.swing.GroupLayout.DEFAULT_SIZE, 55, Short.MAX_VALUE)
            .addComponent(stoneWtTare, javax.swing.GroupLayout.DEFAULT_SIZE, 55, Short.MAX_VALUE)
            .addComponent(weighmentGross, javax.swing.GroupLayout.DEFAULT_SIZE, 55, Short.MAX_VALUE)
            .addComponent(weighmentTare, javax.swing.GroupLayout.DEFAULT_SIZE, 55, Short.MAX_VALUE)
        );

        stoneWtGross.getAccessibleContext().setAccessibleDescription("");

        jPanel5.add(jPanel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1820, -1));

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 1005, Short.MAX_VALUE)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jLabel4.setFont(UIConstant.labelFont);
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel9.setText("Login:");

        jLabel5.setFont(UIConstant.labelFont);
        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel10.setText("Password:");

        username.setBackground(new java.awt.Color(255, 204, 204));
        username.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        username.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        username.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                usernameKeyPressed(evt);
            }
        });

        password.setBackground(new java.awt.Color(255, 204, 204));
        password.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        password.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        password.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                passwordActionPerformed(evt);
            }
        });
        password.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                passwordKeyPressed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 17));
        jLabel7.setForeground(new java.awt.Color(255, 0, 0));
        jLabel7.setText("<html><center>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Welcome to MIPS Tool</center></html>");

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 17));
        jLabel8.setForeground(new java.awt.Color(255, 0, 0));
        jLabel8.setText("<html><center>IntelliPlanner Movement Information & Planning System</center></html>");

        serverProxy.setText("Use Server Proxy");
        serverProxy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                serverProxyActionPerformed(evt);
            }
        });

        button1.setBackground(new java.awt.Color(0, 0, 0));
        button1.setForeground(new java.awt.Color(255, 255, 255));
        button1.setLabel("Submit");
        button1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button1ActionPerformed(evt);
            }
        });
        button1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                button1KeyPressed(evt);
            }
        });

        javax.swing.GroupLayout panel1Layout = new javax.swing.GroupLayout(panel1);
        panel1.setLayout(panel1Layout);
        panel1Layout.setHorizontalGroup(
            panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel1Layout.createSequentialGroup()
                .addContainerGap(64, Short.MAX_VALUE)
                .addComponent(button1, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31))
        );
        panel1Layout.setVerticalGroup(
            panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(button1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(16, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 379, Short.MAX_VALUE))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(465, 465, 465)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(77, 77, 77))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, 172, Short.MAX_VALUE)
                                    .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(username, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(password, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(114, 114, 114)
                        .addComponent(panel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(393, 393, 393)
                        .addComponent(serverProxy, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(117, 117, 117)
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(username, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(password, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(panel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(serverProxy, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 280, Short.MAX_VALUE))
        );

        jPanel5.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 117, 1828, -1));

        loadSetting.setFocusable(false);
        loadSetting.setLabel("Load Setting ");
        loadSetting.setFont(UIConstant.buttonFont);
        loadSetting.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadSettingActionPerformed(evt);
            }
        });
        jPanel5.add(loadSetting, new org.netbeans.lib.awtextra.AbsoluteConstraints(1190, 70, 152, 40));

        setTab.setLabel("Set Menu");
        setTab.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setTabActionPerformed(evt);
            }
        });
        jPanel5.add(setTab, new org.netbeans.lib.awtextra.AbsoluteConstraints(1010, 70, 168, 40));

        jScrollPane3.setViewportView(jPanel5);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 1847, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 572, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>                        

    private void coalGateInActionPerformed(java.awt.event.ActionEvent evt) {                                           
     try{
    		TokenManager.initConfig("GATE_IN_TYPE",WorkStationType.GATE_IN_TYPE);
    		TokenManager.materialCat = com.ipssi.rfid.constant.Type.TPRMATERIAL.COAL;//coal
    		TokenManager.currWorkStationType = com.ipssi.rfid.constant.Type.WorkStationType.GATE_IN_TYPE;//coal
    		System.out.println("COAL-TokenManager.currWorkStationType: "+TokenManager.currWorkStationType);
    		CoalGateInWindow gt = new CoalGateInWindow();
    		CoalGateInWindow.username.setText("<html><body><span style='color:red;  font-size:12pt;'>Hello, &nbsp;"+userDisplayName+"</span></html></body>");
    		this.setVisible(false);
    		gt.setVisible(true);
    	}catch(Exception ex){
    		ex.printStackTrace();
    	}
        //selectScreen = WorkStationType.GATE_IN_TYPE;
    }                                          

    private void coalGateOutActionPerformed(java.awt.event.ActionEvent evt) {                                            
      	try{
    		TokenManager.initConfig("GATE_OUT_TYPE",WorkStationType.GATE_OUT_TYPE);
    		TokenManager.materialCat = com.ipssi.rfid.constant.Type.TPRMATERIAL.COAL;//coal
    		TokenManager.currWorkStationType = com.ipssi.rfid.constant.Type.WorkStationType.GATE_OUT_TYPE;//coal
    		System.out.println("COAL-TokenManager.currWorkStationType: "+TokenManager.currWorkStationType);
    		CoalGateOutWindow gt = new CoalGateOutWindow();
    		CoalGateOutWindow.username.setText("<html><body><span style='color:red;  font-size:12pt;'>Hello, &nbsp;"+userDisplayName+"</span></html></body>");
    		this.setVisible(false);
    		gt.setVisible(true);
    	}catch(Exception ex){
    		ex.printStackTrace();
    	}
        //selectScreen = WorkStationType.GATE_OUT_TYPE;
    }                                           

    private void weighBridgeInActionPerformed(java.awt.event.ActionEvent evt) {                                              
        try{
    		TokenManager.initConfig("WEIGH_BRIDGE_IN_TYPE",WorkStationType.WEIGH_BRIDGE_IN_TYPE);
    		TokenManager.materialCat = com.ipssi.rfid.constant.Type.TPRMATERIAL.COAL;//coal
    		TokenManager.currWorkStationType = com.ipssi.rfid.constant.Type.WorkStationType.WEIGH_BRIDGE_IN_TYPE;//coal
    		System.out.println("COAL-TokenManager.currWorkStationType: "+TokenManager.currWorkStationType);
    		CoalWeighBridgeInWindow gt = new CoalWeighBridgeInWindow();
    		CoalWeighBridgeInWindow.username.setText("<html><body><span style='color:red;  font-size:12pt;'>Hello, &nbsp;"+userDisplayName+"</span></html></body>");
    		this.setVisible(false);
    		gt.setVisible(true);
    	}catch(Exception ex){
    		ex.printStackTrace();
    	}
        //selectScreen = WorkStationType.WEIGH_BRIDGE_IN_TYPE;
    }                                             

    private void weighBridgeOutActionPerformed(java.awt.event.ActionEvent evt) {                                               
     try{
    		TokenManager.initConfig("WEIGH_BRIDGE_OUT_TYPE",WorkStationType.WEIGH_BRIDGE_OUT_TYPE);
    		TokenManager.materialCat = com.ipssi.rfid.constant.Type.TPRMATERIAL.COAL;//coal
    		TokenManager.currWorkStationType = com.ipssi.rfid.constant.Type.WorkStationType.WEIGH_BRIDGE_OUT_TYPE;//coal
    		System.out.println("COAL-TokenManager.currWorkStationType: "+TokenManager.currWorkStationType);
    		CoalWeighBridgeOutWindow gt = new CoalWeighBridgeOutWindow();
    		CoalWeighBridgeOutWindow.username.setText("<html><body><span style='color:red;  font-size:12pt;'>Hello, &nbsp;"+userDisplayName+"</span></html></body>");
    		this.setVisible(false);
    		gt.setVisible(true);
    	}catch(Exception ex){
    		ex.printStackTrace();
    	}
        //selectScreen =  WorkStationType.WEIGH_BRIDGE_OUT_TYPE;
    }                                              

    private void vehicleMasterActionPerformed(java.awt.event.ActionEvent evt) {                                              
    	try{
    		TokenManager.initConfig("REGISTRATION",WorkStationType.REGISTRATION);
    		TokenManager.materialCat = com.ipssi.rfid.constant.Type.TPRMATERIAL.COAL;//coal
    		TokenManager.currWorkStationType = com.ipssi.rfid.constant.Type.WorkStationType.REGISTRATION;//coal
    		System.out.println("Registration -TokenManager.currWorkStationType: "+TokenManager.currWorkStationType);
    		VehicleRegistrationWindow gt = new VehicleRegistrationWindow();
    		VehicleRegistrationWindow.username.setText("<html><body><span style='color:red;  font-size:12pt;'>Hello, &nbsp;"+userDisplayName+"</span></html></body>");
    		this.setVisible(false);
    		gt.setVisible(true);
    	}catch(Exception ex){
    		ex.printStackTrace();
    	}
        //selectScreen = WorkStationType.REGISTRATION;
    }                                             

    private void yardInActionPerformed(java.awt.event.ActionEvent evt) {                                       
        try{
    		TokenManager.initConfig("YARD_IN_TYPE",WorkStationType.YARD_IN_TYPE);
    		TokenManager.materialCat = com.ipssi.rfid.constant.Type.TPRMATERIAL.COAL;//coal
    		TokenManager.currWorkStationType = com.ipssi.rfid.constant.Type.WorkStationType.YARD_IN_TYPE;//coal
    		System.out.println("COAL-TokenManager.currWorkStationType: "+TokenManager.currWorkStationType);
    		CoalYardInWindow gt = new CoalYardInWindow();
    		CoalYardInWindow.username.setText("<html><body><span style='color:red;  font-size:12pt;'>Hello, &nbsp;"+userDisplayName+"</span></html></body>");
    		this.setVisible(false);
    		gt.setVisible(true);
    	}catch(Exception ex){
    		ex.printStackTrace();
    	}
        //selectScreen = WorkStationType.YARD_IN_TYPE;
    }                                      

    private void yardOutActionPerformed(java.awt.event.ActionEvent evt) {                                        
     	try{
    		TokenManager.initConfig("YARD_OUT_TYPE",WorkStationType.YARD_OUT_TYPE);
    		TokenManager.materialCat = com.ipssi.rfid.constant.Type.TPRMATERIAL.COAL;//coal
    		TokenManager.currWorkStationType = com.ipssi.rfid.constant.Type.WorkStationType.YARD_OUT_TYPE;//coal
    		System.out.println("COAL-TokenManager.currWorkStationType: "+TokenManager.currWorkStationType);
    		CoalYardOutWindow gt = new CoalYardOutWindow();
    		CoalYardOutWindow.username.setText("<html><body><span style='color:red;  font-size:12pt;'>Hello, &nbsp;"+userDisplayName+"</span></html></body>");
    		this.setVisible(false);
    		gt.setVisible(true);
    	}catch(Exception ex){
    		ex.printStackTrace();
    	}
        //selectScreen =  WorkStationType.YARD_OUT_TYPE;
    }                                       

    private void flyAshInActionPerformed(java.awt.event.ActionEvent evt) {                                         
        try {
            TokenManager.initConfig("FLY_ASH_IN_TYPE", WorkStationType.FLY_ASH_IN_TYPE);
            TokenManager.materialCat = com.ipssi.rfid.constant.Type.TPRMATERIAL.FLYASH;
            TokenManager.currWorkStationType = com.ipssi.rfid.constant.Type.WorkStationType.FLY_ASH_IN_TYPE;//coal
    		System.out.println("FLYASH-TokenManager.currWorkStationType: "+TokenManager.currWorkStationType);
            GateInFlyAshWindow gt = new GateInFlyAshWindow();
            GateInFlyAshWindow.username.setText("<html>Hello&nbsp;&nbsp;&nbsp;<font color=red size=5 >" + userDisplayName + "</font></html>");
            this.setVisible(false);
            gt.setVisible(true);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }                                        

    private void flyAshInGrossActionPerformed(java.awt.event.ActionEvent evt) {                                              
        try {
            TokenManager.initConfig("FLY_ASH_GROSS_WT_TYPE", WorkStationType.FLY_ASH_GROSS_WT_TYPE);
            TokenManager.materialCat = com.ipssi.rfid.constant.Type.TPRMATERIAL.FLYASH;
            TokenManager.currWorkStationType = com.ipssi.rfid.constant.Type.WorkStationType.FLY_ASH_GROSS_WT_TYPE;//coal
    		System.out.println("FLYASH-TokenManager.currWorkStationType: "+TokenManager.currWorkStationType);
            FlyashWeighmentGross gt = new FlyashWeighmentGross();
            FlyashWeighmentGross.username.setText("<html>Hello&nbsp;&nbsp;&nbsp;<font color=red size=5 >" + userDisplayName + "</font></html>");
            this.setVisible(false);
            gt.setVisible(true);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }                                             

    private void flyAshInTareActionPerformed(java.awt.event.ActionEvent evt) {                                             
        try {
            TokenManager.initConfig("FLY_ASH_TARE_WT_TYPE", WorkStationType.FLY_ASH_TARE_WT_TYPE);
            TokenManager.materialCat = com.ipssi.rfid.constant.Type.TPRMATERIAL.FLYASH;
            TokenManager.currWorkStationType = com.ipssi.rfid.constant.Type.WorkStationType.FLY_ASH_TARE_WT_TYPE;//coal
    		System.out.println("FLYASH-TokenManager.currWorkStationType: "+TokenManager.currWorkStationType);
            FlyashWeighmentTare gt = new FlyashWeighmentTare();
            FlyashWeighmentTare.username.setText("<html>Hello&nbsp;&nbsp;&nbsp;<font color=red size=5 >" + userDisplayName + "</font></html>");
            this.setVisible(false);
            gt.setVisible(true);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }                                            

    private void stoneWtGrossActionPerformed(java.awt.event.ActionEvent evt) {                                             
        try {
            TokenManager.initConfig("STONE_GROSS_WT_TYPE", WorkStationType.STONE_GROSS_WT_TYPE);
            TokenManager.materialCat = com.ipssi.rfid.constant.Type.TPRMATERIAL.STONE;
            TokenManager.currWorkStationType = com.ipssi.rfid.constant.Type.WorkStationType.STONE_GROSS_WT_TYPE;//coal
    		System.out.println("STONE-TokenManager.currWorkStationType: "+TokenManager.currWorkStationType);
            StoneWeighmentGross gt = new StoneWeighmentGross();
            StoneWeighmentGross.username.setText("<html>Hello&nbsp;&nbsp;&nbsp;<font color=red size=5 >" + userDisplayName + "</font></html>");
            this.setVisible(false);
            gt.setVisible(true);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }                                            

    private void stoneWtTareActionPerformed(java.awt.event.ActionEvent evt) {                                            
        try {
            TokenManager.initConfig("STONE_TARE_WT_TYPE", WorkStationType.STONE_TARE_WT_TYPE);
            TokenManager.materialCat = com.ipssi.rfid.constant.Type.TPRMATERIAL.STONE;
            TokenManager.currWorkStationType = com.ipssi.rfid.constant.Type.WorkStationType.STONE_TARE_WT_TYPE;//coal
    		System.out.println("STONE-TokenManager.currWorkStationType: "+TokenManager.currWorkStationType);
            StoneWeighmentTare gt = new StoneWeighmentTare();
            StoneWeighmentTare.username.setText("<html>Hello&nbsp;&nbsp;&nbsp;<font color=red size=5 >" + userDisplayName + "</font></html>");
            this.setVisible(false);
            gt.setVisible(true);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }                                           

    private void weighmentGrossActionPerformed(java.awt.event.ActionEvent evt) {                                               
        try {
            TokenManager.initConfig("FIRST_WEIGHTMENT_TYPE", WorkStationType.FIRST_WEIGHTMENT_TYPE);
            TokenManager.materialCat = com.ipssi.rfid.constant.Type.TPRMATERIAL.OTHERS;
            TokenManager.currWorkStationType = com.ipssi.rfid.constant.Type.WorkStationType.FIRST_WEIGHTMENT_TYPE;
    		System.out.println("WEIGHMENT-TokenManager.currWorkStationType: "+TokenManager.currWorkStationType);
            Weighment1st gt = new Weighment1st();
            Weighment1st.username.setText("<html>Hello&nbsp;&nbsp;&nbsp;<font color=red size=5 >" + userDisplayName + "</font></html>");
            this.setVisible(false);
            gt.setVisible(true);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }                                              

    private void weighmentTareActionPerformed(java.awt.event.ActionEvent evt) {                                              
        try {
            TokenManager.initConfig("SECOND_WEIGHTMENT_TYPE", WorkStationType.SECOND_WEIGHTMENT_TYPE);
            TokenManager.materialCat = com.ipssi.rfid.constant.Type.TPRMATERIAL.OTHERS;
            TokenManager.currWorkStationType = com.ipssi.rfid.constant.Type.WorkStationType.SECOND_WEIGHTMENT_TYPE;
    		System.out.println("WEIGHMENT-TokenManager.currWorkStationType: "+TokenManager.currWorkStationType);
            Weighment2nd gt = new Weighment2nd();
            Weighment2nd.username.setText("<html>Hello&nbsp;&nbsp;&nbsp;<font color=red size=5 >" + userDisplayName + "</font></html>");
            this.setVisible(false);
            gt.setVisible(true);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }                                             

    private void usernameKeyPressed(java.awt.event.KeyEvent evt) {                                    
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            if (Utils.isNull(username.getText())) {
                JOptionPane.showMessageDialog(null, "Please Enter Login ID");
                username.requestFocusInWindow();
            } else {
                password.requestFocusInWindow();
            }
        }
    }                                   

    private void passwordActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
    }                                        

    private void passwordKeyPressed(java.awt.event.KeyEvent evt) {                                    
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            button1ActionPerformed();
        }
    }                                   

    private void serverProxyActionPerformed(java.awt.event.ActionEvent evt) {                                            
    }                                           

    private void button1ActionPerformed(java.awt.event.ActionEvent evt) {                                        
        button1ActionPerformed();
    }                                       

    private void button1KeyPressed(java.awt.event.KeyEvent evt) {                                   
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            button1ActionPerformed();
            getFocus();
        }
    }                                  

    private void loadSettingActionPerformed(java.awt.event.ActionEvent evt) {                                            
        try {
            new HttpSetting(new javax.swing.JFrame(), true).setVisible(true);
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        }
    }                                           

    private void setTabActionPerformed(java.awt.event.ActionEvent evt) {                                       
        new ScreenList(new javax.swing.JFrame(), true, pros).setVisible(true);
    }                                      

    private void button1ActionPerformed() {
        Connection conn = null;
        boolean destroyIt = false;
        try {
            if (!button1.getLabel().equalsIgnoreCase("submit")) {
                clearInput();
                return;
            }
            username1 = username.getText();
            password1 = password.getPassword();
            if (username1.length() == 0) {
                JOptionPane.showMessageDialog(null, "Please Enter Login ID");
                username.requestFocusInWindow();
            } else if (password1.toString().length() == 0) {
                JOptionPane.showMessageDialog(null, "Please Enter Password !!!");
                password.requestFocusInWindow();
            } else {
                if (serverProxy.isSelected()) {
                    SetHttpSetting httpSet = new SetHttpSetting();
                    httpSet.setServerProxy();
                }
                conn = DBConnectionPool.getConnectionFromPoolNonWeb();
                Pair<Integer, String> userPair = LoginDao.Login(conn, username1, password1);
                int userId = userPair.first;
                String macAdd = getMachineMac();
                System.out.println("Misc.g_doSingleSession: "+Misc.g_doSingleSession);
                Triple<Boolean, String, String> tripleVal= SingleSession.checkAndUpdateSingleSignonResult(conn, userId, 1,null , macAdd, Integer.toString(TokenManager.systemId), null);
                
                System.out.println("tripleVal:"+ tripleVal==null ? null : "Not Null");
                userDisplayName = Utils.isNull(userPair.second) ? username1 : userPair.second;
                System.out.println("user Id :"+userId+" , "+tripleVal.first );
                if (!Misc.isUndef(userId) && tripleVal.first) {
                	System.out.println("setReaderConfiguration before, user Id :"+userId+" , "+tripleVal.first );
                    RFIDConstant.setReaderConfiguration();
                    System.out.println("setReaderConfiguration after, user Id :"+userId+" , "+tripleVal.first );
                    TokenManager.userId = userId;
                    System.out.println("setReaderConfiguration after, user Id :"+userId+", " +TokenManager.userId );
                    TokenManager.userName = userDisplayName;
                    System.out.println("setReaderConfiguration after, userDisplayName:"+ userDisplayName +", "+TokenManager.userName);
                    
                    jLabel9.setText("You are logged in as " + userDisplayName);
                    System.out.println("1");
                    //jLabel9.setVisible(false);
                    jLabel10.setVisible(false);
                    System.out.println("2");
                    username.setVisible(false);
                    System.out.println("3");
                    password.setVisible(false);
                    System.out.println("4");
                    button1.setLabel("Sign Out");
                    System.out.println("5");
                    serverProxy.setVisible(false);
                    loadSetting.setVisible(false);
                    System.out.println("6");
                    initScreenList(conn, userId);
                    System.out.println("7");
                    GateInDao.initManualEntry(conn,TokenManager.forceManual);
                    System.out.println("8");
                    GateInDao.initQCRandom(conn);
                    System.out.println("9");
                }
                else {
                	 System.out.println("else part");
                	if(tripleVal.second == null || tripleVal.second.length() == 0)
                		JOptionPane.showMessageDialog(null, " Incorrect Password !!!");
                	else
                		JOptionPane.showMessageDialog(null, tripleVal.second);                		
                    password.requestFocusInWindow();
                }

            }
        } catch (Exception e) {
            e.printStackTrace();
            destroyIt = true;
        } finally {
            try {
                DBConnectionPool.returnConnectionToPoolNonWeb(conn, destroyIt);
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }
    }

    
    private String getMachineMac() {
		// TODO Auto-generated method stub
    	StringBuilder sb = null;
    	 InetAddress ip;
         try {

             ip = InetAddress.getLocalHost();
             System.out.println("Current IP address : " + ip.getHostAddress());

             NetworkInterface network = NetworkInterface.getByInetAddress(ip);

             byte[] mac = network.getHardwareAddress();

             System.out.print("Current MAC address : ");

             sb = new StringBuilder();
             for (int i = 0; i < mac.length; i++) {
                 sb.append(String.format("%02X%s", mac[i], (i < mac.length - 1) ? "-" : ""));        
             }
             System.out.println(sb.toString());

         } catch (UnknownHostException e) {

             e.printStackTrace();

         } catch (SocketException e){

             e.printStackTrace();

         }

        

		return sb.toString();
	
}
	/**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
    	
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
               if("Windows".equals(info.getName())) {
            	// if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LoginWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LoginWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LoginWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LoginWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new LoginWindow().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify                     
    private java.awt.Button button1;
    private static java.awt.Button coalGateIn;
    private static java.awt.Button coalGateOut;
    private static java.awt.Button flyAshIn;
    private java.awt.Button flyAshInGross;
    private java.awt.Button flyAshInTare;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private java.awt.Button loadSetting;
    private java.awt.Panel panel1;
    private javax.swing.JPasswordField password;
    private javax.swing.JCheckBox serverProxy;
    private java.awt.Button setTab;
    private java.awt.Button stoneWtGross;
    private java.awt.Button stoneWtTare;
    private javax.swing.JTextField username;
    private static java.awt.Button vehicleMaster;
    private static java.awt.Button weighBridgeIn;
    private static java.awt.Button weighBridgeOut;
    private java.awt.Button weighmentGross;
    private java.awt.Button weighmentTare;
    private static java.awt.Button yardIn;
    private static java.awt.Button yardOut;
    // End of variables declaration                   

    private void clearInput() {
        isGateInVisible = false;
        isGateOutVisible = false;
        isWbInVisible = false;
        isWbOutVisible = false;
        isYardInVisible = false;
        isYardOutVisible = false;
        isRegistrationVisible = false;
        isFlyAshInVisible = false;
        isFlyAshGrossVisible = false;
        isFlyAshTareVisible = false;
        isStoneWtGrossVisible = false;
        isStoneWtTareVisible = false;
        isWeighmentFirstVisible = false;
        isWeighmentSecondVisible = false;
        pros = null;
        username1 = null;
        password1 = null;
        username.setText("");
        password.setText("");
        showScreenTab();
        jLabel9.setText("Login:");
        //jLabel9.setVisible(true);
        jLabel10.setVisible(true);
        username.setVisible(true);
        password.setVisible(true);
        //button1.setVisible(true);
        button1.setLabel("Submit");
        serverProxy.setVisible(true);
        loadSetting.setVisible(true);
        userDisplayName = "";
    }

   private void showScreenTab() {
        coalGateIn.setVisible(isGateInVisible);
        weighBridgeIn.setVisible(isWbInVisible);
        yardIn.setVisible(isYardInVisible);
        yardOut.setVisible(isYardOutVisible);
        weighBridgeOut.setVisible(isWbOutVisible);
        coalGateOut.setVisible(isGateOutVisible);
        vehicleMaster.setVisible(isRegistrationVisible);
        flyAshIn.setVisible(isFlyAshInVisible);
        flyAshInGross.setVisible(isFlyAshGrossVisible);
        flyAshInTare.setVisible(isFlyAshTareVisible);
        stoneWtGross.setVisible(isStoneWtGrossVisible);
        stoneWtTare.setVisible(isStoneWtTareVisible);
        weighmentGross.setVisible(isWeighmentFirstVisible);
        weighmentTare.setVisible(isWeighmentSecondVisible);
    }

     private void getFocus() {
        if (username.isVisible()) {
            username.requestFocusInWindow();
        } else {
            button1.requestFocusInWindow();
        }
    }

    private void initScreenList(Connection conn, int userId) {
        if (conn == null || Misc.isUndef(userId)) {
            return;
        }
        try {
            if (AccessMaster.isSuperUser(conn, userId)) {
                isGateInVisible = true;
                isRegistrationVisible = true;
                isWbInVisible = true;
                isYardInVisible = true;
                isYardOutVisible = true;
                isWbOutVisible = true;
                isGateOutVisible = true;
                isFlyAshInVisible = true;
                isFlyAshGrossVisible = true;
                isFlyAshTareVisible = true;
                isStoneWtGrossVisible = true;
                isStoneWtTareVisible = true;
                isWeighmentFirstVisible = true;
                isWeighmentSecondVisible = true;
            } else {
                ArrayList<Integer> privList = AccessMaster.getPrivList(conn, userId);
                for (int i = 0, is = privList == null ? 0 : privList.size(); i < is; i++) {
                    if (privList.get(i) == 50001) {
                        isGateInVisible = true;
                    } else if (privList.get(i) == 50002) {
                        isRegistrationVisible = true;
                    } else if (privList.get(i) == 50003) {
                        isWbInVisible = true;
                    } else if (privList.get(i) == 50004) {
                        isYardInVisible = true;
                    } else if (privList.get(i) == 50005) {
                        isYardOutVisible = true;
                    } else if (privList.get(i) == 50006) {
                        isWbOutVisible = true;
                    } else if (privList.get(i) == 50007) {
                        isGateOutVisible = true;
                    } else if (privList.get(i) == 50008) {
                        isFlyAshInVisible = true;
                    } else if (privList.get(i) == 50009) {
                        isFlyAshGrossVisible = true;
                    } else if (privList.get(i) == 50010) {
                        isFlyAshTareVisible = true;
                    } else if (privList.get(i) == 50011) {
                        isStoneWtGrossVisible = true;
                    } else if (privList.get(i) == 50012) {
                        isStoneWtTareVisible = true;
                    } else if (privList.get(i) == 50013) {
                        isWeighmentFirstVisible = true;
                    } else if (privList.get(i) == 50014) {
                        isWeighmentSecondVisible = true;
                    }

                }
            }
            showScreenTab();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

}
