/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.ipssi.rfid.ui;

import java.awt.Color;
import java.awt.event.KeyEvent;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.swing.ButtonGroup;
import javax.swing.JOptionPane;

import com.ipssi.fingerprint.utils.SynServiceHandler;
import com.ipssi.gen.utils.CacheTrack;
import com.ipssi.gen.utils.DBConnectionPool;
import com.ipssi.gen.utils.Misc;
import com.ipssi.gen.utils.Pair;
import com.ipssi.rfid.beans.RFIDHolder;
import com.ipssi.rfid.beans.TPRecord;
import com.ipssi.rfid.beans.TPSQuestionDetail;
import com.ipssi.rfid.beans.TPStep;
import com.ipssi.rfid.beans.Token;
import com.ipssi.rfid.beans.Vehicle;
import com.ipssi.rfid.beans.VehicleExtended;
import com.ipssi.rfid.constant.Results;
import com.ipssi.rfid.constant.UIConstant;
import com.ipssi.rfid.constant.Status.TPRQuestion;
import com.ipssi.rfid.database.DropDownValues;
import com.ipssi.rfid.database.GateInDao;
import com.ipssi.rfid.database.IssueTag;
import com.ipssi.rfid.db.RFIDMasterDao;
import com.ipssi.rfid.processor.SyncFingerPrint;
import com.ipssi.rfid.processor.TPRBlockManager;
import com.ipssi.rfid.processor.TPRInformation;
import com.ipssi.rfid.processor.TPRUtils;
import com.ipssi.rfid.processor.TokenManager;
import com.ipssi.rfid.processor.Utils;
import com.ipssi.rfid.readers.RFIDDataHandler;
import com.ipssi.rfid.readers.RFIDDataProcessor;
import com.ipssi.rfid.readers.RFIDException;
import com.ipssi.rfid.readers.TAGListener;
import com.ipssi.rfid.readers.UIHandler;
import com.ipssi.rfid.ui.AutoCompleteCombo.ComboKeyEvent;
import com.scl.loadlibrary.BioMatricBean;
import com.scl.loadlibrary.LoadLibrary;
import com.scl.loadlibrary.MorphoSmartFunctions;

public class VehicleRegistrationWindow extends javax.swing.JFrame implements UIHandler{
	
    int contiNue = 1;
    int reEnter = 0;

	ButtonGroup rfTag = new ButtonGroup();
    private RFIDDataHandler rfidHandler = null;
    private VehicleExtended vehicleExtentedBean = null;
    private Vehicle vehBean = null;
    private boolean isNewVehicle = false;
    private int isTagIssue = Misc.getUndefInt();
    private int m_vehicleId = Misc.getUndefInt();
    private boolean isEnterPressed = false;
    private TPRecord tpRecord = null;
    private int fitnessOk = Misc.getUndefInt();
    private int roadPermitOk = Misc.getUndefInt();
    private int insuranceOk = Misc.getUndefInt();
    private int polutionOk = Misc.getUndefInt();
    private int isVehicleExist = Misc.getUndefInt();
    private TPStep tpStep = null;
    private Date entryTime = null;
    private TPRBlockManager tprBlockManager = null;
    private SyncFingerPrint fingerPrintSyncService = null;
	private boolean isMorphoExist = false;
    public static boolean isFingerSyncRunning = false;
    
    public static boolean isChallanEntry = false;
    
    public VehicleRegistrationWindow() {
    	initComponents();
    	challanInfo.setVisible(false);// update 09/6/16 
    	this.setExtendedState(this.getExtendedState()| this.MAXIMIZED_BOTH);
    	this.setTitle(UIConstant.formTitle);
    	clearInputs();
    	setTransporterList();
    	getFocus();

    	try{
    		isMorphoExist   = TokenManager.morphoDeviceExist == 1 && (TokenManager.useSDK() ?  MorphoSmartFunctions.getMorpho().isConnected() : LoadLibrary.isMorphoConnected() );
    		if (isMorphoExist) {
        		syncFingerPrintDataFromServer();
        	}
    	}catch(Exception ex){
    		ex.printStackTrace();
    	}
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        vehicleName = new AutoCompleteCombo();
        rcTare = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        transporter = new javax.swing.JComboBox();
        rcGross = new javax.swing.JTextField();
        jLabel30 = new javax.swing.JLabel();
        overrides = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        ownerName = new javax.swing.JTextField();
        fatherName = new javax.swing.JTextField();
        mobile1 = new javax.swing.JTextField();
        fitness = new javax.swing.JTextField();
        roadPermit = new javax.swing.JTextField();
        insurance = new javax.swing.JTextField();
        polutionExpiry = new javax.swing.JTextField();
        taxPaidUpto = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        lblMuptipleTPR = new javax.swing.JLabel();
        rfTagInfo = new javax.swing.JLabel();
        vehicleInfor = new javax.swing.JLabel();
        driverInformation = new javax.swing.JLabel();
        challanRecord = new javax.swing.JLabel();
        documentInfo = new javax.swing.JLabel();
        multipleTprInfo = new javax.swing.JLabel();
        materialInfo = new javax.swing.JLabel();
        materialInfoLabel = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        Address = new javax.swing.JTextField();
        mobile2 = new javax.swing.JTextField();
        engineNo = new javax.swing.JTextField();
        jLabel26 = new javax.swing.JLabel();
        fitnessExpiryDate = new com.toedter.calendar.JDateChooser();
        roadPermitExpiryDate = new com.toedter.calendar.JDateChooser();
        insuranceExpiryDate = new com.toedter.calendar.JDateChooser();
        polutionExpiryDate = new com.toedter.calendar.JDateChooser();
        ownerEmail = new javax.swing.JTextField();
        jLabel27 = new javax.swing.JLabel();
        Issue = new javax.swing.JButton();
        jLabel29 = new javax.swing.JLabel();
        username = new javax.swing.JLabel();
        signout = new java.awt.Button();
        jPanel7 = new javax.swing.JPanel();
        challanInfo = new javax.swing.JButton();
        updateVehicleInfo = new javax.swing.JButton();
        DriverDetail = new javax.swing.JButton();
        clear = new javax.swing.JButton();
        finish = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/ipssi/rfid/ui/intelliplanner.png"))); // NOI18N

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));
        jPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setFont(UIConstant.labelFont);
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("Vehicle:");
        jPanel4.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 11, 144, 45));

        jLabel3.setFont(UIConstant.labelFont);
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText("Overrides?");
        jPanel4.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 62, 144, 30));

        jLabel4.setFont(UIConstant.labelFont);
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("Transporter:");
        jPanel4.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 98, 144, 30));

        jLabel5.setFont(UIConstant.labelFont);
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel5.setText("RC Gross:");
        jPanel4.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 170, 144, 30));

/*        vehicleName.setFont(UIConstant.textFont);
        vehicleName.setForeground(UIConstant.textFontColor);
        vehicleName.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        vehicleName.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                vehicleNameMouseClicked(evt);
            }
        });
        vehicleName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vehicleNameActionPerformed(evt);
            }
        });
        vehicleName.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                vehicleNameFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                vehicleNameFocusLost(evt);
            }
        });
        vehicleName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                vehicleNameKeyPressed(evt);
            }
        });*/
        vehicleName.setFont(UIConstant.textFont);
        vehicleName.setMaximumRowCount(10);
        vehicleName.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select" }));
        vehicleName.setTextBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 0));
        //vehicleName.setEnabled(false);
        vehicleName.setFocusable(true);
        vehicleName.setKeyEvent(new ComboKeyEvent() {
			
			@Override
			public void onKeyPress(KeyEvent evt) {
				if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
				vehicleNameAction();
				}
				
			}
		});
        vehicleName.setText("");
        jPanel4.add(vehicleName, new org.netbeans.lib.awtextra.AbsoluteConstraints(158, 11, 225, 45));

        rcTare.setFont(UIConstant.textFont);
        rcTare.setForeground(UIConstant.textFontColor);
        rcTare.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        rcTare.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                rcTareMouseClicked(evt);
            }
        });
        rcTare.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rcTareActionPerformed(evt);
            }
        });
        rcTare.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                rcTareFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                rcTareFocusLost(evt);
            }
        });
        rcTare.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                rcTareKeyPressed(evt);
            }
        });
        jPanel4.add(rcTare, new org.netbeans.lib.awtextra.AbsoluteConstraints(158, 134, 215, 30));

        jLabel6.setFont(UIConstant.labelFont);
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel6.setText("Issue RF?");
        jPanel4.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 206, 144, 30));

        transporter.setFont(UIConstant.textFont);
        transporter.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select" }));
        transporter.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                transporterFocusGained(evt);
            }
        });
        transporter.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                transporterKeyPressed(evt);
            }
        });
        jPanel4.add(transporter, new org.netbeans.lib.awtextra.AbsoluteConstraints(158, 98, 215, 30));

        rcGross.setFont(UIConstant.textFont);
        rcGross.setForeground(UIConstant.textFontColor);
        rcGross.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        rcGross.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                rcGrossMouseClicked(evt);
            }
        });
        rcGross.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rcGrossActionPerformed(evt);
            }
        });
        rcGross.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                rcGrossFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                rcGrossFocusLost(evt);
            }
        });
        rcGross.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                rcGrossKeyPressed(evt);
            }
        });
        jPanel4.add(rcGross, new org.netbeans.lib.awtextra.AbsoluteConstraints(158, 170, 215, 30));

        jLabel30.setFont(UIConstant.labelFont);
        jLabel30.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel30.setText("RC Tare:");
        jPanel4.add(jLabel30, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 134, 144, 30));

        overrides.setFont(UIConstant.textFont);
        overrides.setForeground(UIConstant.textFontColor);
        jPanel4.add(overrides, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 64, 210, 30));

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel7.setFont(UIConstant.labelFont);
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel7.setText("Owner Name:");
        jPanel3.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 2, 144, 30));

        jLabel8.setFont(UIConstant.labelFont);
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel8.setText("Father's Name:");
        jPanel3.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 38, 144, 30));

        jLabel9.setFont(UIConstant.labelFont);
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel9.setText("Mobile 1:");
        jPanel3.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 74, 144, 30));

        jLabel10.setFont(UIConstant.labelFont);
        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel10.setText("Fitness #:");
        jPanel3.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 110, 144, 30));

        jLabel11.setFont(UIConstant.labelFont);
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel11.setText("Road Permit #:");
        jPanel3.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 146, 144, 30));

        jLabel12.setFont(UIConstant.labelFont);
        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel12.setText("Insurance #:");
        jPanel3.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 182, 144, 30));

        jLabel13.setFont(UIConstant.labelFont);
        jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel13.setText("Polution Expiry:");
        jPanel3.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 218, 144, 30));

        jLabel14.setFont(UIConstant.labelFont);
        jLabel14.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel14.setText("Tax Paid Upto:");
        jPanel3.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 254, 144, 30));

        ownerName.setFont(UIConstant.textFont);
        ownerName.setForeground(UIConstant.textFontColor);
        ownerName.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        ownerName.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ownerNameMouseClicked(evt);
            }
        });
        ownerName.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                ownerNameFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                ownerNameFocusLost(evt);
            }
        });
        ownerName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                ownerNameKeyPressed(evt);
            }
        });
        jPanel3.add(ownerName, new org.netbeans.lib.awtextra.AbsoluteConstraints(158, 2, 215, 30));

        fatherName.setFont(UIConstant.textFont);
        fatherName.setForeground(UIConstant.textFontColor);
        fatherName.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        fatherName.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fatherNameMouseClicked(evt);
            }
        });
        fatherName.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                fatherNameFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                fatherNameFocusLost(evt);
            }
        });
        fatherName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fatherNameKeyPressed(evt);
            }
        });
        jPanel3.add(fatherName, new org.netbeans.lib.awtextra.AbsoluteConstraints(158, 38, 215, 30));

        mobile1.setFont(UIConstant.textFont);
        mobile1.setForeground(UIConstant.textFontColor);
        mobile1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        mobile1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                mobile1MouseClicked(evt);
            }
        });
        mobile1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                mobile1FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                mobile1FocusLost(evt);
            }
        });
        mobile1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                mobile1KeyPressed(evt);
            }
        });
        jPanel3.add(mobile1, new org.netbeans.lib.awtextra.AbsoluteConstraints(158, 74, 215, 30));

        fitness.setFont(UIConstant.textFont);
        fitness.setForeground(UIConstant.textFontColor);
        fitness.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        fitness.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fitnessMouseClicked(evt);
            }
        });
        fitness.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                fitnessFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                fitnessFocusLost(evt);
            }
        });
        fitness.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fitnessKeyPressed(evt);
            }
        });
        jPanel3.add(fitness, new org.netbeans.lib.awtextra.AbsoluteConstraints(158, 110, 215, 30));

        roadPermit.setForeground(UIConstant.textFontColor);
        roadPermit.setFont(UIConstant.textFont);
        roadPermit.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        roadPermit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                roadPermitMouseClicked(evt);
            }
        });
        roadPermit.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                roadPermitFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                roadPermitFocusLost(evt);
            }
        });
        roadPermit.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                roadPermitKeyPressed(evt);
            }
        });
        jPanel3.add(roadPermit, new org.netbeans.lib.awtextra.AbsoluteConstraints(158, 146, 215, 30));

        insurance.setForeground(UIConstant.textFontColor);
        insurance.setFont(UIConstant.textFont);
        insurance.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        insurance.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                insuranceMouseClicked(evt);
            }
        });
        insurance.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                insuranceFocusGained(evt);
            }
        });
        insurance.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                insuranceKeyPressed(evt);
            }
        });
        jPanel3.add(insurance, new org.netbeans.lib.awtextra.AbsoluteConstraints(158, 182, 215, 30));

        polutionExpiry.setFont(UIConstant.textFont);
        polutionExpiry.setForeground(UIConstant.textFontColor);
        polutionExpiry.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        polutionExpiry.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                polutionExpiryMouseClicked(evt);
            }
        });
        polutionExpiry.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                polutionExpiryFocusGained(evt);
            }
        });
        polutionExpiry.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                polutionExpiryKeyPressed(evt);
            }
        });
        jPanel3.add(polutionExpiry, new org.netbeans.lib.awtextra.AbsoluteConstraints(158, 218, 215, 30));

        taxPaidUpto.setFont(UIConstant.textFont);
        taxPaidUpto.setForeground(UIConstant.textFontColor);
        taxPaidUpto.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        taxPaidUpto.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                taxPaidUptoMouseClicked(evt);
            }
        });
        taxPaidUpto.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                taxPaidUptoFocusGained(evt);
            }
        });
        taxPaidUpto.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                taxPaidUptoKeyPressed(evt);
            }
        });
        jPanel3.add(taxPaidUpto, new org.netbeans.lib.awtextra.AbsoluteConstraints(158, 254, 215, 30));

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));

        jLabel15.setFont(UIConstant.labelFont);
        jLabel15.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel15.setText("RF Tag Info:");

        jLabel16.setFont(UIConstant.labelFont);
        jLabel16.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel16.setText("Vehicle Info:");

        jLabel17.setFont(UIConstant.labelFont);
        jLabel17.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel17.setText("Driver Info:");

        jLabel18.setFont(UIConstant.labelFont);
        jLabel18.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel18.setText("Challan Info:");

        jLabel28.setFont(UIConstant.labelFont);
        jLabel28.setVisible(true);
        jLabel28.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel28.setText("Document Info:");
        
        
        lblMuptipleTPR.setFont(UIConstant.labelFont);
        lblMuptipleTPR.setVisible(true);
        lblMuptipleTPR.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblMuptipleTPR.setText("Multiple TPR:");
        
        
        materialInfoLabel.setFont(UIConstant.labelFont);
        materialInfoLabel.setVisible(true);
        materialInfoLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        materialInfoLabel.setText("Material Info:");
        
        

        rfTagInfo.setFont(UIConstant.textFont);
        rfTagInfo.setForeground(UIConstant.textFontColor);

        vehicleInfor.setFont(UIConstant.textFont);
        vehicleInfor.setForeground(UIConstant.textFontColor);

        driverInformation.setFont(UIConstant.textFont);
        driverInformation.setForeground(UIConstant.textFontColor);

        challanRecord.setFont(UIConstant.textFont);
        challanRecord.setForeground(UIConstant.textFontColor);

        documentInfo.setFont(UIConstant.textFont);
        documentInfo.setVisible(true);
        documentInfo.setForeground(UIConstant.textFontColor);

        
        multipleTprInfo.setFont(UIConstant.textFont);
        multipleTprInfo.setVisible(true);
        multipleTprInfo.setForeground(UIConstant.textFontColor);
        
       materialInfo.setFont(UIConstant.textFont);
       materialInfo.setVisible(true);
       materialInfo.setForeground(UIConstant.textFontColor);
        
        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(106, 106, 106)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                		.addComponent(materialInfoLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)	
                	.addComponent(lblMuptipleTPR, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                	.addComponent(jLabel28, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel18, javax.swing.GroupLayout.DEFAULT_SIZE, 164, Short.MAX_VALUE)
                    .addComponent(jLabel16, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rfTagInfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(driverInformation, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(challanRecord, javax.swing.GroupLayout.DEFAULT_SIZE, 172, Short.MAX_VALUE)
                    .addComponent(documentInfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(multipleTprInfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(vehicleInfor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(materialInfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(174, 174, 174))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(rfTagInfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel15, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(vehicleInfor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel16, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE))
                .addGap(2, 2, 2)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(driverInformation, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(2, 2, 2)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(challanRecord, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(2, 2, 2)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(documentInfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel28, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(2, 2, 2) 
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(multipleTprInfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblMuptipleTPR, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(2, 2, 2)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(materialInfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(materialInfoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15))
                
        );

        jPanel6.setBackground(new java.awt.Color(255, 255, 255));

        jLabel19.setFont(UIConstant.labelFont);
        jLabel19.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel19.setText("Address#:");

        jLabel20.setFont(UIConstant.labelFont);
        jLabel20.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel20.setText("Mobile 2:");

        jLabel21.setFont(UIConstant.labelFont);
        jLabel21.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel21.setText("Fitnesss Expiry Date:");

        jLabel22.setFont(UIConstant.labelFont);
        jLabel22.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel22.setText("Road Permit Expiry Date:");

        jLabel23.setFont(UIConstant.labelFont);
        jLabel23.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel23.setText("Insurance Expiry Date:");

        jLabel24.setFont(UIConstant.labelFont);
        jLabel24.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel24.setText("Pollution Expiry Date:");

        jLabel25.setFont(UIConstant.labelFont);
        jLabel25.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel25.setText("Engine Number:");

        Address.setFont(UIConstant.textFont);
        Address.setForeground(UIConstant.textFontColor);
        Address.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        Address.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                AddressMouseClicked(evt);
            }
        });
        Address.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddressActionPerformed(evt);
            }
        });
        Address.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                AddressFocusGained(evt);
            }
        });
        Address.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                AddressKeyPressed(evt);
            }
        });

        mobile2.setFont(UIConstant.textFont);
        mobile2.setForeground(UIConstant.textFontColor);
        mobile2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        mobile2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                mobile2MouseClicked(evt);
            }
        });
        mobile2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mobile2ActionPerformed(evt);
            }
        });
        mobile2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                mobile2FocusGained(evt);
            }
        });
        mobile2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                mobile2KeyPressed(evt);
            }
        });

        engineNo.setFont(UIConstant.textFont);
        engineNo.setForeground(UIConstant.textFontColor);
        engineNo.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        engineNo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                engineNoMouseClicked(evt);
            }
        });
        engineNo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                engineNoFocusGained(evt);
            }
        });
        engineNo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                engineNoKeyPressed(evt);
            }
        });

        jLabel26.setFont(UIConstant.labelFont);
        jLabel26.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel26.setText("Owner Email:");

        fitnessExpiryDate.setBackground(new java.awt.Color(255, 255, 255));
        fitnessExpiryDate.setFont(UIConstant.textFont);
        fitnessExpiryDate.setForeground(UIConstant.textFontColor);
        fitnessExpiryDate.setDateFormatString("dd/MM/yyyy");
        fitnessExpiryDate.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fitnessExpiryDateMouseClicked(evt);
            }
        });
        fitnessExpiryDate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                fitnessExpiryDateFocusGained(evt);
            }
        });
        fitnessExpiryDate.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                fitnessExpiryDatePropertyChange(evt);
            }
        });
        fitnessExpiryDate.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fitnessExpiryDateKeyPressed(evt);
            }
        });

        roadPermitExpiryDate.setBackground(new java.awt.Color(255, 255, 255));
        roadPermitExpiryDate.setFont(UIConstant.textFont);
        roadPermitExpiryDate.setForeground(UIConstant.textFontColor);
        roadPermitExpiryDate.setDateFormatString("dd/MM/yyyy");
        roadPermitExpiryDate.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                roadPermitExpiryDateMouseClicked(evt);
            }
        });
        roadPermitExpiryDate.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                roadPermitExpiryDateKeyPressed(evt);
            }
        });

        insuranceExpiryDate.setBackground(new java.awt.Color(255, 255, 255));
        insuranceExpiryDate.setFont(UIConstant.textFont);
        insuranceExpiryDate.setForeground(UIConstant.textFontColor);
        insuranceExpiryDate.setDateFormatString("dd/MM/yyyy");
        insuranceExpiryDate.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                insuranceExpiryDateMouseClicked(evt);
            }
        });
        insuranceExpiryDate.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                insuranceExpiryDateKeyPressed(evt);
            }
        });

        polutionExpiryDate.setBackground(new java.awt.Color(255, 255, 255));
        polutionExpiryDate.setDateFormatString("dd/MM/yyyy");
        polutionExpiryDate.setFont(UIConstant.textFont);
        polutionExpiryDate.setForeground(UIConstant.textFontColor);
        polutionExpiryDate.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                polutionExpiryDateMouseClicked(evt);
            }
        });
        polutionExpiryDate.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                polutionExpiryDateKeyPressed(evt);
            }
        });

        ownerEmail.setFont(UIConstant.textFont);
        ownerEmail.setForeground(UIConstant.textFontColor);
        ownerEmail.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        ownerEmail.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        ownerEmail.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ownerEmailMouseClicked(evt);
            }
        });
        ownerEmail.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                ownerEmailFocusGained(evt);
            }
        });
        ownerEmail.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                ownerEmailKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addComponent(jLabel26, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addComponent(ownerEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(70, 70, 70)
                .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(8, 8, 8)
                .addComponent(Address, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(8, 8, 8)
                .addComponent(mobile2, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(8, 8, 8)
                .addComponent(fitnessExpiryDate, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(70, 70, 70)
                .addComponent(jLabel22, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(8, 8, 8)
                .addComponent(roadPermitExpiryDate, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jLabel23, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4)
                .addComponent(insuranceExpiryDate, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addComponent(jLabel24, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4)
                .addComponent(polutionExpiryDate, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(70, 70, 70)
                .addComponent(jLabel25, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(8, 8, 8)
                .addComponent(engineNo, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel26, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ownerEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Address, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mobile2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fitnessExpiryDate, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(jLabel22, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(roadPermitExpiryDate, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel23, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(insuranceExpiryDate, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel24, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(polutionExpiryDate, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel25, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(engineNo, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        jLabel27.setFont(UIConstant.subHeadingFont);
        jLabel27.setText("Vehicle Master & Issue RF Tag");

        Issue.setFont(UIConstant.buttonFont);
        Issue.setText("Issue");
        Issue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IssueActionPerformed(evt);
            }
        });
        Issue.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                IssueKeyPressed(evt);
            }
        });

        jLabel29.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/ipssi/rfid/ui/cover_01_right_top.gif"))); // NOI18N

        username.setForeground(new java.awt.Color(0, 102, 153));
        username.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);

        signout.setFont(UIConstant.textFont);
        signout.setBackground(new java.awt.Color(255, 255, 255));
        signout.setFocusable(false);
        signout.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        signout.setForeground(new java.awt.Color(0, 102, 153));
        signout.setLabel("Sign Out");
        signout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                signoutActionPerformed(evt);
            }
        });

        jPanel7.setBackground(new java.awt.Color(255, 255, 255));

        challanInfo.setFont(UIConstant.buttonFont);
        challanInfo.setText("Challan Info >>");
        challanInfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                challanInfoActionPerformed(evt);
            }
        });
        challanInfo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                challanInfoFocusGained(evt);
            }
        });
        challanInfo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                challanInfoKeyPressed(evt);
            }
        });

        updateVehicleInfo.setFont(UIConstant.buttonFont);
        updateVehicleInfo.setText("Save");
        updateVehicleInfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateVehicleInfoActionPerformed(evt);
            }
        });
        updateVehicleInfo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                updateVehicleInfoFocusGained(evt);
            }
        });
        updateVehicleInfo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                updateVehicleInfoKeyPressed(evt);
            }
        });

        DriverDetail.setFont(UIConstant.buttonFont);
        DriverDetail.setText("Driver Details>>");
        DriverDetail.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                DriverDetailMouseClicked(evt);
            }
        });
        DriverDetail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DriverDetailActionPerformed(evt);
            }
        });
        DriverDetail.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                DriverDetailFocusGained(evt);
            }
        });
        DriverDetail.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                DriverDetailKeyPressed(evt);
            }
        });

        clear.setFont(UIConstant.buttonFont);
        clear.setText("Clear");
        clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearActionPerformed(evt);
            }
        });
        clear.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                clearFocusGained(evt);
            }
        });
        clear.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                clearKeyPressed(evt);
            }
        });

        finish.setFont(UIConstant.buttonFont);
        finish.setText("Finish");
        finish.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                finishActionPerformed(evt);
            }
        });
        finish.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                finishKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(181, 181, 181)
                .addComponent(clear, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(challanInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(DriverDetail, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(updateVehicleInfo, javax.swing.GroupLayout.DEFAULT_SIZE, 101, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(finish, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(finish, javax.swing.GroupLayout.DEFAULT_SIZE, 47, Short.MAX_VALUE)
                    .addComponent(DriverDetail, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 47, Short.MAX_VALUE)
                    .addComponent(updateVehicleInfo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(clear, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(challanInfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        challanInfo.getAccessibleContext().setAccessibleDescription("");
        updateVehicleInfo.getAccessibleContext().setAccessibleDescription("30");
        DriverDetail.getAccessibleContext().setAccessibleDescription("");
        clear.getAccessibleContext().setAccessibleDescription("30");

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/ipssi/rfid/ui/Search.png"))); // NOI18N
        jButton1.setBorder(null);
        jButton1.setFocusable(false);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jButton1.setEnabled(false);
        jButton1.setVisible(false);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(262, 262, 262)
                        .addComponent(jLabel27, javax.swing.GroupLayout.PREFERRED_SIZE, 342, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(162, 162, 162)
                        .addComponent(username, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(signout, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel29, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(172, 172, 172)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton1)
                                .addGap(38, 38, 38)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(Issue, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(47, 47, 47)
                                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(70, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(265, 265, 265))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel27, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel29, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(username, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(signout, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(28, 28, 28)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addComponent(jButton1)))
                        .addGap(36, 36, 36)
                        .addComponent(Issue, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(2, 2, 2)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(122, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>                        

    private void challanInfoActionPerformed(java.awt.event.ActionEvent evt) {                                            
        challanInfoAction();
    }                                           

    private void clearActionPerformed(java.awt.event.ActionEvent evt) {                                      
        vehicleName.setText("");
        getFocus();
        isEnterPressed = false;
        clearInputs();

    }                                     

    private void vehicleNameKeyPressed(java.awt.event.KeyEvent evt) {                                       
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            vehicleNameAction();
        }
    }                                      

    private void transporterKeyPressed(java.awt.event.KeyEvent evt) {                                       
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            setBackgroundWhite();
            rcTare.requestFocusInWindow();
        }
    }                                      

    private void rcTareKeyPressed(java.awt.event.KeyEvent evt) {                                  
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            setBackgroundWhite();
            rcGross.requestFocusInWindow();
        }

    }                                 

    private void ownerNameKeyPressed(java.awt.event.KeyEvent evt) {                                     
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            setBackgroundWhite();
            fatherName.setBackground(UIConstant.focusPanelColor);
            fatherName.requestFocusInWindow();
        }
    }                                    

    private void fatherNameKeyPressed(java.awt.event.KeyEvent evt) {                                      
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            setBackgroundWhite();
            mobile1.setBackground(UIConstant.focusPanelColor);
            mobile1.requestFocusInWindow();
        }
    }                                     

    private void vehicleNameActionPerformed(java.awt.event.ActionEvent evt) {                                            
    }                                           

    private void rcTareActionPerformed(java.awt.event.ActionEvent evt) {                                       
    }                                      

    private void vehicleNameFocusGained(java.awt.event.FocusEvent evt) {                                        
        vehicleName.setTextBackground(UIConstant.focusPanelColor);
    }                                       

    private void transporterFocusGained(java.awt.event.FocusEvent evt) {                                        
    }                                       

    private void vehicleNameMouseClicked(java.awt.event.MouseEvent evt) {                                         

        vehicleName.requestFocusInWindow();
        vehicleName.setTextBackground(UIConstant.focusPanelColor);

    }                                        

    private void rcTareMouseClicked(java.awt.event.MouseEvent evt) {                                    
        setBackgroundWhite();
        rcTare.setBackground(UIConstant.focusPanelColor);
        rcTare.requestFocusInWindow();
    }                                   

    private void ownerNameMouseClicked(java.awt.event.MouseEvent evt) {                                       
        setBackgroundWhite();
        ownerName.requestFocusInWindow();
        ownerName.setBackground(UIConstant.focusPanelColor);
    }                                      

    private void fatherNameMouseClicked(java.awt.event.MouseEvent evt) {                                        
        setBackgroundWhite();
        fatherName.requestFocusInWindow();
        fatherName.setBackground(UIConstant.focusPanelColor);
    }                                       

    private void IssueKeyPressed(java.awt.event.KeyEvent evt) {                                 

        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            setBackgroundWhite();
            IssueAction();


        }
    }                                

    private void AddressKeyPressed(java.awt.event.KeyEvent evt) {                                   
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            setBackgroundWhite();
            mobile2.requestFocusInWindow();
            mobile2.setBackground(UIConstant.focusPanelColor);
        }
    }                                  

    private void mobile1KeyPressed(java.awt.event.KeyEvent evt) {                                   
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            setBackgroundWhite();
            fitness.setBackground(UIConstant.focusPanelColor);
            fitness.requestFocusInWindow();
        }
    }                                  

    private void mobile2KeyPressed(java.awt.event.KeyEvent evt) {                                   
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            setBackgroundWhite();
            fitnessExpiryDate.setBackground(UIConstant.focusPanelColor);
            fitnessExpiryDate.requestFocusInWindow();

        }
    }                                  

    private void fitnessKeyPressed(java.awt.event.KeyEvent evt) {                                   
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            setBackgroundWhite();
            roadPermit.requestFocusInWindow();
            roadPermit.setBackground(UIConstant.focusPanelColor);
        }
    }                                  

    private void roadPermitKeyPressed(java.awt.event.KeyEvent evt) {                                      
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            setBackgroundWhite();
            insurance.requestFocusInWindow();
            insurance.setBackground(UIConstant.focusPanelColor);
        }        // TODO add your handling code here:
    }                                     

    private void roadPermitExpiryDateKeyPressed(java.awt.event.KeyEvent evt) {                                                
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            setBackgroundWhite();
            insurance.requestFocusInWindow();
        }
    }                                               

    private void insuranceKeyPressed(java.awt.event.KeyEvent evt) {                                     
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            setBackgroundWhite();
            polutionExpiry.requestFocusInWindow();
            polutionExpiry.setBackground(UIConstant.focusPanelColor);
        }
    }                                    

    private void insuranceExpiryDateKeyPressed(java.awt.event.KeyEvent evt) {                                               
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            setBackgroundWhite();
            polutionExpiry.requestFocusInWindow();
        }        // TODO add your handling code here:
    }                                              

    private void polutionExpiryKeyPressed(java.awt.event.KeyEvent evt) {                                          
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            setBackgroundWhite();
            taxPaidUpto.requestFocusInWindow();
            taxPaidUpto.setBackground(UIConstant.focusPanelColor);
        }
    }                                         

    private void polutionExpiryDateKeyPressed(java.awt.event.KeyEvent evt) {                                              
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            setBackgroundWhite();
            taxPaidUpto.requestFocusInWindow();
        }
    }                                             

    private void engineNoKeyPressed(java.awt.event.KeyEvent evt) {                                    
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            setBackgroundWhite();
            updateVehicleInfo.requestFocusInWindow();
        }
    }                                   

    private void taxPaidUptoKeyPressed(java.awt.event.KeyEvent evt) {                                       
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            setBackgroundWhite();
            ownerEmail.requestFocusInWindow();
        }
    }                                      

    private void mobile1MouseClicked(java.awt.event.MouseEvent evt) {                                     
        setBackgroundWhite();
        mobile1.requestFocusInWindow();
        mobile1.setBackground(UIConstant.focusPanelColor);
    }                                    

    private void fitnessMouseClicked(java.awt.event.MouseEvent evt) {                                     
        setBackgroundWhite();
        fitness.requestFocusInWindow();
        fitness.setBackground(UIConstant.focusPanelColor);
    }                                    

    private void roadPermitMouseClicked(java.awt.event.MouseEvent evt) {                                        
        setBackgroundWhite();
        roadPermit.requestFocusInWindow();
        roadPermit.setBackground(UIConstant.focusPanelColor);
    }                                       

    private void insuranceMouseClicked(java.awt.event.MouseEvent evt) {                                       
        setBackgroundWhite();
        insurance.requestFocusInWindow();
        insurance.setBackground(UIConstant.focusPanelColor);
    }                                      

    private void polutionExpiryMouseClicked(java.awt.event.MouseEvent evt) {                                            
        setBackgroundWhite();
        polutionExpiry.requestFocusInWindow();
        polutionExpiry.setBackground(UIConstant.focusPanelColor);
    }                                           

    private void taxPaidUptoMouseClicked(java.awt.event.MouseEvent evt) {                                         
        setBackgroundWhite();
        taxPaidUpto.requestFocusInWindow();
        taxPaidUpto.setBackground(UIConstant.focusPanelColor);
    }                                        

    private void AddressMouseClicked(java.awt.event.MouseEvent evt) {                                     
        setBackgroundWhite();
        Address.requestFocusInWindow();
        Address.setBackground(UIConstant.focusPanelColor);
    }                                    

    private void mobile2MouseClicked(java.awt.event.MouseEvent evt) {                                     
        setBackgroundWhite();
        mobile2.requestFocusInWindow();
        mobile2.setBackground(UIConstant.focusPanelColor);
    }                                    

    private void roadPermitExpiryDateMouseClicked(java.awt.event.MouseEvent evt) {                                                  
    }                                                 

    private void insuranceExpiryDateMouseClicked(java.awt.event.MouseEvent evt) {                                                 
    }                                                

    private void polutionExpiryDateMouseClicked(java.awt.event.MouseEvent evt) {                                                
    }                                               

    private void engineNoMouseClicked(java.awt.event.MouseEvent evt) {                                      
        setBackgroundWhite();
        engineNo.requestFocusInWindow();
        engineNo.setBackground(UIConstant.focusPanelColor);
    }                                     

    private void IssueActionPerformed(java.awt.event.ActionEvent evt) {                                      
        IssueAction();
    }                                     

    private void rcGrossMouseClicked(java.awt.event.MouseEvent evt) {                                     
        setBackgroundWhite();
        rcGross.setBackground(UIConstant.focusPanelColor);
    }                                    

    private void rcGrossActionPerformed(java.awt.event.ActionEvent evt) {                                        
        // TODO add your handling code here:
    }                                       

    private void rcGrossKeyPressed(java.awt.event.KeyEvent evt) {                                   
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            setBackgroundWhite();
            if (Issue.isVisible()) {
                Issue.requestFocusInWindow();
            } else {
                ownerName.requestFocusInWindow();
                ownerName.setBackground(UIConstant.focusPanelColor);
            }
            // rfTagPanel.setBackground(Color.LIGHT_GRAY);
        }
    }                                  

    private void updateVehicleInfoActionPerformed(java.awt.event.ActionEvent evt) {                                                  
        saveAction();
    }                                                 

    private void DriverDetailActionPerformed(java.awt.event.ActionEvent evt) {                                             
        driverDetailAction();
    }                                            

    private void signoutActionPerformed(java.awt.event.ActionEvent evt) {                                        
        if (rfidHandler != null) {
            rfidHandler.stop();
        }
        this.dispose();
        new LoginWindow().setVisible(true);
    }                                       

    private void rcTareFocusGained(java.awt.event.FocusEvent evt) {                                   
        setBackgroundWhite();
        rcTare.setBackground(UIConstant.focusPanelColor);
    }                                  

    private void rcGrossFocusGained(java.awt.event.FocusEvent evt) {                                    
        setBackgroundWhite();
        rcGross.setBackground(UIConstant.focusPanelColor);
    }                                   

    private void vehicleNameFocusLost(java.awt.event.FocusEvent evt) {                                      
//            vehicleNameAction();
//        if (Utils.isNull(vehicleName.getText())) {
//            JOptionPane.showMessageDialog(null, "Please Enter Vehicle Name");
//             setBackgroundWhite();
//            vehicleName.setTextBackground(UIConstant.focusPanelColor);
//            vehicleName.requestFocusInWindow();
//            return;
//        } else if (!isEnterPressed) {
//            JOptionPane.showMessageDialog(null, "Please Search by Vehicle Name");
//              setBackgroundWhite();
//            vehicleName.setTextBackground(UIConstant.focusPanelColor);
//            vehicleName.requestFocusInWindow();
//            return;
//        }
    }                                     

    private void rcTareFocusLost(java.awt.event.FocusEvent evt) {                                 
        if (Utils.isNull(vehicleName.getText())) {
            JOptionPane.showMessageDialog(null, " Please enter valid vehicle name");
            vehicleName.requestFocus();
            vehicleName.requestFocusInWindow();
            return;
        } else if (!isEnterPressed) {
            JOptionPane.showMessageDialog(null, "Please Search by Vehicle Name");
            vehicleName.requestFocusInWindow();
            vehicleName.setTextBackground(UIConstant.focusPanelColor);
            return;
        }
    }                                

    private void ownerNameFocusGained(java.awt.event.FocusEvent evt) {                                      
//        setBackgroundWhite();
//        ownerName.setBackground(UIConstant.focusPanelColor);
    }                                     

    private void fatherNameFocusGained(java.awt.event.FocusEvent evt) {                                       
        setBackgroundWhite();
        fatherName.setBackground(UIConstant.focusPanelColor);
    }                                      

    private void mobile1FocusGained(java.awt.event.FocusEvent evt) {                                    
        setBackgroundWhite();
        mobile1.setBackground(UIConstant.focusPanelColor);
    }                                   

    private void fitnessFocusGained(java.awt.event.FocusEvent evt) {                                    
        setBackgroundWhite();
        fitness.setBackground(UIConstant.focusPanelColor);
    }                                   

    private void roadPermitFocusGained(java.awt.event.FocusEvent evt) {                                       
        setBackgroundWhite();
        roadPermit.setBackground(UIConstant.focusPanelColor);
    }                                      

    private void insuranceFocusGained(java.awt.event.FocusEvent evt) {                                      
        setBackgroundWhite();
        insurance.setBackground(UIConstant.focusPanelColor);
    }                                     

    private void polutionExpiryFocusGained(java.awt.event.FocusEvent evt) {                                           
        setBackgroundWhite();
        polutionExpiry.setBackground(UIConstant.focusPanelColor);
    }                                          

    private void taxPaidUptoFocusGained(java.awt.event.FocusEvent evt) {                                        
        setBackgroundWhite();
        taxPaidUpto.setBackground(UIConstant.focusPanelColor);
    }                                       

    private void AddressFocusGained(java.awt.event.FocusEvent evt) {                                    
        setBackgroundWhite();
        Address.setBackground(UIConstant.focusPanelColor);
    }                                   

    private void mobile2FocusGained(java.awt.event.FocusEvent evt) {                                    
        setBackgroundWhite();
        mobile2.setBackground(UIConstant.focusPanelColor);
    }                                   

    private void engineNoFocusGained(java.awt.event.FocusEvent evt) {                                     
        setBackgroundWhite();
        engineNo.setBackground(UIConstant.focusPanelColor);
    }                                    

    private void rcGrossFocusLost(java.awt.event.FocusEvent evt) {                                  
        // setBackgroundWhite();
    }                                 

    private void ownerNameFocusLost(java.awt.event.FocusEvent evt) {                                    
        // setBackgroundWhite();
    }                                   

    private void fatherNameFocusLost(java.awt.event.FocusEvent evt) {                                     
        //    setBackgroundWhite();
    }                                    

    private void mobile1FocusLost(java.awt.event.FocusEvent evt) {                                  
        // setBackgroundWhite();
    }                                 

    private void fitnessFocusLost(java.awt.event.FocusEvent evt) {                                  
        // setBackgroundWhite();
    }                                 

    private void roadPermitFocusLost(java.awt.event.FocusEvent evt) {                                     
        // TODO add your handling code here:
    }                                    

    private void mobile2ActionPerformed(java.awt.event.ActionEvent evt) {                                        
        // TODO add your handling code here:
    }                                       

    private void clearFocusGained(java.awt.event.FocusEvent evt) {                                  
        setBackgroundWhite();
    }                                 

    private void challanInfoFocusGained(java.awt.event.FocusEvent evt) {                                        
        setBackgroundWhite();
    }                                       

    private void DriverDetailMouseClicked(java.awt.event.MouseEvent evt) {                                          
        // TODO add your handling code here:
    }                                         

    private void DriverDetailFocusGained(java.awt.event.FocusEvent evt) {                                         
        setBackgroundWhite();
    }                                        

    private void updateVehicleInfoFocusGained(java.awt.event.FocusEvent evt) {                                              
        setBackgroundWhite();
    }                                             

    private void AddressActionPerformed(java.awt.event.ActionEvent evt) {                                        
        // TODO add your handling code here:
    }                                       

    private void ownerEmailFocusGained(java.awt.event.FocusEvent evt) {                                       
        setBackgroundWhite();
        ownerEmail.setBackground(UIConstant.focusPanelColor);
    }                                      

    private void ownerEmailKeyPressed(java.awt.event.KeyEvent evt) {                                      
        // TODO add your handling code here:  
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            setBackgroundWhite();
            Address.requestFocusInWindow();
            Address.setBackground(UIConstant.focusPanelColor);
        }
    }                                     

    private void ownerEmailMouseClicked(java.awt.event.MouseEvent evt) {                                        
        setBackgroundWhite();
        ownerEmail.requestFocusInWindow();
        ownerEmail.setBackground(UIConstant.focusPanelColor);
    }                                       

    private void updateVehicleInfoKeyPressed(java.awt.event.KeyEvent evt) {                                             
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            saveAction();
        }
    }                                            

    private void clearKeyPressed(java.awt.event.KeyEvent evt) {                                 
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            vehicleName.setText("");
            getFocus();
            clearInputs();
        }
    }                                

    private void challanInfoKeyPressed(java.awt.event.KeyEvent evt) {                                       
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            challanInfoAction();
        }
    }                                      

    private void DriverDetailKeyPressed(java.awt.event.KeyEvent evt) {                                        
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            driverDetailAction();
        }
    }                                       

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
        vehicleNameAction();
    }                                        

    private void finishActionPerformed(java.awt.event.ActionEvent evt) {                                       
                finishProcess();
    }                                      

    private void finishKeyPressed(java.awt.event.KeyEvent evt) {                                  
               if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
              // Enter key Press Event Here
        	  finishProcess();
          }
    }                                 

    private void fitnessExpiryDateKeyPressed(java.awt.event.KeyEvent evt) {                                             
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            setBackgroundWhite();
            roadPermit.requestFocusInWindow();
        }
    }                                            

    private void fitnessExpiryDatePropertyChange(java.beans.PropertyChangeEvent evt) {                                                 

    }                                                

    private void fitnessExpiryDateFocusGained(java.awt.event.FocusEvent evt) {                                              
        setBackgroundWhite();
        fitnessExpiryDate.setBackground(UIConstant.focusPanelColor);
    }                                             

    private void fitnessExpiryDateMouseClicked(java.awt.event.MouseEvent evt) {                                               

    }                                              

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VehicleRegistrationWindow().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify                     
    private javax.swing.JTextField Address;
    public static javax.swing.JButton DriverDetail;
    private javax.swing.JButton Issue;
    public static javax.swing.JButton challanInfo;
    public static javax.swing.JLabel challanRecord;
    private javax.swing.JButton clear;
    public static javax.swing.JLabel documentInfo;
    public static javax.swing.JLabel multipleTprInfo;
    public static javax.swing.JLabel materialInfoLabel;
    public static javax.swing.JLabel materialInfo;
    public static javax.swing.JLabel driverInformation;
    private javax.swing.JTextField engineNo;
    private javax.swing.JTextField fatherName;
    private javax.swing.JButton finish;
    private javax.swing.JTextField fitness;
    private com.toedter.calendar.JDateChooser fitnessExpiryDate;
    private javax.swing.JTextField insurance;
    private com.toedter.calendar.JDateChooser insuranceExpiryDate;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel lblMuptipleTPR;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JTextField mobile1;
    private javax.swing.JTextField mobile2;
    private javax.swing.JLabel overrides;
    private javax.swing.JTextField ownerEmail;
    public static javax.swing.JTextField ownerName;
    private javax.swing.JTextField polutionExpiry;
    private com.toedter.calendar.JDateChooser polutionExpiryDate;
    public static javax.swing.JTextField rcGross;
    public static javax.swing.JTextField rcTare;
    public static javax.swing.JLabel rfTagInfo;
    private javax.swing.JTextField roadPermit;
    private com.toedter.calendar.JDateChooser roadPermitExpiryDate;
    private java.awt.Button signout;
    private javax.swing.JTextField taxPaidUpto;
    private javax.swing.JComboBox transporter;
    private javax.swing.JButton updateVehicleInfo;
    public static javax.swing.JLabel username;
    private javax.swing.JLabel vehicleInfor;
    private AutoCompleteCombo vehicleName;
	private Vehicle vehicleDetail = null;
    // End of variables declaration                   

       private void clearInputs() {
    	challanInfo.setVisible(false);// update 09/6/16 
        rfTagInfo.setText("");
        vehicleInfor.setText("");
        documentInfo.setText("");
        multipleTprInfo.setText("");
        materialInfo.setText("");
        challanRecord.setText("");
        driverInformation.setText("");
        isTagIssue = Misc.getUndefInt();
        transporter.setSelectedIndex(0);
        rcTare.setText("");
        rcGross.setText("");
        ownerName.setText("");
        fatherName.setText("");
        mobile1.setText("");
        fitness.setText("");
        polutionExpiry.setText("");
        roadPermit.setText("");
        insurance.setText("");
        taxPaidUpto.setText("");
        ownerEmail.setText("");
        Address.setText("");
        mobile2.setText("");
        fitnessExpiryDate.setDate(null);
        polutionExpiryDate.setDate(null);
        insuranceExpiryDate.setDate(null);
        roadPermitExpiryDate.setDate(null);
        engineNo.setText("");
        rfTag.clearSelection();
        Issue.setVisible(true);
        DriverDetail.setVisible(true);
        overrides.setText("");
        vehicleName.setText("");
        vehicleName.setTextBackground(UIConstant.focusPanelColor);
        vehicleName.requestFocusInWindow();
        vehicleExtentedBean = null;
        vehBean = null;
        isNewVehicle = false;
        isTagIssue = Misc.getUndefInt();
        m_vehicleId = Misc.getUndefInt();
        isEnterPressed = false;
        tpRecord = null;
        tpStep = null;
        entryTime = null;
        tprBlockManager = null;
        fitnessOk = Misc.getUndefInt();
        roadPermitOk = Misc.getUndefInt();
        insuranceOk = Misc.getUndefInt();
        polutionOk = Misc.getUndefInt();
        isVehicleExist = Misc.getUndefInt();
        changeToOverride(false);
        toggleVehicle(true);
    }

    private void setvehicleExtentedDetails(VehicleExtended vehicleExtentedBean) {
        System.out.println(" ######## Start Get Date From setvehicleExtentedDetails(VehicleExtended vehicleExtentedBean) ######");
        if (vehicleExtentedBean.getTransporter_id() != Misc.getUndefInt()) {
        	DropDownValues.setComboItem(transporter, vehicleExtentedBean.getTransporter_id());
        }
//        overrides.setSelectedIndex(1);
        ownerName.setText(vehicleExtentedBean.getStr_field1());
        fatherName.setText(vehicleExtentedBean.getStr_field2());
        mobile1.setText(vehicleExtentedBean.getStrField10());
        fitness.setText(vehicleExtentedBean.getStrField4());
        roadPermit.setText(vehicleExtentedBean.getPermit1_number());
        insurance.setText(vehicleExtentedBean.getStrField5());
        polutionExpiry.setText(vehicleExtentedBean.getStrField6());
        polutionExpiryDate.setDate(vehicleExtentedBean.getDate_field1());
        taxPaidUpto.setText(vehicleExtentedBean.getStrField7());
        ownerEmail.setText(vehicleExtentedBean.getStrField8());
        mobile2.setText(vehicleExtentedBean.getStrField9());
        fitnessExpiryDate.setDate(vehicleExtentedBean.getPermit1_number_expiry());
        insuranceExpiryDate.setDate(vehicleExtentedBean.getInsurance_number_expiry());
        roadPermitExpiryDate.setDate(vehicleExtentedBean.getPermit2_number_expiry());
        engineNo.setText(vehicleExtentedBean.getStrField11());
        Address.setText(vehicleExtentedBean.getStr_field3());
        System.out.println(" ######## End Get Date From setvehicleExtentedDetails(VehicleExtended vehicleExtentedBean) ######");

    }

    private void setTransporterList() {
    	Connection conn = null;
    	boolean destroyIt = false;
    	try{
    		conn = DBConnectionPool.getConnectionFromPoolNonWeb();
                   DropDownValues.setTransporterList(transporter, conn,TokenManager.materialCat);
//    		ArrayList<ComboItem> transporterList = DropDownValues.getTranporterList(conn);
//    		
//                for (int i = 0; i < transporterList.size(); i++) {
//    			transporter.addItem(transporterList.get(i));
//    			transporter.setSelectedIndex(0);
//    		}
    	}catch(Exception ex){
    		ex.printStackTrace();
    		destroyIt = true;
    	}finally{
    		try{
    			DBConnectionPool.returnConnectionToPoolNonWeb(conn, destroyIt);
    		}catch(Exception ex){
    			ex.printStackTrace();
    		}
    	}
    }

    private void getFocus() {
    	setBackgroundWhite();
        vehicleName.requestFocusInWindow();
        vehicleName.setTextBackground(UIConstant.focusPanelColor);
    }

    private void setBackgroundWhite() {
        ownerName.setBackground(UIConstant.PanelWhite);
        vehicleName.setBackground(UIConstant.PanelWhite);
        fatherName.setBackground(UIConstant.PanelWhite);
        mobile1.setBackground(UIConstant.PanelWhite);
        fitness.setBackground(UIConstant.PanelWhite);
        roadPermit.setBackground(UIConstant.PanelWhite);
        insurance.setBackground(UIConstant.PanelWhite);
        polutionExpiry.setBackground(UIConstant.PanelWhite);
        polutionExpiryDate.setBackground(UIConstant.PanelWhite);
        taxPaidUpto.setBackground(UIConstant.PanelWhite);
        ownerEmail.setBackground(UIConstant.PanelWhite);
        mobile2.setBackground(UIConstant.PanelWhite);
        fitnessExpiryDate.setBackground(UIConstant.PanelWhite);
        insuranceExpiryDate.setBackground(UIConstant.PanelWhite);
        roadPermitExpiryDate.setBackground(UIConstant.PanelWhite);
        engineNo.setBackground(UIConstant.PanelWhite);
        Address.setBackground(UIConstant.PanelWhite);
        rcTare.setBackground(UIConstant.PanelWhite);
        rcGross.setBackground(UIConstant.PanelWhite);
    }

     private void setVehicleDetail(Vehicle vehicleBean) {
    	 vehicleName.setText(vehicleBean.getId(), vehicleBean.getStdName());
        if (vehicleBean.getAvgTare() != Misc.getUndefInt()) {
            rcTare.setText(Misc.getPrintableDouble(vehicleBean.getAvgTare()));
        }
        if (vehicleBean.getAvgGross() != Misc.getUndefInt()) {
            rcGross.setText(Misc.getPrintableDouble(vehicleBean.getAvgGross()));
        }
        /*if(!Misc.isUndef(vehicleBean.getTransporterId()) ){
        	transporter.setSelectedIndex(vehicleBean.getTransporterId());
        }*/
        if (Utils.isNull(vehicleBean.getEpcId())) {
            //rfTagInfo.setText("No");
            Issue.setVisible(true);
        } else {
            //rfTagInfo.setText("Yes");
        }
        //vehicleInfor.setText("Yes");
    }


     private void saveAction() {
    	 Pattern pattern1 = Pattern.compile("\\d{10}");
    	 Matcher matcher1 = pattern1.matcher(mobile1.getText());
    	 setBackgroundWhite();
    	 Connection conn = null;
    	 boolean destroyIt = false;
    	 try{
    		 conn = DBConnectionPool.getConnectionFromPoolNonWeb();
    		 if (Utils.isNull(vehicleName.getText())) {
    			 JOptionPane.showMessageDialog(null, "Please Enter Vehicle Name");
    			 vehicleName.requestFocusInWindow();
    			 vehicleName.setTextBackground(UIConstant.focusPanelColor);
    			 return;
    		 } else if (!isEnterPressed) {
    			 JOptionPane.showMessageDialog(null, "Please Search by Vehicle Name");
    			 vehicleName.requestFocusInWindow();
    			 vehicleName.setTextBackground(UIConstant.focusPanelColor);
    			 return;
    		 } else if (m_vehicleId == Misc.getUndefInt() && !Utils.isNull(vehicleName.getText())) {
    			 JOptionPane.showMessageDialog(null, "Please Enter Valid Vehicle Name");
    			 vehicleName.requestFocusInWindow();
    			 vehicleName.setTextBackground(UIConstant.focusPanelColor);
    			 return;
    		 } 
    		 else if (!Utils.isNumericDigit(rcTare.getText())) {
    			 JOptionPane.showMessageDialog(null, "Please Enter Valid tare");
    			 rcTare.requestFocusInWindow();
    			 rcTare.setBackground(UIConstant.focusPanelColor);
    			 return;
    		 } else if (!Utils.isNumericDigit(rcGross.getText())) {
    			 JOptionPane.showMessageDialog(null, "Please Enter valid rcGross");
    			 rcGross.setBackground(UIConstant.focusPanelColor);
    			 rcGross.requestFocusInWindow();
    			 return;
    		 } else if (Utils.isNull(ownerName.getText())) {
    			 JOptionPane.showMessageDialog(null, "Please Enter Ownere Name");
    			 ownerName.requestFocusInWindow();
    			 ownerName.setBackground(UIConstant.focusPanelColor);
    			 return;
    		 } else if (Utils.isNull(fatherName.getText())) {
    			 JOptionPane.showMessageDialog(null, "Please Enter Father Name");
    			 fatherName.setBackground(UIConstant.focusPanelColor);
    			 fatherName.requestFocusInWindow();
    			 return;
    		 } else if (!Utils.isPhoneNumberValidate(mobile1.getText())) {
    			 JOptionPane.showMessageDialog(null, "Please Enter Valid Mobile No");
    			 mobile1.requestFocusInWindow();
    			 mobile1.setBackground(UIConstant.focusPanelColor);
    			 return;
    		 } else if (Utils.isNull(fitness.getText())) {
    			 JOptionPane.showMessageDialog(null, "Please Enter Fitness ");
    			 fitness.setBackground(UIConstant.focusPanelColor);
    			 fitness.requestFocusInWindow();
    			 return;
    		 } else if (Utils.isNull(insurance.getText())) {
    			 JOptionPane.showMessageDialog(null, "Please Enter Insurance");
    			 insurance.setBackground(UIConstant.focusPanelColor);
    			 insurance.requestFocusInWindow();
    			 return;
    		 } else if (!Utils.isNumericDigit(roadPermit.getText())) {
    			 JOptionPane.showMessageDialog(null, "Please Enter Numeric Road Permit No");
    			 roadPermit.setBackground(UIConstant.focusPanelColor);
    			 roadPermit.requestFocusInWindow();
    			 return;
    		 } else if (!Utils.isNull(mobile2.getText()) && !Utils.isPhoneNumberValidate(mobile2.getText())) {
    			 JOptionPane.showMessageDialog(null, "Please Enter Valid Mobile No");
    			 mobile2.requestFocusInWindow();
    			 mobile2.setBackground(UIConstant.focusPanelColor);
    			 return;
    		 } else if (!Utils.isNull(ownerEmail.getText()) && !Utils.validateEmailAddress(ownerEmail.getText())) {
    			 JOptionPane.showMessageDialog(null, "Please Enter Valid Email Address");
    			 ownerEmail.setBackground(UIConstant.focusPanelColor);
    			 ownerEmail.requestFocusInWindow();
    			 return;
    		 } else if (Utils.isNull(Address.getText())) {
    			 JOptionPane.showMessageDialog(null, "Please Enter Address");
    			 Address.setBackground(UIConstant.focusPanelColor);
    			 Address.requestFocusInWindow();
    			 return;
    		 } else if (isNewVehicle && isTagIssue != 0) {
    			 JOptionPane.showMessageDialog(null, "Please Issue Tag to Vehicle");
    			 return;
    		 } 
    		 else {
    			 IssueTag issueTag = new IssueTag();
    			 Date sysDate = new Date();
    			 java.sql.Timestamp now = Misc.utilToSqlDate(sysDate);
    			 if (vehicleExtentedBean == null) {
    				 vehicleExtentedBean = new VehicleExtended();
    			 }
    			 vehicleExtentedBean.setVehicleId(m_vehicleId);
    			 vehicleExtentedBean.setTransporter_id(transporter.getSelectedIndex());
    			 vehicleExtentedBean.setStr_field1(ownerName.getText());//
    			 vehicleExtentedBean.setStr_field2(fatherName.getText());//
    			 vehicleExtentedBean.setStr_field3(Address.getText());//
    			 vehicleExtentedBean.setStrField4(fitness.getText());//
    			 vehicleExtentedBean.setPermit1_number(roadPermit.getText());//
    			 vehicleExtentedBean.setStrField5(insurance.getText());//
    			 vehicleExtentedBean.setStrField6(polutionExpiry.getText());
    			 vehicleExtentedBean.setStrField7(taxPaidUpto.getText());
    			 vehicleExtentedBean.setStrField8(ownerEmail.getText());
    			 vehicleExtentedBean.setStrField9(mobile2.getText());
    			 vehicleExtentedBean.setStrField10(mobile1.getText());
    			 vehicleExtentedBean.setStrField11(engineNo.getText());// not update in mpl web
    			 vehicleExtentedBean.setPermit1_number_expiry(fitnessExpiryDate.getDate());
    			 vehicleExtentedBean.setPermit2_number_expiry(roadPermitExpiryDate.getDate());
    			 vehicleExtentedBean.setInsurance_number_expiry(insuranceExpiryDate.getDate());
    			 vehicleExtentedBean.setDate_field1(polutionExpiryDate.getDate());
    			 vehicleExtentedBean.setTransporter_id(transporter.getSelectedIndex());
    			 vehicleExtentedBean.setExtendedStatus(1);
    			 boolean isUpdate = false;
    			 isUpdate = RFIDMasterDao.update(conn, vehicleExtentedBean,false);
    			 if (isUpdate) {
    				 fitnessOk = TPRUtils.isVehicleDocumentComplete(conn, m_vehicleId, TPRQuestion.isFitnessOk, TokenManager.fitnessExpiaryThreshold);
    				 roadPermitOk = TPRUtils.isVehicleDocumentComplete(conn, m_vehicleId, TPRQuestion.isRoadPermitOk, TokenManager.roadPermitExpiaryThreshold);
    				 insuranceOk = TPRUtils.isVehicleDocumentComplete(conn, m_vehicleId, TPRQuestion.isInsuranceOk, TokenManager.insauranceExpiaryThreshold);
    				 polutionOk = TPRUtils.isVehicleDocumentComplete(conn, m_vehicleId, TPRQuestion.isPolutionOk, TokenManager.polutionExpiaryThreshold);
    				 isVehicleExist = Results.Questions.YES;
    				 GateInDao.updateTPRQuestion(conn, tpRecord != null ? tpRecord.getTprId() : Misc.getUndefInt(), TokenManager.currWorkStationType, TPRQuestion.isVehicleExist, Results.Questions.YES, TokenManager.userId);
    				 GateInDao.updateTPRQuestion(conn, tpRecord != null ? tpRecord.getTprId() : Misc.getUndefInt(), TokenManager.currWorkStationType, TPRQuestion.isFitnessOk, fitnessOk, TokenManager.userId);
    				 GateInDao.updateTPRQuestion(conn, tpRecord != null ? tpRecord.getTprId() : Misc.getUndefInt(), TokenManager.currWorkStationType, TPRQuestion.isRoadPermitOk,roadPermitOk, TokenManager.userId);
    				 GateInDao.updateTPRQuestion(conn, tpRecord != null ? tpRecord.getTprId() : Misc.getUndefInt(), TokenManager.currWorkStationType, TPRQuestion.isInsuranceOk, insuranceOk, TokenManager.userId);
    				 GateInDao.updateTPRQuestion(conn, tpRecord != null ? tpRecord.getTprId() : Misc.getUndefInt(), TokenManager.currWorkStationType, TPRQuestion.isPolutionOk, polutionOk, TokenManager.userId);
    				 if(tprBlockManager != null){
    					 tprBlockManager.addQuestions(new TPSQuestionDetail(TPRQuestion.isVehicleExist, isVehicleExist));
    					 tprBlockManager.addQuestions(new TPSQuestionDetail(TPRQuestion.isFitnessOk, fitnessOk));
    					 tprBlockManager.addQuestions(new TPSQuestionDetail(TPRQuestion.isRoadPermitOk, roadPermitOk));
    					 tprBlockManager.addQuestions(new TPSQuestionDetail(TPRQuestion.isInsuranceOk, insuranceOk));
    					 tprBlockManager.addQuestions(new TPSQuestionDetail(TPRQuestion.isPolutionOk, polutionOk));
    				 }
    				 updateVehicleBlockStatus(conn, tpRecord != null ? tpRecord.getVehicleId() : Misc.getUndefInt(), tpRecord);
    				 conn.commit();
    				 JOptionPane.showMessageDialog(null, "Vehicle Info Saved");
    			 }
    		 }
    	 }catch(Exception ex){
    		 JOptionPane.showMessageDialog(null, UIConstant.SAVE_FAILER_MESSAGE);
    		 ex.printStackTrace();
    		 destroyIt = true;
    	 }finally{
    		 try{
    			 DBConnectionPool.returnConnectionToPoolNonWeb(conn, destroyIt);
    		 }catch(Exception ex){
    			 ex.printStackTrace();
    		 }
    	 }
     }
    private void challanInfoAction() {
        if (Utils.isNull(vehicleName.getText())) {
            JOptionPane.showMessageDialog(null, "Please Fill Data");
            vehicleName.requestFocusInWindow();
            vehicleName.setTextBackground(UIConstant.focusPanelColor);
            return;
        } else if (m_vehicleId == Misc.getUndefInt()) {
            JOptionPane.showMessageDialog(null, "Please Enter Valid vehicle Name");
            vehicleName.requestFocusInWindow();
            vehicleName.setTextBackground(UIConstant.focusPanelColor);
            return;
        } 
        else {
            new ChallanEntryWindow(new javax.swing.JFrame(), true, tpRecord, tprBlockManager,TokenManager.userId,this).setVisible(true);
        }
    }
    
     private void driverDetailAction() {
//    	 new FingerPrintSyncDialog();
        new DriverRegistrationWindow(new javax.swing.JFrame(), true,this,tpRecord, tprBlockManager,TokenManager.userId).setVisible(true);
    }
private void initDetails(Connection conn,String vehicleName, int vehicleId,boolean isNew, TPRecord tpRecord){
    	try{
            if (isNew) {// new vehicle
                transporter.setFocusable(true);
                transporter.setSelectedIndex(0);
                transporter.requestFocusInWindow();
                transporter.setEnabled(true);
                challanInfo.setVisible(true);
            }
            vehicleExtentedBean = GateInDao.getDetails(conn, vehicleId);
            vehBean = GateInDao.selectDataFromVehicle(conn, vehicleId);
            if (vehicleExtentedBean != null) {
            	if(vehicleExtentedBean.getTransporter_id() <= 0)
            		vehicleExtentedBean.setTransporter_id(tpRecord != null ? tpRecord.getTransporterId() : Misc.getUndefInt());
            	setvehicleExtentedDetails(vehicleExtentedBean);
            }
            if (vehBean != null) {
                setVehicleDetail(vehBean);
            }
            updateVehicleBlockStatus(conn, vehicleId, tpRecord);
    	}catch(Exception ex){
    		ex.printStackTrace();
    	}
    }
    @Override
    public void updateVehicleBlockStatus(Connection conn, int vehicleId, TPRecord tpr){
    	if(tpr == null || tprBlockManager == null)
    		return;
    	try{
    		int blockStatus = tprBlockManager.getBlockStatus();// tprBlockStatus == null ? UIConstant.NOT_BLOCKED : tprBlockStatus.first;
    		clearFlags();
    		updateQuestionInfo(conn);
    		if (blockStatus == UIConstant.OVERRIDE) {
                overrides.setText("OVERRIDE");
            } else if (blockStatus == UIConstant.NOT_BLOCKED) {
            	changeToOverride(false);
                overrides.setText("NOT_BLOCKED");
            } else if (blockStatus == UIConstant.BLOCKED) {
            	changeToOverride(true);
                overrides.setText("BLOCKED");
            } else {
                overrides.setText("NOT OVERRIDE");
            }
    	}catch(Exception ex){
    		ex.printStackTrace();
    	}
    }
    
    
    private void clearFlags() {
    	boolean isChallanExist = !Utils.isNull(tpRecord == null ? null : tpRecord.getChallanNo());
    	vehicleInfor.setForeground(UIConstant.textFontColor);
    	driverInformation.setForeground(UIConstant.textFontColor);
    	rfTagInfo.setForeground(UIConstant.textFontColor);
    	challanRecord.setForeground(UIConstant.textFontColor);
    	documentInfo.setForeground(UIConstant.textFontColor);
    	multipleTprInfo.setForeground(UIConstant.textFontColor);
    	vehicleInfor.setText("Yes");
		driverInformation.setText("Yes");
		rfTagInfo.setText("Yes");
		challanRecord.setText(isChallanExist ? "Yes" : "No");
		documentInfo.setText("Yes"); 
		multipleTprInfo.setText("No");
	}

	private int issueTag(Connection conn, int vehicleId, String vehicleName, double rcGross, double rcTare, int transporterId, int userId) throws SQLException{
    	int retval = Misc.getUndefInt();
    	
    	if(Misc.isUndef(vehicleId))
    		return retval;
    	try{
            IssueTag issueTag = new IssueTag();
            try {
            	vehBean = GateInDao.selectDataFromVehicle(conn, vehicleId);
            	vehBean.setAvgGross(rcGross);
            	vehBean.setAvgTare(rcTare);
            	vehBean.setTransporterId(transporterId);
            	vehBean.setUpdatedBy(userId);
            	vehBean.setRfid_issue_date(new Date());
            	retval = issueTag.tagIssued(vehBean);
            	if (retval == 0) {
            		RFIDMasterDao.executeQuery(conn, "update vehicle set last_epc=rfid_epc where rfid_epc like '"+vehBean.getEpcId()+"'");
            		RFIDMasterDao.executeQuery(conn, "update vehicle set rfid_epc=null where rfid_epc like '"+vehBean.getEpcId()+"'");
            		RFIDMasterDao.update(conn, vehBean,false);
            	}
            } catch (RFIDException ex) {
                ex.printStackTrace();
            } catch (Exception ex) {
                ex.printStackTrace();
            }
    	}catch(Exception ex){
    		ex.printStackTrace();
    	}
    	return retval;
    }
    
    private void finishProcess(){
    	Connection conn = null;
    	boolean destroyIt = false;
    	try{
    		boolean isDeny = false;
    		conn = DBConnectionPool.getConnectionFromPoolNonWeb();
    		if(tpRecord != null){
    			if(finish.getText().indexOf("Finish") >= 0){//request override
    				if (tpRecord.getMaterialCat() == com.ipssi.rfid.constant.Type.TPRMATERIAL.FLYASH) {
    					vehicleDetail  = (Vehicle) RFIDMasterDao.get(conn, Vehicle.class, tpRecord.getVehicleId());
    					long total_days = DropDownValues.getDifferenceBwDate(vehicleDetail.getFlyashTareTime());
    					if (total_days > TokenManager.maxTareDays) {
    						tpRecord.setNextStepType(com.ipssi.rfid.constant.Type.WorkStationType.FLY_ASH_TARE_WT_TYPE);
    					}else{
    						tpRecord.setNextStepType(com.ipssi.rfid.constant.Type.WorkStationType.FLY_ASH_GROSS_WT_TYPE);
    					}

    				} else {
    					tpRecord.setNextStepType(TokenManager.nextWorkStationType);
    				}
    				tpRecord.setLatestRegOut(new Date());
    				tpRecord.setPreStepType(TokenManager.currWorkStationType);
        			tpRecord.setPrevTpStep(TokenManager.currWorkStationId);
    			}else{
    				isDeny = true;
    			}
    			TPRInformation.insertUpdateTpr(conn, tpRecord);
    		    int stepId = InsertTPRStep(conn,isDeny);
    		    InsertTPRQuestionDetails(conn, stepId);
    		    if(tprBlockManager != null)
    	    		tprBlockManager.setTprBlockStatus(conn, tpRecord.getTprId(),TokenManager.userId);
    			conn.commit();
    			JOptionPane.showMessageDialog(null, "Detail Saved");
    			JOptionPane.showMessageDialog(null, "Go to "+ com.ipssi.rfid.constant.Type.WorkStationType.getString(tpRecord.getNextStepType()));
                clearInputs();
                
    		}
    		
    	}catch(Exception ex){
    		ex.printStackTrace();
    		destroyIt = true;
    	}finally{
    		try{
    			DBConnectionPool.returnConnectionToPoolNonWeb(conn, destroyIt);
    		}catch(Exception ex){
    			ex.printStackTrace();
    		}
    	}
    }
    
    private void vehicleNameAction() {
    	Connection conn = null;
    	boolean destroyIt = false;
    	try{
    		conn = DBConnectionPool.getConnectionFromPoolNonWeb();
        System.out.println("######Vehicle Name Enter Press #####");
        setBackgroundWhite();
        String vehName = vehicleName.getText();
        if (Utils.isNull(vehName)) {
            JOptionPane.showMessageDialog(null, "Please Enter Vehicle !!!");
            vehicleName.setTextBackground(UIConstant.focusPanelColor);
            return;
        } else {
        	vehName = CacheTrack.standardizeName(vehName);
            Pair<Integer, String> vehPair = TPRInformation.getVehicle(conn, null, vehName);
            System.out.println("###### TPRInformation.getVehicle(conn, null, vehicleName.getText()) Get vehicle Information #####");
            clearInputs();
            isEnterPressed = true;
            if (vehPair != null) {
                m_vehicleId = vehPair.first;
                isNewVehicle = false;
            } else {
                Object[] options = {"  Re-Enter  ", "  Continue  "};
                String msg = "Invalid Vehicle Name";
                // new CheckVehicleDialog(new javax.swing.JFrame(), true);
                int responseVehicleDialog = ConfirmationDialog.getDialogBox(new javax.swing.JFrame(), true, options, msg);
                if (responseVehicleDialog == reEnter) {
                    vehicleName.setText("");
                    isNewVehicle = false;
                    isEnterPressed = false;
                    return;
                } else if (responseVehicleDialog == contiNue) {
                    boolean isInsert = GateInDao.InsertNewVehicle(conn, vehName, TokenManager.userId);
                    vehPair = TPRInformation.getVehicle(conn, null, vehName);
                    if (vehPair != null) {
                        m_vehicleId = vehPair.first;
                    }
                    isNewVehicle = true;
                    
                    getFocus();
                }
            }
            
            ////----- new approach-------------////
            RFIDDataProcessor rfidProcessor = new RFIDDataProcessor(0, 
            TokenManager.currWorkStationType, TokenManager.currWorkStationId, TokenManager.userId);
            rfidProcessor.setTagListener(new TAGListener() {
                     
                     @Override
                     public void showMessage(String message) {
                           // TODO Auto-generated method stub
                    	 JOptionPane.showMessageDialog(null, message);
                           
                     }
                     
                     @Override
                     public void setVehicleName(String vehicleName) {
                           // TODO Auto-generated method stub
                           
                     }
                     
                     @Override
                     public int promptMessage(String message, Object[] options) {
                           // TODO Auto-generated method stub
                           return 0;
                     }
                     
                     
                     
                     @Override
                     public void manageTag(Connection conn, Token token, TPRecord _tpr, TPStep tps, TPRBlockManager _tprBlockManager) {
                           // TODO Auto-generated method stub
                       tpRecord = _tpr;
                       tprBlockManager = _tprBlockManager;
                       entryTime = new Date();
                       toggleVehicle(false);
                       if(tpRecord != null && tpRecord.getEarliestRegIn() == null)
                           tpRecord.setEarliestRegIn(entryTime);
                       initDetails(conn, tpRecord.getVehicleName(), m_vehicleId, isNewVehicle, tpRecord);
                       if(tpRecord.getMaterialCat() == com.ipssi.rfid.constant.Type.TPRMATERIAL.COAL){
                       	challanInfo.setVisible(true);
                       }
                       materialInfo.setText(com.ipssi.rfid.constant.Type.TPRMATERIAL.getStr(tpRecord.getMaterialCat()));
                       transporter.requestFocusInWindow();
                     }

                     @Override
                     public void clearVehicleName() {
                           // TODO Auto-generated method stub
                    	 
                     }
                     
                     @Override
                     public void clear(boolean clearToken, Connection conn) {
                           // TODO Auto-generated method stub
                          // clear();
                    	 vehicleName.setText("");
                    	 getFocus();
                         clearInputs();
                     }

					@Override
					public int mergeData(long sessionId, String epc,
							RFIDHolder rfidHolder) {
						// TODO Auto-generated method stub
						return 0;
					}
                });
            rfidProcessor.getTprecord(vehName, m_vehicleId, false, true);
            
        }
        }catch(Exception ex){
    		ex.printStackTrace();
    		destroyIt = true;
    	}finally{
    		try{
    			DBConnectionPool.returnConnectionToPoolNonWeb(conn, destroyIt);
    		}catch(Exception ex){
    			ex.printStackTrace();
    		}
    	}
    }
    private void toggleVehicle(boolean editable) {
    	if(editable){
    		//vehicleName.setEnabled(true);
    		vehicleName.setEditable(true);
    		vehicleName.setTextEditable(true);
    		vehicleName.setFocusable(true);
    		vehicleName.requestFocusInWindow();
    		vehicleName.setTextBackground(UIConstant.focusPanelColor);
    		vehicleName.setText("");
    		vehicleName.setTextBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
    	}else{
    		//vehicleName.setEnabled(false);
    		vehicleName.setEditable(false);
    		vehicleName.setTextEditable(false);
    		vehicleName.setTextBorder(null);
    		vehicleName.setBackground(Color.WHITE);
    	}
        //  transporter.setFocusable(true);
        // transporter.setEnabled(true);
    }

   private void IssueAction() {
	   Connection conn = null;
	   boolean destroyIt = false;
	   try{
		   conn = DBConnectionPool.getConnectionFromPoolNonWeb();
        if (Utils.isNull(vehicleName.getText())) {
            JOptionPane.showMessageDialog(null, " Please enter valid vehicle name");
            vehicleName.requestFocus();
            vehicleName.requestFocusInWindow();
            return;
        } else if (!isEnterPressed) {
            JOptionPane.showMessageDialog(null, "Please Search by Vehicle Name");
            vehicleName.requestFocusInWindow();
            vehicleName.setTextBackground(UIConstant.focusPanelColor);
            return;
        } else if (m_vehicleId == Misc.getUndefInt()) {
            JOptionPane.showMessageDialog(null, " Please enter valid vehicle name");
            vehicleName.requestFocus();
            vehicleName.requestFocusInWindow();
            return;
        } else if (transporter.getSelectedIndex() == 0) {
            JOptionPane.showMessageDialog(null, "Please Select Transporter");
            transporter.requestFocusInWindow();
            return;
        } else if (!Utils.isNumericDigit(rcTare.getText())) {
            JOptionPane.showMessageDialog(null, "Please Enter Valid tare");
            rcTare.requestFocusInWindow();
            return;
        } else if (!Utils.isNumericDigit(rcGross.getText())) {
            JOptionPane.showMessageDialog(null, "Please Enter valid rcGross");
            rcGross.requestFocusInWindow();
            return;
        } 
        else {
                if (m_vehicleId == Misc.getUndefInt()) {
                    Pair<Integer, String> vehPair = TPRInformation.getVehicle(conn, null, vehicleName.getText());
                    if (vehPair != null) {
                        m_vehicleId = vehPair.first;
                    }
                }
                isTagIssue = issueTag(conn, m_vehicleId, CacheTrack.standardizeName(vehicleName.getText().trim()), Misc.getParamAsDouble(rcGross.getText()), Misc.getParamAsDouble(rcTare.getText()), transporter.getSelectedIndex(), TokenManager.userId);
                if (isTagIssue == 0) {
                    JOptionPane.showMessageDialog(null, "Card Issued");
                    ownerName.setBackground(UIConstant.focusPanelColor);
                    ownerName.requestFocusInWindow();
                    isTagIssue = Results.Questions.YES;
                    if(tprBlockManager != null)
                    	tprBlockManager.addQuestions(new TPSQuestionDetail(TPRQuestion.isTagRead, isTagIssue));
                    updateVehicleBlockStatus(conn, m_vehicleId, tpRecord);
                    /*if(GateInDao.updateTPRQuestion(conn, tpRecord == null ? Misc.getUndefInt() : tpRecord.getTprId(), TokenManager.currWorkStationType,TPRQuestion.isTagRead, Results.Questions.YES, TokenManager.userId)){
                    	conn.commit();
                    }*/
                } else if (isTagIssue == 1) {
                    JOptionPane.showMessageDialog(null, "Card Not Issued");
                } else if (isTagIssue == 2) {
                    JOptionPane.showMessageDialog(null, "Reader Not Connected");
                } else if (isTagIssue == 3){
                	JOptionPane.showMessageDialog(null, "Multiple Tags On Reader");
                }else {
                    JOptionPane.showMessageDialog(null, "Tag not read");
                }
        }
        }catch(Exception ex){
        	JOptionPane.showMessageDialog(null, UIConstant.SAVE_FAILER_MESSAGE);
    		ex.printStackTrace();
    		destroyIt = true;
    	}finally{
    		try{
    			DBConnectionPool.returnConnectionToPoolNonWeb(conn, destroyIt);
    		}catch(Exception ex){
    			ex.printStackTrace();
    		}
    	}
    }

 
private void updateQuestionInfo(Connection conn){//Connection conn,int instructionId, boolean isComplete) {
    	//String result = isComplete? "Yes" : "No";
    	if(tprBlockManager == null)
    		return;
		boolean isBlockForTag = false;
		boolean isBlockForDriver = false;
		boolean isBlockForChallan = false;
		boolean isBlockForVehicleInfo = false;
		boolean isBlockForPaper = false;
		boolean isBlockForMultipleTPR = false;
		
		
    	try{
    		if(tpRecord != null && !Misc.isUndef(tpRecord.getTprId())){
    			isBlockForMultipleTPR = tprBlockManager.isBlockForInstruction(com.ipssi.rfid.constant.Type.BlockingInstruction.BLOCK_DUETO_MULTIPLE_TPR);
    			isBlockForTag = tprBlockManager.isBlockForInstruction(com.ipssi.rfid.constant.Type.BlockingInstruction.BLOCK_DUETO_TAG_NOT_READ);
    			isBlockForDriver = tprBlockManager.isBlockForInstruction(com.ipssi.rfid.constant.Type.BlockingInstruction.BLOCK_DUETO_FINGER_NOT_VERIFIED)
    					|| tprBlockManager.isBlockForInstruction(com.ipssi.rfid.constant.Type.BlockingInstruction.BLOCK_DUETO_FINGER_NOT_CAPTURED)
    					|| tprBlockManager.isBlockForInstruction(com.ipssi.rfid.constant.Type.BlockingInstruction.BLOCK_DUETO_DRIVER_NOT_EXIST)
    					|| tprBlockManager.isBlockForInstruction(com.ipssi.rfid.constant.Type.BlockingInstruction.BLOCK_DUETO_FINGER_NOT_EXIST)
    					|| tprBlockManager.isBlockForInstruction(com.ipssi.rfid.constant.Type.BlockingInstruction.BLOCK_DUETO_DRIVER_BLACKLISTED);
    			isBlockForChallan = tprBlockManager.isBlockForInstruction(com.ipssi.rfid.constant.Type.BlockingInstruction.BLOCK_DUETO_CHALLAN_NOT_EXIST);
    			isBlockForVehicleInfo = tprBlockManager.isBlockForInstruction(com.ipssi.rfid.constant.Type.BlockingInstruction.BLOCK_DUETO_VEHICLE_NOT_EXIST);
    			isBlockForPaper = tprBlockManager.isBlockForInstruction(com.ipssi.rfid.constant.Type.BlockingInstruction.BLOCK_DUETO_FITNESS_EXPIRED)
    					|| tprBlockManager.isBlockForInstruction(com.ipssi.rfid.constant.Type.BlockingInstruction.BLOCK_DUETO_ROAD_PERMIT_EXPIRED)
    					|| tprBlockManager.isBlockForInstruction(com.ipssi.rfid.constant.Type.BlockingInstruction.BLOCK_DUETO_INSURANCE_EXPIRED)
    					|| tprBlockManager.isBlockForInstruction(com.ipssi.rfid.constant.Type.BlockingInstruction.BLOCK_DUETO_POLUTION_EXPIRED);
    		}
    		String tagStr = "";
    		String driverStr = "";
    		String challanStr = "";
    		String vehicleInfoStr = "";
    		String documentStr = "";
    		String multipleTPRStr = "";
    		
    		if(false){
    			//
    			tagStr = vehBean != null && Utils.isNull(vehBean.getEpcId()) ? "No":"Yes";
    			BioMatricBean driverBean = GateInDao.getDriverDetails(conn, tpRecord.getDriverId()+"", "driverId");
    			driverStr = driverBean  != null && (Misc.isUndef(driverBean.getDriverId()) || driverBean.getStatus() == 10 || (driverBean.getCaptureFirstTemplate1() == null && driverBean.getCaptureSecondTemplate2() == null) ) ? "No":"Yes"; 
    			vehicleInfoStr = vehBean != null && ( vehicleExtentedBean == null || vehicleExtentedBean.getExtendedStatus() == 100) ? "No":"Yes"; 
    			challanStr = tpRecord != null && Utils.isNull(tpRecord.getChallanNo())? "No":"Yes";
    			documentStr = vehBean != null 
    					          && 
    					          ( 
    					          vehicleExtentedBean == null 
    					          || (vehicleExtentedBean.getPermit1_number_expiry() == null ||  (System.currentTimeMillis() - vehicleExtentedBean.getPermit1_number_expiry().getTime()) > TokenManager.fitnessExpiaryThreshold)
    					          || (vehicleExtentedBean.getPermit2_number_expiry() == null ||  (System.currentTimeMillis() - vehicleExtentedBean.getPermit2_number_expiry().getTime()) > TokenManager.roadPermitExpiaryThreshold )
    					          || (vehicleExtentedBean.getInsurance_number_expiry() == null ||  (System.currentTimeMillis() - vehicleExtentedBean.getInsurance_number_expiry().getTime()) > TokenManager.insauranceExpiaryThreshold)
    					          || (vehicleExtentedBean.getDate_field1() == null ||  (System.currentTimeMillis() - vehicleExtentedBean.getDate_field1().getTime()) > TokenManager.polutionExpiaryThreshold))? "No":"Yes";
    		}
    		
    		
    		if(isBlockForTag)
    			rfTagInfo.setForeground(Color.RED);
    		if(isBlockForDriver)
    			driverInformation.setForeground(Color.RED);
    		if(isBlockForVehicleInfo)
    			vehicleInfor.setForeground(Color.RED);
    		if(isBlockForChallan)
    			challanRecord.setForeground(Color.RED);
    		if(isBlockForPaper)
    			documentInfo.setForeground(Color.RED);
    		if(isBlockForMultipleTPR)
    			multipleTprInfo.setForeground(Color.RED);
    		rfTagInfo.setText(tagStr + (isBlockForTag ? "(Blocked)":"(Not Blocked)"));
    		driverInformation.setText(driverStr + (isBlockForDriver ? "(Blocked)":"(Not Blocked)"));
    		vehicleInfor.setText(vehicleInfoStr + (isBlockForVehicleInfo ? "(Blocked)":"(Not Blocked)"));
    		challanRecord.setText(challanStr + (isBlockForChallan ? "(Blocked)":"(Not Blocked)"));
    		documentInfo.setText(documentStr + (isBlockForPaper ? "(Blocked)":"(Not Blocked)"));
    		multipleTprInfo.setText(multipleTPRStr + (isBlockForMultipleTPR ? "(Blocked)":"(Not Blocked)"));
    		
    	}catch(Exception ex){
    		ex.printStackTrace();
    	}
    }
   
	/*private void initQuestion(){
		if(tprBlockManager == null)
			return;
		
        tprBlockManager.addQuestions(new TPSQuestionDetail(questionId, answerId));
        tprBlockManager.addQuestions(new TPSQuestionDetail(questionId, answerId));
        tprBlockManager.addQuestions(new TPSQuestionDetail(questionId, answerId));
        tprBlockManager.addQuestions(new TPSQuestionDetail(questionId, answerId));
        tprBlockManager.addQuestions(new TPSQuestionDetail(questionId, answerId));
        tprBlockManager.addQuestions(new TPSQuestionDetail(questionId, answerId));
		TPSQuestionDetail questionTagIssue = tprBlockManager.getTPRQuestion(com.ipssi.rfid.constant.Type.BlockingInstruction.BLOCK_DUETO_TAG_NOT_READ);
		if(quesAnsList != null)
			quesAnsList.put(questionTagIssue.getQuestionId(), questionTagIssue.getAnswerId());
		
		TPSQuestionDetail questionFingerVarified = tprBlockManager.getTPRQuestion(com.ipssi.rfid.constant.Type.BlockingInstruction.BLOCK_DUETO_FINGER_NOT_VERIFIED);
		if(questionFingerVarified != null)
			quesAnsList.put(questionFingerVarified.getQuestionId(), questionFingerVarified.getAnswerId());
		
		TPSQuestionDetail questionFingerCaptured = tprBlockManager.getTPRQuestion(com.ipssi.rfid.constant.Type.BlockingInstruction.BLOCK_DUETO_FINGER_NOT_CAPTURED);
		if(questionFingerCaptured != null)
			quesAnsList.put(questionFingerCaptured.getQuestionId(), questionFingerCaptured.getAnswerId());
		
		TPSQuestionDetail questionChallanExist = tprBlockManager.getTPRQuestion(com.ipssi.rfid.constant.Type.BlockingInstruction.BLOCK_DUETO_CHALLAN_NOT_EXIST);
		if(questionChallanExist != null)
			quesAnsList.put(questionChallanExist.getQuestionId(), questionChallanExist.getAnswerId());
		
		TPSQuestionDetail questionVehicleExist = tprBlockManager.getTPRQuestion(com.ipssi.rfid.constant.Type.BlockingInstruction.BLOCK_DUETO_VEHICLE_NOT_EXIST);
		if(questionVehicleExist != null)
			quesAnsList.put(questionVehicleExist.getQuestionId(), questionVehicleExist.getAnswerId());
		
		TPSQuestionDetail questionFitness = tprBlockManager.getTPRQuestion(com.ipssi.rfid.constant.Type.BlockingInstruction.BLOCK_DUETO_FITNESS_EXPIRED);
		if(questionFitness != null)
			quesAnsList.put(questionFitness.getQuestionId(), questionFitness.getAnswerId());
		
		TPSQuestionDetail questionRoadPermit = tprBlockManager.getTPRQuestion(com.ipssi.rfid.constant.Type.BlockingInstruction.BLOCK_DUETO_ROAD_PERMIT_EXPIRED);
		if(questionRoadPermit != null)
			quesAnsList.put(questionRoadPermit.getQuestionId(), questionRoadPermit.getAnswerId());
		
		TPSQuestionDetail questionInsurance = tprBlockManager.getTPRQuestion(com.ipssi.rfid.constant.Type.BlockingInstruction.BLOCK_DUETO_INSURANCE_EXPIRED);
		if(questionInsurance != null)
			quesAnsList.put(questionInsurance.getQuestionId(), questionInsurance.getAnswerId());
		
		TPSQuestionDetail questionPolution = tprBlockManager.getTPRQuestion(com.ipssi.rfid.constant.Type.BlockingInstruction.BLOCK_DUETO_POLUTION_EXPIRED);if(quesAnsList != null)
		if(questionPolution != null)
			quesAnsList.put(questionPolution.getQuestionId(), questionPolution.getAnswerId());
	
	}*/
	private HashMap<Integer, Integer> getQuestionIdList() {
		HashMap<Integer, Integer> quesAnsList = new HashMap<Integer, Integer>();
		if(tprBlockManager != null){
			TPSQuestionDetail questionTagIssue = tprBlockManager.getTPRQuestion(com.ipssi.rfid.constant.Type.BlockingInstruction.BLOCK_DUETO_TAG_NOT_READ);
    		if(questionTagIssue != null)
    			quesAnsList.put(questionTagIssue.getQuestionId(), questionTagIssue.getAnswerId());
			
    		TPSQuestionDetail questionFingerVarified = tprBlockManager.getTPRQuestion(com.ipssi.rfid.constant.Type.BlockingInstruction.BLOCK_DUETO_FINGER_NOT_VERIFIED);
			if(questionFingerVarified != null)
    			quesAnsList.put(questionFingerVarified.getQuestionId(), questionFingerVarified.getAnswerId());
			
			TPSQuestionDetail questionFingerCaptured = tprBlockManager.getTPRQuestion(com.ipssi.rfid.constant.Type.BlockingInstruction.BLOCK_DUETO_FINGER_NOT_CAPTURED);
			if(questionFingerCaptured != null)
    			quesAnsList.put(questionFingerCaptured.getQuestionId(), questionFingerCaptured.getAnswerId());
    		
			TPSQuestionDetail questionChallanExist = tprBlockManager.getTPRQuestion(com.ipssi.rfid.constant.Type.BlockingInstruction.BLOCK_DUETO_CHALLAN_NOT_EXIST);
    		if(questionChallanExist != null)
    			quesAnsList.put(questionChallanExist.getQuestionId(), questionChallanExist.getAnswerId());
    		
    		TPSQuestionDetail questionVehicleExist = tprBlockManager.getTPRQuestion(com.ipssi.rfid.constant.Type.BlockingInstruction.BLOCK_DUETO_VEHICLE_NOT_EXIST);
    		if(questionVehicleExist != null)
    			quesAnsList.put(questionVehicleExist.getQuestionId(), questionVehicleExist.getAnswerId());
    		
    		TPSQuestionDetail questionFitness = tprBlockManager.getTPRQuestion(com.ipssi.rfid.constant.Type.BlockingInstruction.BLOCK_DUETO_FITNESS_EXPIRED);
    		if(questionFitness != null)
    			quesAnsList.put(questionFitness.getQuestionId(), questionFitness.getAnswerId());
    		
    		TPSQuestionDetail questionRoadPermit = tprBlockManager.getTPRQuestion(com.ipssi.rfid.constant.Type.BlockingInstruction.BLOCK_DUETO_ROAD_PERMIT_EXPIRED);
    		if(questionRoadPermit != null)
    			quesAnsList.put(questionRoadPermit.getQuestionId(), questionRoadPermit.getAnswerId());
    		
    		TPSQuestionDetail questionInsurance = tprBlockManager.getTPRQuestion(com.ipssi.rfid.constant.Type.BlockingInstruction.BLOCK_DUETO_INSURANCE_EXPIRED);
    		if(questionInsurance != null)
    			quesAnsList.put(questionInsurance.getQuestionId(), questionInsurance.getAnswerId());
    		
    		TPSQuestionDetail questionPolution = tprBlockManager.getTPRQuestion(com.ipssi.rfid.constant.Type.BlockingInstruction.BLOCK_DUETO_POLUTION_EXPIRED);if(quesAnsList != null)
    		if(questionPolution != null)
    			quesAnsList.put(questionPolution.getQuestionId(), questionPolution.getAnswerId());
		}
		return quesAnsList;
	}
	private boolean InsertTPRQuestionDetails(Connection conn, int stepId) throws Exception {
		HashMap<Integer, Integer> quesAnsList = getQuestionIdList();
		boolean isInsert = true;
		if(tpRecord == null || Misc.isUndef(tpRecord.getTprId()))
			return false;
		for (Map.Entry<Integer, Integer> entry : quesAnsList.entrySet()) {
			Integer questionId = entry.getKey();
			Integer answerId = entry.getValue();
			GateInDao.updateTPRQuestion(conn, tpRecord.getTprId(), TokenManager.currWorkStationType, questionId, answerId, TokenManager.userId);
		}
		return isInsert;
	}

   	private void changeToOverride(boolean flag){
		if(flag){
			finish.setText("Request Override");
		}else{
			finish.setText("Finish");
		}
	}
   	private int InsertTPRStep(Connection conn, boolean isDeny) throws Exception {

        if (tpStep == null || Misc.isUndef(tpStep.getId())) {
            System.out.println("[Manual Creted TpStep]");
            tpStep = new TPStep();
            tpStep.setEntryTime(entryTime);
            tpStep.setExitTime(new Date());
            tpStep.setTprId(tpRecord.getTprId());
            tpStep.setUpdatedBy(TokenManager.userId);
            tpStep.setVehicleId(tpRecord.getVehicleId());
            tpStep.setWorkStationId(TokenManager.currWorkStationId);
            tpStep.setWorkStationType(TokenManager.currWorkStationType);
            tpStep.setUpdatedOn(new Date());
            tpStep.setSaveStatus(isDeny ? TPStep.REQUEST_OVERRIDE : TPStep.SAVE_AND_CONTINUE);
            RFIDMasterDao.insert(conn, tpStep,false);
            RFIDMasterDao.insert(conn, tpStep,true);
            
        } else {
            //tpStep.setTprId(tprRecord.getTprId());
            long currTimeServerMillis = System.currentTimeMillis();
            tpStep.setExitTime(new Date(currTimeServerMillis));
            tpStep.setUpdatedOn(new Date(currTimeServerMillis));
            tpStep.setSaveStatus(isDeny ? TPStep.REQUEST_OVERRIDE : TPStep.SAVE_AND_CONTINUE);
            RFIDMasterDao.update(conn, tpStep,false);
            RFIDMasterDao.update(conn, tpStep,true);
            
        }

        return tpStep.getId();
    }
   	
    private void syncFingerPrintDataFromServer() {
        if (fingerPrintSyncService == null) {
            System.out.println("TokenManager.currWorkStationId : " + TokenManager.currWorkStationId);
            fingerPrintSyncService = new SyncFingerPrint();
            //fingerPrintSyncService.setSingleFullSyncOnly(true);
//            isDataSyncRunning = true;
            fingerPrintSyncService.setHandler(new SynServiceHandler() {
                @Override
                public void onChange(boolean onChange) {
                    /*if (onChange) {
                        fingerInstruction.setText("Sync Service Running");
                    } else {
                        fingerInstruction.setText("");
                    }*/
                    isFingerSyncRunning = onChange;
                }

				@Override
				public void notifyText(String msg) {
					// TODO Auto-generated method stub
//					fingerInstruction.setText(msg);
				}

				@Override
				public void setDeviceId(String msg) {
					// TODO Auto-generated method stub
					
				}

				@Override
				public void setCapacity(int capacity) {
					// TODO Auto-generated method stub
					
				}

				@Override
				public void setEnrolled(int enrolled) {
					// TODO Auto-generated method stub
					
				}

				@Override
				public void clearingData() {
					// TODO Auto-generated method stub
//					fingerInstruction.setText("Clearing Data....");
				}

				@Override
				public void init(String deviceId, int capacity, int enrolled) {
					// TODO Auto-generated method stub
					
				}
            });
            fingerPrintSyncService.start();
        }
    }
}
