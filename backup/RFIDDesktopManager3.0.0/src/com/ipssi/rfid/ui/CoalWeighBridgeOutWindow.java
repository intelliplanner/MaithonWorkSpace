
package com.ipssi.rfid.ui;

import java.awt.Color;
import java.awt.event.KeyEvent;
import java.io.IOException;
import java.sql.Connection;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.ButtonGroup;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;

import com.ipssi.common.ds.rule.GpsPlusViolations;
import com.ipssi.common.ds.rule.ResultEnum;
import com.ipssi.gen.utils.CacheTrack;
import com.ipssi.gen.utils.DBConnectionPool;
import com.ipssi.gen.utils.Misc;
import com.ipssi.gen.utils.Pair;
import com.ipssi.rfid.beans.ComboItem;
import com.ipssi.rfid.beans.RFIDHolder;
import com.ipssi.rfid.beans.TPRecord;
import com.ipssi.rfid.beans.TPSQuestionDetail;
import com.ipssi.rfid.beans.TPStep;
import com.ipssi.rfid.beans.Token;
import com.ipssi.rfid.constant.Status;
import com.ipssi.rfid.constant.UIConstant;
import com.ipssi.rfid.database.DropDownValues;
import com.ipssi.rfid.database.GateInDao;
import com.ipssi.rfid.db.RFIDMasterDao;
import com.ipssi.rfid.integration.Barrier;
import com.ipssi.rfid.integration.Clock;
import com.ipssi.rfid.integration.WeighBridge;
import com.ipssi.rfid.integration.WeighBridgeListener;
import com.ipssi.rfid.processor.TPRBlockManager;
import com.ipssi.rfid.processor.TPRBlockStatusHelper;
import com.ipssi.rfid.processor.TPRInformation;
import com.ipssi.rfid.processor.TokenManager;
import com.ipssi.rfid.processor.Utils;
import com.ipssi.rfid.readers.RFIDDataHandler;
import com.ipssi.rfid.readers.TAGListener;
import com.ipssi.rfid.ui.AutoCompleteCombo.ComboKeyEvent;

public class CoalWeighBridgeOutWindow extends javax.swing.JFrame {

	private static final long serialVersionUID = 1L;
	
	//flags
	private int contiNue = 1;
	private int reEnter = 0;

	private ButtonGroup challanCollected = new ButtonGroup();


	private RFIDDataHandler rfidHandler;
	private WeighBridge weighBridge = null;

	private int readerId = 0;

	private TPRecord tprRecord = null;
	private Token token = null;
	private RFIDHolder data = null;
	private TPStep tpStep = null;

	private Date entryTime = null;
	private Date exitTime = null;
	private GpsPlusViolations gpv = null;

	private boolean isVehicleExist = false;
	private boolean vehicleBlackListed = false;
	private boolean isTagRead = false;
	private boolean isRequestOverride = false;
	private int qcMark = Misc.getUndefInt();
	private double Party_Net_Wt = Misc.getUndefDouble();
	private double Wb_Net_Wt = Misc.getUndefDouble();
	private double captureWeight = Misc.getUndefDouble();
	private TPRBlockManager tprBlockManager = null;
	private ArrayList<Pair<Long, Integer>> readings = null;
	private DisconnectionDialog disconnectionDialog = new DisconnectionDialog("Weigh Bridge Disconnected please check connection.....");

	private boolean isManual = false;
	public CoalWeighBridgeOutWindow() throws IOException {
		initComponents();
		labelWeighment.setText(TokenManager.weight_val);
//		gpsLocation.setText("1234012345678901234567890");
//      gpsTime.setText("asdfghjkl;wertyuiod");
		this.setExtendedState(this.getExtendedState()
				| this.MAXIMIZED_BOTH);
		this.setTitle(UIConstant.formTitle);

		challanCollected.add(paperCollectedNo);
		challanCollected.add(paperCollectedYes);
		challanCollected.add(paperCollectedNC);
		Clock.startClock("WbOut");
		getFocus();
		if(TokenManager.isManualEntry.containsKey(TokenManager.currWorkStationId)){
            int val  = TokenManager.isManualEntry.get(TokenManager.currWorkStationId);
            if(val == 1){
                 isManual   = true;
            }else {
                 isManual = false;
                 manualEntryButton.setEnabled(false);
            }
        }else{
                isManual = false;
                manualEntryButton.setEnabled(false);
        }
		start();
		partyGrossWt.setVisible(false);
		jLabel17.setVisible(false);
		partyTareWt.setVisible(false);
		jLabel19.setVisible(false);
		
		
//		labelWeighment.setText("10500");
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		jPanel1 = new javax.swing.JPanel();
		jPanel2 = new javax.swing.JPanel();
		jLabel1 = new javax.swing.JLabel();
		jLabel6 = new javax.swing.JLabel();
		username = new javax.swing.JLabel();
		button1 = new java.awt.Button();
		jLabel20 = new javax.swing.JLabel();
		jLabel15 = new javax.swing.JLabel();
		jPanel4 = new javax.swing.JPanel();
		jLabel7 = new javax.swing.JLabel();
		jLabel8 = new javax.swing.JLabel();
		jLabel10 = new javax.swing.JLabel();
		jLabel13 = new javax.swing.JLabel();
		jLabel14 = new javax.swing.JLabel();
		challanNo = new javax.swing.JLabel();
		lrNo = new javax.swing.JLabel();
		rrNo = new javax.swing.JLabel();
		roadpermitNo = new javax.swing.JLabel();
		jLabel17 = new javax.swing.JLabel();
		jLabel23 = new javax.swing.JLabel();
		jLabel29 = new javax.swing.JLabel();
        gpsTime = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        gpsLocation = new javax.swing.JLabel();
        
		transporter = new javax.swing.JLabel();
		gateInTime = new javax.swing.JLabel();
		jLabel3 = new javax.swing.JLabel();
		override = new javax.swing.JLabel();
		partyGrossWt = new javax.swing.JLabel();
		jLabel2 = new javax.swing.JLabel();
		vehicleName = new AutoCompleteCombo();
		jPanel3 = new javax.swing.JPanel();
		labelWeighment = new javax.swing.JLabel();
		jPanel5 = new javax.swing.JPanel();
		jLabel16 = new javax.swing.JLabel();
		jLabel18 = new javax.swing.JLabel();
		paperCollectedPanel = new javax.swing.JPanel();
		paperCollectedYes = new javax.swing.JCheckBox();
		paperCollectedNo = new javax.swing.JCheckBox();
		paperCollectedNC = new javax.swing.JCheckBox();
		qcDone = new javax.swing.JComboBox();
		jLabel4 = new javax.swing.JLabel();
		jLabel5 = new javax.swing.JLabel();
		jLabel25 = new javax.swing.JLabel();
		AcceptedNetWt = new javax.swing.JLabel();
		jLabel26 = new javax.swing.JLabel();
		jLabel27 = new javax.swing.JLabel();
		totalShort = new javax.swing.JLabel();
		tareShort = new javax.swing.JLabel();
		partyNetWt = new javax.swing.JLabel();
		wbNetWt = new javax.swing.JLabel();
		manualEntryButton = new javax.swing.JButton();
		saveAndOpen = new javax.swing.JButton();
		clear = new javax.swing.JButton();
		jPanel6 = new javax.swing.JPanel();
		jLabel11 = new javax.swing.JLabel();
		jLabel12 = new javax.swing.JLabel();
		jLabel19 = new javax.swing.JLabel();
		jLabel9 = new javax.swing.JLabel();
		jLabel21 = new javax.swing.JLabel();
		jLabel22 = new javax.swing.JLabel();
		jLabel24 = new javax.swing.JLabel();
		mines = new javax.swing.JLabel();
		grade = new javax.swing.JLabel();
		challanDate = new javax.swing.JLabel();
		lrdate = new javax.swing.JLabel();
		mineralPermitNo = new javax.swing.JLabel();
		wbInTime = new javax.swing.JLabel();
		partyTareWt = new javax.swing.JLabel();
		jLabel28 = new javax.swing.JLabel();
		grossWt = new javax.swing.JLabel();
		jButton3 = new javax.swing.JButton();
		jButton4 = new javax.swing.JButton();
		digitalClock = new javax.swing.JLabel();
		jPanel7 = new javax.swing.JPanel();
		blocking_reason = new javax.swing.JLabel();

		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

		jPanel1.setBackground(new java.awt.Color(255, 255, 255));

		jPanel2.setBackground(java.awt.SystemColor.controlLtHighlight);

		jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/ipssi/rfid/ui/intelliplanner.png"))); // NOI18N

		jLabel6.setFont(UIConstant.subHeadingFont);
		jLabel6.setText("Weigh Bridge OUT");

		username.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);

		button1.setBackground(new java.awt.Color(255, 255, 255));
		button1.setFocusable(false);
		button1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
		button1.setForeground(new java.awt.Color(0, 102, 153));
		button1.setLabel("Sign Out");
		button1.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				button1ActionPerformed(evt);
			}
		});

		jLabel15.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/ipssi/rfid/ui/cover_01_right_top.gif"))); // NOI18N

		javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
		jPanel2.setLayout(jPanel2Layout);
		jPanel2Layout.setHorizontalGroup(
				jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(jPanel2Layout.createSequentialGroup()
						.addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
						.addGap(350, 350, 350)
						.addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 220, Short.MAX_VALUE)
						.addComponent(username, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addComponent(button1, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addComponent(jLabel15)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addComponent(jLabel20))
				);
		jPanel2Layout.setVerticalGroup(
				jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
				.addComponent(jLabel20, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
				.addGroup(jPanel2Layout.createSequentialGroup()
						.addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
								.addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
										.addContainerGap()
										.addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
												.addComponent(username, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
												.addComponent(button1, javax.swing.GroupLayout.DEFAULT_SIZE, 38, Short.MAX_VALUE)))
												.addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
												.addComponent(jLabel15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
												.addContainerGap())
				);

		jPanel4.setBackground(new java.awt.Color(255, 255, 255));

		jLabel7.setFont(UIConstant.labelFont);
		jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		jLabel7.setText("Transporter:");

		jLabel8.setFont(UIConstant.labelFont);
		jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		jLabel8.setText("Challan #:");

		jLabel10.setFont(UIConstant.labelFont);
		jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		jLabel10.setText("LR #:");

		jLabel13.setFont(UIConstant.labelFont);
		jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		jLabel13.setText("DO / RR #:");

		jLabel14.setFont(UIConstant.labelFont);
		jLabel14.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		jLabel14.setText("Road Permit #:");

		challanNo.setFont(UIConstant.textFont);
		challanNo.setForeground(UIConstant.textFontColor);

		lrNo.setFont(UIConstant.textFont);
		lrNo.setForeground(UIConstant.textFontColor);

		rrNo.setFont(UIConstant.textFont);
		rrNo.setForeground(UIConstant.textFontColor);

		roadpermitNo.setFont(UIConstant.textFont);
		roadpermitNo.setForeground(UIConstant.textFontColor);

		jLabel17.setFont(UIConstant.labelFont);
		jLabel17.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		jLabel17.setText("Party Gross Wt:");

		jLabel23.setFont(UIConstant.labelFont);
		jLabel23.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		jLabel23.setText("Gate In Time:");

		transporter.setFont(UIConstant.textFont);
		transporter.setForeground(UIConstant.textFontColor);

		gateInTime.setFont(UIConstant.textFont);
		gateInTime.setForeground(UIConstant.textFontColor);

		jLabel3.setFont(UIConstant.labelFont);
		jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		jLabel3.setText("Overrides?");

		override.setFont(UIConstant.textFont);
		override.setForeground(UIConstant.textFontColor);

		partyGrossWt.setFont(UIConstant.textFont);
		partyGrossWt.setForeground(UIConstant.textFontColor);

		 jLabel29.setFont(UIConstant.labelFont);
	        jLabel29.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
	        jLabel29.setText("GPS Time:");

	        gpsTime.setFont(UIConstant.textFont);
	        gpsTime.setForeground(UIConstant.textFontColor);
		
		javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
		jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
                jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel4Layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel23, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel14, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel13, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel17, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 160, Short.MAX_VALUE)
                        .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel29, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel4Layout.createSequentialGroup()
                            .addComponent(lrNo, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addContainerGap(20, Short.MAX_VALUE))
                        .addComponent(override, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel4Layout.createSequentialGroup()
                            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(challanNo, javax.swing.GroupLayout.DEFAULT_SIZE, 225, Short.MAX_VALUE)
                                .addComponent(rrNo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(roadpermitNo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(transporter, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(gateInTime, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(partyGrossWt, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(gpsTime, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGap(0, 0, Short.MAX_VALUE))))
            );
            jPanel4Layout.setVerticalGroup(
                jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel4Layout.createSequentialGroup()
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(override, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(transporter, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(rrNo, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(partyGrossWt, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel4Layout.createSequentialGroup()
                            .addGap(7, 7, 7)
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel4Layout.createSequentialGroup()
                            .addGap(8, 8, 8)
                            .addComponent(challanNo, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lrNo, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(roadpermitNo, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(8, 8, 8)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabel23, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                        .addComponent(gateInTime, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabel29, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                        .addComponent(gpsTime, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGap(200, 200, 200))
            );

		jLabel2.setFont(UIConstant.labelFont);
		jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		jLabel2.setText("Vehicle:");

		/*vehicleName.setEditable(false);
        vehicleName.setTextBackground(new java.awt.Color(255, 255, 255));
        vehicleName.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        vehicleName.setText("NO VEHICLE DETECTED");
        vehicleName.setFont(UIConstant.vehicleLabel);
        vehicleName.setForeground(UIConstant.textFontColor);
        vehicleName.setBorder(null);
        vehicleName.setFocusable(false);
        vehicleName.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                vehicleNameMouseClicked(evt);
            }
        });
        vehicleName.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                vehicleNameFocusGained(evt);
            }
        });
        vehicleName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                vehicleNameKeyPressed(evt);
            }
        });*/
		vehicleName.setFont(UIConstant.textFont);
		vehicleName.setMaximumRowCount(10);
		vehicleName.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select" }));
		vehicleName.setTextBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 0));
		//        vehicleName.setEnabled(false);
		vehicleName.setFocusable(false);
		vehicleName.setKeyEvent(new ComboKeyEvent() {

			@Override
			public void onKeyPress(KeyEvent evt) {
				if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
					vehicleNameAction();
				}

			}
		});
		vehicleName.setText("");
		jPanel3.setBackground(new java.awt.Color(0, 0, 0));

		labelWeighment.setBackground(new java.awt.Color(0, 0, 0));
		labelWeighment.setFont(UIConstant.headingFont);
		labelWeighment.setForeground(new java.awt.Color(255, 255, 255));
		labelWeighment.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);

		javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
		jPanel3.setLayout(jPanel3Layout);
		jPanel3Layout.setHorizontalGroup(
				jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addComponent(labelWeighment, javax.swing.GroupLayout.DEFAULT_SIZE, 327, Short.MAX_VALUE)
				);
		jPanel3Layout.setVerticalGroup(
				jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addComponent(labelWeighment, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 96, Short.MAX_VALUE)
				);

		jPanel5.setBackground(new java.awt.Color(255, 255, 255));

		jLabel16.setFont(UIConstant.labelFont);
		jLabel16.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		jLabel16.setText("Paper Collected:");

		jLabel18.setFont(UIConstant.labelFont);
		jLabel18.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		jLabel18.setText("QC Done:");

		paperCollectedPanel.setBackground(new java.awt.Color(255, 255, 255));
		paperCollectedPanel.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mouseClicked(java.awt.event.MouseEvent evt) {
				paperCollectedPanelMouseClicked(evt);
			}
		});
		paperCollectedPanel.addFocusListener(new java.awt.event.FocusAdapter() {
			public void focusGained(java.awt.event.FocusEvent evt) {
				paperCollectedPanelFocusGained(evt);
			}
			public void focusLost(java.awt.event.FocusEvent evt) {
				paperCollectedPanelFocusLost(evt);
			}
		});
		paperCollectedPanel.addKeyListener(new java.awt.event.KeyAdapter() {
			public void keyPressed(java.awt.event.KeyEvent evt) {
				paperCollectedPanelKeyPressed(evt);
			}
		});

		paperCollectedYes.setText("Yes");
		paperCollectedYes.setFocusable(false);
		paperCollectedYes.setOpaque(false);
		paperCollectedYes.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				paperCollectedYesActionPerformed(evt);
			}
		});

		paperCollectedNo.setText("No");
		paperCollectedNo.setFocusable(false);
		paperCollectedNo.setOpaque(false);
		paperCollectedNo.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				paperCollectedNoActionPerformed(evt);
			}
		});

		paperCollectedNC.setText("NC");
		paperCollectedNC.setFocusable(false);
		paperCollectedNC.setOpaque(false);
		paperCollectedNC.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				paperCollectedNCActionPerformed(evt);
			}
		});

		javax.swing.GroupLayout paperCollectedPanelLayout = new javax.swing.GroupLayout(paperCollectedPanel);
		paperCollectedPanel.setLayout(paperCollectedPanelLayout);
		paperCollectedPanelLayout.setHorizontalGroup(
				paperCollectedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(paperCollectedPanelLayout.createSequentialGroup()
						.addComponent(paperCollectedYes, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addComponent(paperCollectedNo, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addComponent(paperCollectedNC, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
						.addContainerGap())
				);
		paperCollectedPanelLayout.setVerticalGroup(
				paperCollectedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(paperCollectedPanelLayout.createSequentialGroup()
						.addGap(0, 0, Short.MAX_VALUE)
						.addGroup(paperCollectedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
								.addGroup(javax.swing.GroupLayout.Alignment.TRAILING, paperCollectedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
										.addComponent(paperCollectedYes, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
										.addComponent(paperCollectedNo, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
										.addComponent(paperCollectedNC, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)))
				);

		qcDone.setFont(UIConstant.textFont);
//		qcDone.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select", "Done", "Not Done", "Done-Extraneous Mat", "Done-Excess Moisture", "Done-Other Issue" }));
		qcDone.addItem(new ComboItem(0, "Select"));
		qcDone.addItem(new ComboItem(1, "Done"));
		qcDone.addItem(new ComboItem(2, "Not Done"));
		qcDone.addItem(new ComboItem(4, "Done-Extraneous Mat"));
		qcDone.addItem(new ComboItem(5, "Done-Excess Moisture"));
		qcDone.addItem(new ComboItem(6, "Done-Other Issue"));
		qcDone.addItemListener(new java.awt.event.ItemListener() {
			public void itemStateChanged(java.awt.event.ItemEvent evt) {
				
				if(qcMark == UIConstant.YES && DropDownValues.getComboSelectedVal(qcDone) == 2){
					setQuetionsBlocking(Status.TPRQuestion.qcDone, UIConstant.NO);
				}else{
					setQuetionsBlocking(Status.TPRQuestion.qcDone, UIConstant.YES);
				}
			}
		});
		qcDone.addKeyListener(new java.awt.event.KeyAdapter() {
			public void keyPressed(java.awt.event.KeyEvent evt) {
				if(evt.getKeyCode() == KeyEvent.VK_ENTER)
					saveAndOpen.requestFocusInWindow();
			}
		});

		jLabel4.setFont(UIConstant.labelFont);
		jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		jLabel4.setText("Party Net Wt:");

		jLabel5.setFont(UIConstant.labelFont);
		jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		jLabel5.setText("Recvd Net Wt:");

		jLabel25.setFont(UIConstant.labelFont);
		jLabel25.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		jLabel25.setText("Net Short:");

		AcceptedNetWt.setFont(UIConstant.labeltextFont);
		AcceptedNetWt.setForeground(UIConstant.textFontColor);

		jLabel26.setFont(UIConstant.labelFont);
		jLabel26.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		jLabel26.setText("Tare Short:");

		jLabel27.setFont(UIConstant.labelFont);
		jLabel27.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
		jLabel27.setText("Accepted Net Wt:");

		totalShort.setFont(UIConstant.textFont);
		totalShort.setForeground(UIConstant.textFontColor);

		tareShort.setFont(UIConstant.textFont);
		tareShort.setForeground(UIConstant.textFontColor);

		partyNetWt.setFont(UIConstant.textFont);
		partyNetWt.setForeground(UIConstant.textFontColor);

		wbNetWt.setFont(UIConstant.textFont);
		wbNetWt.setForeground(UIConstant.textFontColor);

		javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
		jPanel5.setLayout(jPanel5Layout);
		jPanel5Layout.setHorizontalGroup(
				jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(jPanel5Layout.createSequentialGroup()
						.addContainerGap()
						.addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
								.addGroup(jPanel5Layout.createSequentialGroup()
										.addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
												.addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, 139, Short.MAX_VALUE)
												.addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 139, Short.MAX_VALUE)
												.addComponent(jLabel26, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
												.addComponent(jLabel27, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
												.addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
														.addGroup(jPanel5Layout.createSequentialGroup()
																.addGap(3, 3, 3)
																.addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
																		.addComponent(partyNetWt, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
																		.addComponent(wbNetWt, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
																		.addGroup(jPanel5Layout.createSequentialGroup()
																				.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																				.addComponent(AcceptedNetWt, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE))
																				.addGroup(jPanel5Layout.createSequentialGroup()
																						.addGap(3, 3, 3)
																						.addComponent(tareShort, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE))))
																						.addGroup(jPanel5Layout.createSequentialGroup()
																								.addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
																										.addGroup(jPanel5Layout.createSequentialGroup()
																												.addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
																												.addGap(3, 3, 3)
																												.addComponent(qcDone, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
																												.addGroup(jPanel5Layout.createSequentialGroup()
																														.addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
																																.addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
																																.addGroup(jPanel5Layout.createSequentialGroup()
																																		.addComponent(jLabel25, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
																																		.addGap(2, 2, 2)))
																																		.addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
																																				.addGroup(jPanel5Layout.createSequentialGroup()
																																						.addGap(3, 3, 3)
																																						.addComponent(paperCollectedPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
																																						.addComponent(totalShort, javax.swing.GroupLayout.PREFERRED_SIZE, 231, javax.swing.GroupLayout.PREFERRED_SIZE))))
																																						.addGap(12, 12, 12))))
				);
		jPanel5Layout.setVerticalGroup(
				jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(jPanel5Layout.createSequentialGroup()
						.addContainerGap()
						.addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
								.addComponent(jLabel26, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
								.addComponent(tareShort, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
										.addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
										.addComponent(partyNetWt, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
										.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
												.addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
												.addComponent(wbNetWt, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
												.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
												.addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
														.addComponent(jLabel27, javax.swing.GroupLayout.DEFAULT_SIZE, 27, Short.MAX_VALUE)
														.addComponent(AcceptedNetWt, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
														.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
														.addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
																.addGroup(jPanel5Layout.createSequentialGroup()
																		.addComponent(jLabel25, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
																		.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
																		.addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
																		.addGroup(jPanel5Layout.createSequentialGroup()
																				.addComponent(totalShort, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
																				.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
																				.addComponent(paperCollectedPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
																				.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 7, Short.MAX_VALUE)
																				.addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
																						.addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
																						.addComponent(qcDone, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
																						.addGap(45, 45, 45))
				);

		manualEntryButton.setFont(UIConstant.buttonFont);
		manualEntryButton.setText("Manual Entry");
		manualEntryButton.setEnabled(true);
		manualEntryButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				manualEntryButtonActionPerformed(evt);
			}
		});
		manualEntryButton.addKeyListener(new java.awt.event.KeyAdapter() {
			public void keyPressed(java.awt.event.KeyEvent evt) {
				manualEntryButtonKeyPressed(evt);
			}
		});

		saveAndOpen.setFont(UIConstant.buttonFont);
		saveAndOpen.setText("Save And Open Gate");
		saveAndOpen.setEnabled(false);
		saveAndOpen.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				saveAndOpenActionPerformed(evt);
			}
		});
		saveAndOpen.addKeyListener(new java.awt.event.KeyAdapter() {
			public void keyPressed(java.awt.event.KeyEvent evt) {
				saveAndOpenKeyPressed(evt);
			}
		});

		clear.setFont(UIConstant.buttonFont);
		clear.setText("Clear");
		clear.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				clearActionPerformed(evt);
			}
		});
		clear.addKeyListener(new java.awt.event.KeyAdapter() {
			public void keyPressed(java.awt.event.KeyEvent evt) {
				clearKeyPressed(evt);
			}
		});

		jPanel6.setBackground(new java.awt.Color(255, 255, 255));

		jLabel11.setFont(UIConstant.labelFont);
		jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		jLabel11.setText("Mines:");

		jLabel12.setFont(UIConstant.labelFont);
		jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		jLabel12.setText("Grade:");

		jLabel19.setFont(UIConstant.labelFont);
		jLabel19.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		jLabel19.setText("Party Tare Wt:");

		jLabel9.setFont(UIConstant.labelFont);
		jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		jLabel9.setText("Challan Date:");

		jLabel21.setFont(UIConstant.labelFont);
		jLabel21.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		jLabel21.setText("LR Date:");

		jLabel22.setFont(UIConstant.labelFont);
		jLabel22.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		jLabel22.setText("Mineral Permit No:");

		jLabel24.setFont(UIConstant.labelFont);
		jLabel24.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		jLabel24.setText("Weigh-Bridge In Time:");

		mines.setFont(UIConstant.textFont);
		mines.setForeground(UIConstant.textFontColor);

		grade.setFont(UIConstant.textFont);
		grade.setForeground(UIConstant.textFontColor);

		challanDate.setFont(UIConstant.textFont);
		challanDate.setForeground(UIConstant.textFontColor);

		lrdate.setFont(UIConstant.textFont);
		lrdate.setForeground(UIConstant.textFontColor);

		mineralPermitNo.setFont(UIConstant.textFont);
		mineralPermitNo.setForeground(UIConstant.textFontColor);

		wbInTime.setFont(UIConstant.textFont);
		wbInTime.setForeground(UIConstant.textFontColor);

		partyTareWt.setFont(UIConstant.textFont);
		partyTareWt.setForeground(UIConstant.textFontColor);

		jLabel28.setFont(UIConstant.labelFont);
		jLabel28.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		jLabel28.setText("Gross Wt:");

		grossWt.setFont(UIConstant.textFont);
		grossWt.setForeground(UIConstant.textFontColor);

		jLabel30.setFont(UIConstant.labelFont);
        jLabel30.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel30.setText("GPS Location:");

        gpsLocation.setFont(UIConstant.textFont);
        gpsLocation.setForeground(UIConstant.textFontColor);
        
		javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
		jPanel6.setLayout(jPanel6Layout);
		  jPanel6Layout.setHorizontalGroup(
		            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
		            .addGroup(jPanel6Layout.createSequentialGroup()
		                .addContainerGap()
		                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
		                    .addComponent(jLabel30, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
		                    .addComponent(jLabel28, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
		                    .addComponent(jLabel22, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
		                    .addComponent(jLabel21, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
		                    .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
		                    .addComponent(jLabel19, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
		                    .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
		                    .addComponent(jLabel11, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
		                    .addComponent(jLabel24, javax.swing.GroupLayout.DEFAULT_SIZE, 160, Short.MAX_VALUE))
		                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
		                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
		                    .addGroup(jPanel6Layout.createSequentialGroup()
		                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
		                            .addComponent(mines, javax.swing.GroupLayout.DEFAULT_SIZE, 225, Short.MAX_VALUE)
		                            .addComponent(grade, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
		                            .addComponent(challanDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
		                            .addComponent(lrdate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
		                            .addComponent(mineralPermitNo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
		                            .addComponent(wbInTime, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
		                            .addComponent(partyTareWt, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
		                            .addComponent(grossWt, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
		                        .addContainerGap())
		                    .addComponent(gpsLocation, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
		        );
		        jPanel6Layout.setVerticalGroup(
		            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
		            .addGroup(jPanel6Layout.createSequentialGroup()
		                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
		                    .addComponent(jLabel28, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
		                    .addComponent(grossWt, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
		                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
		                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
		                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
		                    .addComponent(mines, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
		                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
		                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
		                    .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
		                    .addComponent(grade, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
		                .addGap(8, 8, 8)
		                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
		                    .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
		                    .addComponent(partyTareWt, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
		                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
		                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
		                    .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
		                    .addComponent(challanDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
		                .addGap(6, 6, 6)
		                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
		                    .addComponent(jLabel21, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
		                    .addComponent(lrdate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
		                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
		                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
		                    .addComponent(jLabel22, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
		                    .addComponent(mineralPermitNo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
		                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
		                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
		                    .addComponent(jLabel24, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
		                    .addComponent(wbInTime, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
		                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
		                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
		                    .addComponent(jLabel30, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
		                    .addComponent(gpsLocation, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
		                .addContainerGap())
		        );


		jButton3.setFont(UIConstant.buttonFont);
		jButton3.setText("Challan Scan");
		jButton3.setVisible(false);

		jButton4.setFont(UIConstant.buttonFont);
		jButton4.setText("LR Scan");
		jButton4.setVisible(false);

		digitalClock.setFont(UIConstant.textFont); // NOI18N

		digitalClock.setForeground(UIConstant.textFontColor);
		digitalClock.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N

		jPanel7.setBackground(new java.awt.Color(255, 255, 255));

		blocking_reason.setFont(UIConstant.textFont);
		blocking_reason.setForeground(UIConstant.noActionPanelColor);

		javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
		jPanel7.setLayout(jPanel7Layout);
		jPanel7Layout.setHorizontalGroup(
				jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addComponent(blocking_reason, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 1307, Short.MAX_VALUE)
				);
		jPanel7Layout.setVerticalGroup(
				jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addComponent(blocking_reason, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
				);

		javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
		jPanel1.setLayout(jPanel1Layout);
		jPanel1Layout.setHorizontalGroup(
				jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
				.addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
						.addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
								.addGroup(jPanel1Layout.createSequentialGroup()
										.addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
										.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addComponent(vehicleName, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE))
										.addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
												.addContainerGap()
												.addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
												.addGap(18, 18, 18)
												.addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
														.addGroup(jPanel1Layout.createSequentialGroup()
																.addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
																.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
																.addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
																.addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
																		.addGap(0, 0, Short.MAX_VALUE)
																		.addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
																		.addGap(69, 69, 69))
																		.addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
																				.addGap(181, 181, 181)
																				.addComponent(clear, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
																				.addGap(75, 75, 75)
																				.addComponent(manualEntryButton, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
																				.addGap(70, 70, 70)
																				.addComponent(saveAndOpen, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)
																				.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
																				.addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
																						.addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
																								.addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
																										.addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, 154, Short.MAX_VALUE)
																										.addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
																										.addGap(180, 180, 180))
																										.addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
																												.addComponent(digitalClock, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
																												.addContainerGap())))
																												.addGroup(jPanel1Layout.createSequentialGroup()
																														.addContainerGap()
																														.addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
																														.addGap(0, 0, Short.MAX_VALUE))
				);
		jPanel1Layout.setVerticalGroup(
				jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(jPanel1Layout.createSequentialGroup()
						.addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
								.addGroup(jPanel1Layout.createSequentialGroup()
										.addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
										.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
										.addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
										.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
										.addGroup(jPanel1Layout.createSequentialGroup()
												.addGap(10, 10, 10)
												.addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
														.addComponent(vehicleName, javax.swing.GroupLayout.DEFAULT_SIZE, 42, Short.MAX_VALUE)
														.addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
														.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
														.addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
																.addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE)
																.addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
																.addGap(0, 0, Short.MAX_VALUE)))
																.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
																.addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
																.addGap(9, 9, 9)
																.addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
																		.addGroup(jPanel1Layout.createSequentialGroup()
																				.addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
																						.addComponent(clear, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
																						.addComponent(manualEntryButton, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
																						.addComponent(saveAndOpen, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
																						.addGap(0, 37, Short.MAX_VALUE))
																						.addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
																								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
																								.addComponent(digitalClock, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)))
																								.addContainerGap())
				);

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(
				layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
				);
		layout.setVerticalGroup(
				layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
				);

		pack();
	}// </editor-fold>//GEN-END:initComponents

	private void clearKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_clearKeyPressed
		if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
			clearAction();
		}
	}//GEN-LAST:event_clearKeyPressed

	private void clearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearActionPerformed
		clearAction();

	}//GEN-LAST:event_clearActionPerformed

	private void saveAndOpenKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_saveAndOpenKeyPressed
		if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
			quickCreateAndOpen();
		}
	}//GEN-LAST:event_saveAndOpenKeyPressed

	private void saveAndOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAndOpenActionPerformed
		quickCreateAndOpen();
	}//GEN-LAST:event_saveAndOpenActionPerformed

	private void manualEntryButtonKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_manualEntryButtonKeyPressed
		if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
			manualEntryAction();
		}
	}//GEN-LAST:event_manualEntryButtonKeyPressed

	private void manualEntryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manualEntryButtonActionPerformed
		manualEntryAction();
	}//GEN-LAST:event_manualEntryButtonActionPerformed

	private void paperCollectedPanelKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_paperCollectedPanelKeyPressed
		if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
			setWhiteBackColor();
			//lrCollectedPanel.setBackground(UIConstant.focusPanelColor);
		} else if (evt.getKeyCode() == KeyEvent.VK_1 || evt.getKeyCode() == KeyEvent.VK_NUMPAD1) {
			paperCollectedYes.setSelected(true);
			setWhiteBackColor();
			//            saveAndOpen.requestFocusInWindow();
			/*if (manualEntryButton.isEnabled()) {
                manualEntryButton.requestFocusInWindow();
            } else {
                saveAndOpen.requestFocusInWindow();
            }*/
			qcDone.requestFocusInWindow();
			//lrCollectedPanel.setBackground(UIConstant.focusPanelColor);
		} else if (evt.getKeyCode() == KeyEvent.VK_2 || evt.getKeyCode() == KeyEvent.VK_NUMPAD2) {
			paperCollectedNo.setSelected(true);
			setWhiteBackColor();
			//            saveAndOpen.requestFocusInWindow();
			/*if (manualEntryButton.isEnabled()) {
                manualEntryButton.requestFocusInWindow();
            } else {
                saveAndOpen.requestFocusInWindow();
            }*/
			qcDone.requestFocusInWindow();
			//lrCollectedPanel.setBackground(UIConstant.focusPanelColor);
		} else if (evt.getKeyCode() == KeyEvent.VK_3 || evt.getKeyCode() == KeyEvent.VK_NUMPAD3) {
			paperCollectedNC.setSelected(true);
			setWhiteBackColor();
			//            saveAndOpen.requestFocusInWindow();
			/*if (manualEntryButton.isEnabled()) {
                manualEntryButton.requestFocusInWindow();
            } else {
                saveAndOpen.requestFocusInWindow();
            }*/
			qcDone.requestFocusInWindow();
			//lrCollectedPanel.setBackground(UIConstant.focusPanelColor);
		}
	}//GEN-LAST:event_paperCollectedPanelKeyPressed

	private void paperCollectedPanelFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_paperCollectedPanelFocusLost
		// TODO add your handling code here:
	}//GEN-LAST:event_paperCollectedPanelFocusLost

	private void paperCollectedPanelFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_paperCollectedPanelFocusGained
		setWhiteBackColor();
		paperCollectedPanel.requestFocusInWindow();
		paperCollectedPanel.setBackground(UIConstant.focusPanelColor);
	}//GEN-LAST:event_paperCollectedPanelFocusGained

	private void paperCollectedPanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_paperCollectedPanelMouseClicked
		setWhiteBackColor();
		paperCollectedPanel.requestFocusInWindow();
		paperCollectedPanel.setBackground(UIConstant.focusPanelColor);
	}//GEN-LAST:event_paperCollectedPanelMouseClicked

	private void paperCollectedNCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paperCollectedNCActionPerformed
		setWhiteBackColor();
		/*if (saveAndOpen.isEnabled()) {
            saveAndOpen.requestFocusInWindow();
        } else {
            manualEntryButton.requestFocusInWindow();
        }*/
		qcDone.requestFocusInWindow();
	}//GEN-LAST:event_paperCollectedNCActionPerformed

	private void paperCollectedNoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paperCollectedNoActionPerformed
		setWhiteBackColor();
		/*if (saveAndOpen.isEnabled()) {
            saveAndOpen.requestFocusInWindow();
        } else {
            manualEntryButton.requestFocusInWindow();
        }*/
		qcDone.requestFocusInWindow();
	}//GEN-LAST:event_paperCollectedNoActionPerformed

	private void paperCollectedYesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paperCollectedYesActionPerformed
		setWhiteBackColor();
		/*if (saveAndOpen.isEnabled()) {
            saveAndOpen.requestFocusInWindow();
        } else {
            manualEntryButton.requestFocusInWindow();
        }*/
		qcDone.requestFocusInWindow();
		//        lrCollectedPanel.setBackground(UIConstant.focusPanelColor);
	}//GEN-LAST:event_paperCollectedYesActionPerformed

	private void vehicleNameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_vehicleNameKeyPressed
		if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
			vehicleNameAction();
		}
	}//GEN-LAST:event_vehicleNameKeyPressed

	private void vehicleNameFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_vehicleNameFocusGained
		setWhiteBackColor();
		vehicleName.requestFocusInWindow();
		vehicleName.setTextBackground(UIConstant.focusPanelColor);
	}//GEN-LAST:event_vehicleNameFocusGained

	private void vehicleNameMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_vehicleNameMouseClicked
		setWhiteBackColor();
		vehicleName.requestFocusInWindow();
		vehicleName.setTextBackground(UIConstant.focusPanelColor);
	}//GEN-LAST:event_vehicleNameMouseClicked

	private void button1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button1ActionPerformed
		stopRfid();
		this.dispose();
		try {
			new LoginWindow().setVisible(true);
		} catch (Exception ex) {
			ex.printStackTrace();
		}
	}//GEN-LAST:event_button1ActionPerformed

	public void start() throws IOException {

		if (rfidHandler == null) {
			rfidHandler = new RFIDDataHandler(1000, readerId, TokenManager.currWorkStationType, TokenManager.currWorkStationId, TokenManager.userId);
			rfidHandler.setTagListener(new TAGListener() {
				@Override
				public void manageTag(Connection conn ,Token _token, TPRecord tpr, TPStep tps, TPRBlockManager _tprBlockManager) {
					try {
						token = _token;
						tprBlockManager  = _tprBlockManager;
						setTPRecord(conn, tpr);
						tpStep = tps;
						Barrier.ChangeSignal();
					} catch (Exception ex) {
						ex.printStackTrace();
					}
				}
				@Override
				public void showMessage(String message) {
					JOptionPane.showMessageDialog(null, message);
				}

				@Override
				public void setVehicleName(String text) {
					// TODO Auto-generated method stub
					vehicleName.setText(text);
				}

				@Override
				public void clearVehicleName() {
					vehicleName.setText("NO VEHICLE DETECTED");
				}

				@Override
				public int promptMessage(String message, Object[] options) {
					return ConfirmationDialog.getDialogBox(new javax.swing.JFrame(), true, options, message);
				}
				@Override
				public void clear(boolean clearToken, Connection conn) {
					// TODO Auto-generated method stub
					clearInputs(conn, clearToken);
				}
				@Override
				public int mergeData(long sessionId, String epc, RFIDHolder rfidHolder) {
					// TODO Auto-generated method stub
					return 0;
				}
			});
		}

		rfidHandler.start();
		if (weighBridge == null) {
			weighBridge = new WeighBridge();
			weighBridge.setListener(new WeighBridgeListener() {
				@Override
				public void changeValue(String str) {
					System.out.println("[WB Reading]:" + str);
					int val = Misc.getParamAsInt(str);
					if (!Misc.isUndef(val)) {
						int currVal = Misc.getParamAsInt(labelWeighment.getText());
						if (Misc.isUndef(currVal) || (currVal >= val ? currVal - val : val - currVal) >= 10 || val == 0) {
							labelWeighment.setText(val + "");
							try{
								calculateWbNetWt();
								calculatePartyNetWt();
								calculateAcceptedNetWt();
								calculateTareShort();
								calculateTotalShort();
							}catch(Exception ex){
								ex.printStackTrace();
							}
							if(TokenManager.isDebugReadings && tprRecord != null && readings != null && (readings.size() <= 0 || readings.get(readings.size()-1) == null ||(readings.get(readings.size()-1).second != val) )){
	                        	readings.add(new Pair<Long, Integer>(System.currentTimeMillis(),val));
	                        }
						}
					}
				}

				@Override
				public void showDisconnection() {
					// TODO Auto-generated method stub
					java.awt.EventQueue.invokeLater(new Runnable() {
			            public void run() {
			            	if(disconnectionDialog != null)
			            		disconnectionDialog.setVisible(true);
			            }
			        });
				}

				@Override
				public void removeDisconnection() {
					// TODO Auto-generated method stub
					java.awt.EventQueue.invokeLater(new Runnable() {
			            public void run() {
			            	if(disconnectionDialog != null)
			            		disconnectionDialog.setVisible(false);
			            }
			        });
				}
			});
		}

		//           calculateWbNetWt();
		//                calculatePartyNetWt();
		weighBridge.startWeighBridge();

	}

	private void setTPRecord(String vehicleName) throws IOException {
		if (rfidHandler != null) {
			rfidHandler.getTprecord(vehicleName);
			//            Triple<Token, TPRecord, Integer> tpRecord = rfidHandler.getTprecord(conn, vehicleName);
			//            if (tpRecord != null) {
			//                token = tpRecord.first;
			//                setTPRecord(tpRecord.second, tpRecord.third);
			//            }
		}
	}

	public void setTPRecord(Connection conn, TPRecord tpr) throws IOException {
		System.out.println("######### Weigh bridge Out setTPRecord  ########");
		try {
			tprRecord = tpr;
			if (tprRecord != null) {
				if (true) {//blockStatus == Status.VALIDATION.NO_ISSUE) {// TPR Valid
					toggleVehicle(false);
					isTagRead = token != null ? token.isReadFromTag() : false;
					if (token == null && tprRecord.getEarliestUnloadWbOutEntry() != null) {
						System.out.println("Entry Time 1st");
						entryTime = tprRecord.getEarliestUnloadWbOutEntry();
					} else if (token != null && tprRecord.getEarliestUnloadWbOutEntry() == null) {
						System.out.println("Entry Time 2nd :" + token.getLastSeen());
						if (token.getLastSeen() != Misc.getUndefInt()) {
							entryTime = new Date(token.getLastSeen());
						} else {
							entryTime = new Date();
						}
						//entryTime = new Date(token.getLastSeen());
					} else if (token != null && tprRecord.getEarliestUnloadWbOutEntry() != null) {
						System.out.println("Entry Time 3rd :" + token.getLastSeen());
						if (token.getLastSeen() > Utils.getDateTimeLong(tprRecord.getEarliestUnloadWbOutEntry())) {
							if (token.getLastSeen() != Misc.getUndefInt()) {
								entryTime = new Date(token.getLastSeen());
							} else {
								entryTime = new Date();
							}
							System.out.println("token " + entryTime);
						} else {
							entryTime = new Date();
						}
					} else {
						entryTime = new Date();
					}
					System.out.println("Entry Time :" + entryTime);
					vehicleName.setText(tprRecord.getVehicleId(), tprRecord.getVehicleName());
					roadpermitNo.setText(tprRecord.getDispatchPermitNo());
					mineralPermitNo.setText(tprRecord.getMaterialDescription());

					challanNo.setText(tprRecord.getChallanNo());
					if (tprRecord.getChallanDate() != null) {
						//challanDate.setDate(tprRecord.getChallanDate());
						challanDate.setText(UIConstant.displayFormat.format(tprRecord.getChallanDate()));
					}
					if (tprRecord.getLrDate() != null) {
						//challanDate.setDate(tprRecord.getChallanDate());
						lrdate.setText(UIConstant.displayFormat.format(tprRecord.getLrDate()));
					}
					if (tprRecord.getEarliestUnloadGateInEntry() != null) {
						//challanDate.setDate(tprRecord.getChallanDate());
						gateInTime.setText(UIConstant.displayFormat.format(tprRecord.getEarliestUnloadGateInEntry()));
					}
					if (tprRecord.getEarliestUnloadWbInEntry() != null) {
						//challanDate.setDate(tprRecord.getChallanDate());
						wbInTime.setText(UIConstant.displayFormat.format(tprRecord.getEarliestUnloadWbInEntry()));
					}
					lrNo.setText(tprRecord.getLrNo());
					partyTareWt.setText(Misc.getPrintableDouble(tprRecord.getLoadTare()));
					partyGrossWt.setText(Misc.getPrintableDouble(tprRecord.getLoadGross()));
					System.out.println("#### grossWt ##");
					grossWt.setText(Misc.getPrintableDouble(tprRecord.getUnloadGross()));
					System.out.println("####Print grossWt ##");
					mines.setText(DropDownValues.getMines(tprRecord.getMinesId(), conn));
					transporter.setText(DropDownValues.getTransporter(tprRecord.getTransporterId(), conn));
					grade.setText(DropDownValues.getGrade(tprRecord.getMaterialGradeId(), conn));
					String doRr = DropDownValues.getDoRr(tprRecord.getDoId());
					rrNo.setText(doRr);
					if (tprRecord.getTprId() != Misc.getUndefInt()) {
						gpv = GpsPlusViolations.getGpsPlusViolatins(conn, tprRecord.getVehicleId(), tprRecord.getTprId(), System.currentTimeMillis(), tprRecord.getMinesId(), tprRecord.getChallanDate() == null ? System.currentTimeMillis() : tprRecord.getChallanDate().getTime());
					} else {
						gpv = GpsPlusViolations.getGpsPlusViolatins(conn, tprRecord.getVehicleId(), tprRecord.getTprId(), System.currentTimeMillis(), Misc.getUndefInt(), System.currentTimeMillis());
					}
					double unloadGross = tprRecord.getUnloadGross();
		    		if(unloadGross > 5000.0)
		    			unloadGross = (unloadGross/1000);
		    		double partyGross = tprRecord.getLoadGross();
		    		if(partyGross > 5000.0)
		    			partyGross = (partyGross/1000);
		    		Pair<ResultEnum, String> getMarkQC = gpv.getMarkForQC(conn, unloadGross, partyGross);
					//Pair<ResultEnum, String> getMarkQC = gpv.getMarkForQC(conn, tprRecord.getUnloadGross(), tprRecord.getLoadGross());
					if (getMarkQC.first == ResultEnum.GREEN) {
						qcMark = UIConstant.NO;
					} else if (getMarkQC.first == ResultEnum.RED) {
						qcMark = UIConstant.YES;
					} else {
						qcMark = UIConstant.NC;
					}
					if(qcMark != UIConstant.YES){
						jLabel18.setText("QC Done(Not Needed):");
						DropDownValues.setComboItem(qcDone, UIConstant.NO);
//						qcDone.setSelectedIndex(UIConstant.NO);
					}else{
						jLabel18.setText("QC Done(Needed):");
					}
					saveAndOpen.setEnabled(true);
				}
				Pair<Long, String> pairVal = GpsPlusViolations.getLatestLocation(conn, tprRecord.getVehicleId());
                if(pairVal != null){
                	String location = pairVal.second == null ? "" : pairVal.second;
                	gpsTime.setText(GateInDao.getLongToDatetime(pairVal.first));
                	gpsLocation.setText(GateInDao.getString(location, 23));
                }
				calculateWbNetWt();
				calculatePartyNetWt();
				calculateAcceptedNetWt();
				calculateTareShort();
				calculateTotalShort();
				setBlockingStatus();
				readings = new ArrayList<Pair<Long,Integer>>();
			} else {
				JOptionPane.showMessageDialog(null, "Invalid Vehicle Go to Registration");
				isVehicleExist = false;
			}
		} catch(Exception ex){
			ex.printStackTrace();
		}
	}
	private void quickCreateAndOpen() {
		Connection conn = null;
		boolean destroyIt = false;
		try{
			conn = DBConnectionPool.getConnectionFromPoolNonWeb();
			if(isRequestOverride){
				requestOverrideAction();
				return;
			}
			else if (tprRecord == null) {
				if (vehicleName.isTextEditable() && Utils.isNull(vehicleName.getText())) {
					JOptionPane.showMessageDialog(null, "Please Enter Vehicle");
				}
				setWhiteBackColor();
				changeToQuickCreateMode();
				return;
				//            }
			} else if (!paperCollectedYes.isSelected() && !paperCollectedNo.isSelected() && !paperCollectedNC.isSelected()) {
				JOptionPane.showMessageDialog(null, "Please Confirm Challan Collected");
				setWhiteBackColor();
				paperCollectedPanel.setBackground(UIConstant.focusPanelColor);
				paperCollectedPanel.requestFocusInWindow();
			}else if (qcMark == UIConstant.YES && DropDownValues.getComboSelectedVal(qcDone) == 0) {
				JOptionPane.showMessageDialog(null, "Please Select QC Done");
				setWhiteBackColor();
				qcDone.requestFocusInWindow();
				return;
			}  else {
				captureWeight = Misc.getParamAsDouble(labelWeighment.getText());
				if(captureWeight < 8000.0 || captureWeight > 14999.0){
        			JOptionPane.showMessageDialog(null, "Captured Weight is not in limits (8.00-14.99 MT).Please capture properly");
        			return;
        		}else{
        			captureWeight = captureWeight/1000;
        		}
				/*if(captureWeight < 8000.0){
        			JOptionPane.showMessageDialog(null, "Weight is not correct.Please try again");
        			return;
        		}*/
//				int responseVehicleDialog = JOptionPane.showConfirmDialog(this, "Vehicle Name: " + vehicleName.getText() + "\nTransporter: " + transporter.getText() + "\nCaptured Weight: " + Misc.printDouble((captureWeight/1000),false), UIConstant.dialogTitle, JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE);
				String[] options = {"Yes", "No"};
        		//int responseVehicleDialog = ConfirmationDialog.getDialogBox(new javax.swing.JFrame(), true, options,  "Vehicle Name: " + vehicleName.getText() + "\nTransporter: " + transporter.getText() + "\nCaptured Weight: " + Misc.printDouble((captureWeight/1000),false));
				int responseVehicleDialog = JOptionPane.showOptionDialog(new javax.swing.JFrame(),
        				"Vehicle Name: " + vehicleName.getText() + "\nTransporter: " + transporter.getText() + "\nCaptured Weight: " + Misc.printDouble(captureWeight,false),
                        "Confirm",
                        JOptionPane.YES_NO_OPTION,
                        JOptionPane.INFORMATION_MESSAGE,
                        null, //do not use a custom Icon
                        options, //the titles of buttons
                        options[1]);
				//int responseVehicleDialog = JOptionPane.showConfirmDialog(this, "Vehicle Name: " + vehicleName.getText() + "\nTransporter: " + transporter.getSelectedItem().toString() + "\nCaptured Weight: " + Misc.printDouble((captureWeight/1000),false), UIConstant.dialogTitle, JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE);
//                int responseVehicleDialog = UIConstant.showConfirmDialog(null, "Vehicle Name: " + vehicleName.getText() + "\nTransporter: " + transporter.getSelectedItem().toString() + "\nCaptured Weight: " + Misc.printDouble((captureWeight/1000),false));
//        		 int responseVehicleDialog = ConfirmDialog.showDialog(this, "Vehicle Name: " + vehicleName.getText() + "\nTransporter: " + transporter.getSelectedItem().toString() + "\nCaptured Weight: " + Misc.printDouble((captureWeight/1000),false));
                System.out.print("##### Confirmation Value :#####" + responseVehicleDialog);
                if (responseVehicleDialog != JOptionPane.YES_OPTION) {//no_option is yes in our context
                    return;
                } else {
					updateTPR(conn);
					int stepId = InsertTPRStep(conn,false);
					if (stepId != Misc.getUndefInt()) {
						InsertTPRQuestionDetails(conn, stepId);
					}
					conn.commit();
					if (true) {
						JOptionPane.showMessageDialog(null, "Detail Saved");
//						new PrintData(this, true, tprRecord, partyNetWt.getText(), wbNetWt.getText(), totalShort.getText(), AcceptedNetWt.getText()).setVisible(true);
						new PrintData(this, true, tprRecord, partyNetWt.getText(), totalShort.getText()).setVisible(true);
//     (java.awt.Frame parent, boolean modal, TPRecord tpRecord, double supplierNetWt ,double netWts, double shortWts, double acceptedWt)
						Barrier.openEntryGate();
						clearInputs(conn,false);
						getFocus();
					} 
				}
			}
		}catch(Exception ex){
			JOptionPane.showMessageDialog(null, UIConstant.SAVE_FAILER_MESSAGE);
			ex.printStackTrace();
			destroyIt = true;
		}finally{
			try{
				DBConnectionPool.returnConnectionToPoolNonWeb(conn, destroyIt);
			}catch(Exception ex){
				ex.printStackTrace();
			}
		}
	}

	private void setWhiteBackColor() {
		vehicleName.setBackground(UIConstant.PanelWhite);
		paperCollectedPanel.setBackground(UIConstant.PanelWhite);

	}

	private void getFocus() {
		if (vehicleName.isTextEditable()) {
			setWhiteBackColor();
			vehicleName.requestFocusInWindow();
			vehicleName.setTextBackground(UIConstant.focusPanelColor);
		} else {
			setWhiteBackColor();
			paperCollectedPanel.setBackground(UIConstant.focusPanelColor);
			paperCollectedPanel.requestFocusInWindow();
			//grade.setBackground(UIConstant.focusPanelColor);
		}
	}

	private void changeToQuickCreateMode() {
		vehicleName.setEditable(true);
		vehicleName.setFocusable(true);
		vehicleName.requestFocusInWindow();
		vehicleName.setTextBackground(UIConstant.focusPanelColor);
		vehicleName.setText("");
		vehicleName.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
	}

	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[]) {
		/* Set the Nimbus look and feel */
		//<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
		/* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
		 * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
		 */
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(CoalWeighBridgeOutWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(CoalWeighBridgeOutWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(CoalWeighBridgeOutWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(CoalWeighBridgeOutWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
		//</editor-fold>

		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					new CoalWeighBridgeOutWindow().setVisible(true);
				} catch (IOException ex) {
					Logger.getLogger(CoalWeighBridgeOutWindow.class.getName()).log(Level.SEVERE, null, ex);
				}
			}
		});
	}
	// Variables declaration - do not modify//GEN-BEGIN:variables
	public static javax.swing.JLabel AcceptedNetWt;
	private javax.swing.JLabel blocking_reason;
	private java.awt.Button button1;
	private javax.swing.JLabel challanDate;
	public static javax.swing.JLabel challanNo;
	private javax.swing.JButton clear;
	private javax.swing.JButton manualEntryButton;
	public static javax.swing.JLabel digitalClock;
	private javax.swing.JLabel gateInTime;
	private javax.swing.JLabel grade;
	private javax.swing.JLabel grossWt;
	private javax.swing.JButton jButton3;
	private javax.swing.JButton jButton4;
	private javax.swing.JLabel jLabel1;
	private javax.swing.JLabel jLabel10;
	private javax.swing.JLabel jLabel11;
	private javax.swing.JLabel jLabel12;
	private javax.swing.JLabel jLabel13;
	private javax.swing.JLabel jLabel14;
	private javax.swing.JLabel jLabel15;
	private javax.swing.JLabel jLabel16;
	private javax.swing.JLabel jLabel17;
	private javax.swing.JLabel jLabel18;
	private javax.swing.JLabel jLabel19;
	private javax.swing.JLabel jLabel2;
	private javax.swing.JLabel jLabel20;
	private javax.swing.JLabel jLabel21;
	private javax.swing.JLabel jLabel22;
	private javax.swing.JLabel jLabel23;
	private javax.swing.JLabel jLabel24;
	private javax.swing.JLabel jLabel25;
	private javax.swing.JLabel jLabel26;
	private javax.swing.JLabel jLabel27;
	private javax.swing.JLabel jLabel28;
	private javax.swing.JLabel jLabel3;
	private javax.swing.JLabel jLabel4;
	private javax.swing.JLabel jLabel5;
	private javax.swing.JLabel jLabel6;
	private javax.swing.JLabel jLabel7;
	private javax.swing.JLabel jLabel8;
	private javax.swing.JLabel jLabel9;
	private javax.swing.JPanel jPanel1;
	private javax.swing.JPanel jPanel2;
	private javax.swing.JPanel jPanel3;
	private javax.swing.JPanel jPanel4;
	private javax.swing.JPanel jPanel5;
	private javax.swing.JPanel jPanel6;
	private javax.swing.JPanel jPanel7;
	private javax.swing.JLabel labelWeighment;
	public static javax.swing.JLabel lrNo;
	private javax.swing.JLabel lrdate;
	private javax.swing.JLabel mineralPermitNo;
	private javax.swing.JLabel mines;
	private javax.swing.JLabel override;
	private javax.swing.JCheckBox paperCollectedNC;
	private javax.swing.JCheckBox paperCollectedNo;
	private javax.swing.JPanel paperCollectedPanel;
	private javax.swing.JCheckBox paperCollectedYes;
	public static javax.swing.JLabel partyGrossWt;
	private javax.swing.JLabel partyNetWt;
	public static javax.swing.JLabel partyTareWt;
	public static JComboBox qcDone;
	public static javax.swing.JLabel roadpermitNo;
	public static javax.swing.JLabel rrNo;
	private javax.swing.JButton saveAndOpen;
	private javax.swing.JLabel tareShort;
	private javax.swing.JLabel totalShort;
	private javax.swing.JLabel transporter;
	public static javax.swing.JLabel username;
	private AutoCompleteCombo vehicleName;
	private javax.swing.JLabel wbInTime;
	private javax.swing.JLabel wbNetWt;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel gpsLocation;
    private javax.swing.JLabel gpsTime;

	// End of variables declaration//GEN-END:variables

	private void updateTPR(Connection conn) throws Exception {
		updateTPR(conn, false);
	}

	private void updateTPR(Connection conn, boolean isDeny) throws Exception {
		if (!isDeny) {
			//tprRecord.setTprCreateDate(new Date());
			tprRecord.setUnloadTare(captureWeight);
			tprRecord.setUnloadWbOutName(TokenManager.userName);
			tprRecord.setPreStepType(com.ipssi.rfid.constant.Type.WorkStationType.GATE_OUT_TYPE);
			tprRecord.setPreStepDate(new Date());
			tprRecord.setUpdatedBy(TokenManager.userId);
			tprRecord.setUpdatedOn(new Date());
			tprRecord.setPreStepType(TokenManager.currWorkStationType);
			tprRecord.setNextStepType(TokenManager.nextWorkStationType);
			tprRecord.setPreStepDate(new Date());
			tprRecord.setLatestUnloadWbOutExit(new Date());
			tprRecord.setComboEnd(new Date());
			if (TokenManager.closeTPR) {
				tprRecord.setTprStatus(Status.TPR.CLOSE);
				if (token.getEpcId() != null && token.getEpcId().length() >= 20 && rfidHandler != null) {
					rfidHandler.clearData(Utils.HexStringToByteArray(token.getEpcId()), 5);
				}
			}
		}
		tprRecord.setEarliestUnloadWbOutEntry(entryTime);
		if (tprRecord.getComboStart() == null) {
			tprRecord.setComboStart(new Date());
		}
		TPRInformation.insertUpdateTpr(conn, tprRecord);
		if(tprBlockManager != null)
        	tprBlockManager.setTprBlockStatus(conn, tprRecord.getTprId(),TokenManager.userId);
	}

	private int InsertTPRStep(Connection conn,boolean isDeny) throws Exception {
		if (tpStep == null || Misc.isUndef(tpStep.getId())) {
			System.out.println("[Manual Creted TpStep]");
			tpStep = new TPStep();
			tpStep.setEntryTime(entryTime);
			tpStep.setExitTime(new Date());
			tpStep.setTprId(tprRecord.getTprId());
			tpStep.setUpdatedBy(TokenManager.userId);
			tpStep.setVehicleId(tprRecord.getVehicleId());
			tpStep.setWorkStationId(TokenManager.currWorkStationId);
			tpStep.setWorkStationType(TokenManager.currWorkStationType);
			tpStep.setTareWt(Misc.getParamAsDouble(labelWeighment.getText()));
			tpStep.setUpdatedOn(new Date());
			tpStep.setHasValidRf(isTagRead ? 1 : 0);
			tpStep.setMaterialCat(TokenManager.materialCat);
			tpStep.setSaveStatus(isDeny ? TPStep.REQUEST_OVERRIDE : TPStep.SAVE_AND_CONTINUE);
			RFIDMasterDao.insert(conn, tpStep,false);
			RFIDMasterDao.insert(conn, tpStep,true);
		} else {
			long currTimeServerMillis = System.currentTimeMillis();
			tpStep.setExitTime(new Date(currTimeServerMillis));
			tpStep.setUpdatedOn(new Date(currTimeServerMillis));
			tpStep.setTareWt(Misc.getParamAsDouble(labelWeighment.getText()));
			tpStep.setHasValidRf(isTagRead ? 1 : 0);
			tpStep.setMaterialCat(TokenManager.materialCat);
			tpStep.setSaveStatus(isDeny ? TPStep.REQUEST_OVERRIDE : TPStep.SAVE_AND_CONTINUE);
			RFIDMasterDao.update(conn, tpStep,false);
			RFIDMasterDao.update(conn, tpStep,true);
		}

		return tpStep.getId();
	}

	private boolean InsertTPRQuestionDetails(Connection invConn1, int stepId) throws Exception {
		HashMap<Integer, Integer> quesAnsList = getQuestionIdList();
		boolean isInsert = false;
		for (Map.Entry<Integer, Integer> entry : quesAnsList.entrySet()) {
			Integer questionId = entry.getKey();
			Integer answerId = entry.getValue();
			GateInDao.updateTPRQuestion(invConn1, tprRecord.getTprId(), TokenManager.currWorkStationType, questionId, answerId, TokenManager.userId);
		}
		return isInsert;
	}

	private HashMap<Integer, Integer> getQuestionIdList() {
		HashMap<Integer, Integer> quesAnsList = new HashMap<Integer, Integer>();
		if (paperCollectedYes.isSelected()) {
			quesAnsList.put(Status.TPRQuestion.ChallanCollected, UIConstant.YES);
		} else if (paperCollectedNo.isSelected()) {
			quesAnsList.put(Status.TPRQuestion.ChallanCollected, UIConstant.NO);
		} else if (paperCollectedNC.isSelected()) {
			quesAnsList.put(Status.TPRQuestion.ChallanCollected, UIConstant.NC);
		} else {
			quesAnsList.put(Status.TPRQuestion.ChallanCollected, Misc.getUndefInt());
		}
//		if (qcDone.getSelectedIndex() == 1) {
//			quesAnsList.put(Status.TPRQuestion.qcDone, UIConstant.YES);
//		} else if (qcDone.getSelectedIndex() == 2) {
//			quesAnsList.put(Status.TPRQuestion.qcDone, UIConstant.NO);
//		} else {
//			quesAnsList.put(Status.TPRQuestion.qcDone, qcDone.getSelectedIndex());
//		}

		if (DropDownValues.getComboSelectedVal(qcDone) == 1) {
			quesAnsList.put(Status.TPRQuestion.qcDone, UIConstant.YES);
		} else if (DropDownValues.getComboSelectedVal(qcDone) == 2) {
			quesAnsList.put(Status.TPRQuestion.qcDone, UIConstant.NO);
		} else {
			quesAnsList.put(Status.TPRQuestion.qcDone, DropDownValues.getComboSelectedVal(qcDone));
		}
		return quesAnsList;
	}

	/*private void toggleVehicle(boolean editable) {
    	if(editable){
    		vehicleName.setEnabled(true);
    		vehicleName.setEditable(true);
    		vehicleName.setFocusable(true);
    		vehicleName.requestFocusInWindow();
    		vehicleName.setTextBackground(UIConstant.focusPanelColor);
    		vehicleName.setText("");
    		//vehicleName.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
    	}else{
    		vehicleName.setEnabled(false);
    		vehicleName.setEditable(false);
    		vehicleName.setBorder(null);
    		vehicleName.setTextBackground(Color.WHITE);
    	}
    }*/
	private void toggleVehicle(boolean editable) {
		if(editable){
			//vehicleName.setEnabled(true);
			vehicleName.setEditable(true);
			vehicleName.setTextEditable(true);
			vehicleName.setFocusable(true);
			vehicleName.requestFocusInWindow();
			vehicleName.setTextBackground(UIConstant.focusPanelColor);
			vehicleName.setText("");
			vehicleName.setTextBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
		}else{
			//vehicleName.setEnabled(false);
			vehicleName.setEditable(false);
			vehicleName.setTextEditable(false);
			vehicleName.setTextBorder(null);
			vehicleName.setBackground(Color.WHITE);
		}
		//  transporter.setFocusable(true);
		// transporter.setEnabled(true);
	}
	private void manualEntryAction() {
		Connection conn = null;
		boolean destroyIt = false;
		try{
			conn = DBConnectionPool.getConnectionFromPoolNonWeb();
			clearInputs(conn, false);
			if (!vehicleName.isTextEditable()) {
				toggleVehicle(true);
				vehicleName.requestFocusInWindow();
			} 
			manualEntryButton.setEnabled(false);
		}catch(Exception ex){
			ex.printStackTrace();
			destroyIt = true;
		}finally{
			try{
				DBConnectionPool.returnConnectionToPoolNonWeb(conn, destroyIt);
			}catch(Exception ex){
				ex.printStackTrace();
			}
		}

	}
	private void clearInputs(Connection conn, boolean clearToken) {
		if(clearToken){
			TokenManager.clearWorkstation();
		}else{
			if(token != null)
				TokenManager.returnToken(conn, token);
		}
		GpsPlusViolations gpv = null;
		vehicleName.setText("");
		partyGrossWt.setText("");
		partyTareWt.setText("");
		grossWt.setText("");
		transporter.setText("");
		
		lrdate.setText("");
		qcDone.setSelectedIndex(0);
		challanNo.setText("");
		challanDate.setText("");
		lrNo.setText("");
		mines.setText("");
		grade.setText("");
		rrNo.setText("");
		roadpermitNo.setText("");
		mineralPermitNo.setText("");
		gateInTime.setText("");
		wbInTime.setText("");
		challanCollected.clearSelection();
		partyTareWt.setText("");
		override.setText("");
		tareShort.setText("");
		partyNetWt.setText("");
		wbNetWt.setText("");
		totalShort.setText("");
		AcceptedNetWt.setText("");
		saveAndOpen.setText("Save And Open Gate");
		saveAndOpen.setEnabled(false);
		if(isManual)
			manualEntryButton.setEnabled(true);

		tprRecord = null;
		token = null;
		data = null;
		tpStep = null;
		tprBlockManager = null;

		entryTime = null;
		exitTime = null;

		isVehicleExist = false;
		vehicleBlackListed = false;
		isTagRead = false;
		isRequestOverride = false;
		qcMark = Misc.getUndefInt();
		Party_Net_Wt = Misc.getUndefDouble();
		Wb_Net_Wt = Misc.getUndefDouble();
		captureWeight = Misc.getUndefDouble();
		jLabel18.setText("QC Done:");
		toggleVehicle(false);
		enableDenyEntry(false);
		override.setText("");
		blocking_reason.setText("");
		readings = null;
		
		gpsTime.setText("");
		gpsLocation.setText("");
	}

	void stopRfid() {
		try {
			if (rfidHandler != null) {
				rfidHandler.stop();
			}
			if (weighBridge != null) {
				weighBridge.stopWeighBridge();
			}
		} catch (Exception ex) {
			ex.printStackTrace();
		}
	}
	//     private void calculateGrossShort() {
	//        if (!Utils.isNull(labelWeighment.getText()) && !Utils.isNull(partyGrossWt.getText())) {
	//            Double net_short = Double.valueOf(labelWeighment.getText()) - Double.valueOf(partyGrossWt.getText());
	//            String net_shorts = new DecimalFormat("#.##").format(net_short);
	////            grossShort.setText(net_shorts);
	//            partyTareWt.setText(net_shorts);
	//        }
	//    }

	private void calculateTareShort() {
		if (!Utils.isNull(labelWeighment.getText()) && !Utils.isNull(partyTareWt.getText())) {
			double mplTare = Double.valueOf(labelWeighment.getText());
			double partyTare =  Double.valueOf(partyTareWt.getText());
			if(!Misc.isUndef(mplTare) && !Misc.isUndef(partyTare)){
				Double tare_short = (mplTare/1000) - partyTare;
				tareShort.setText(Misc.getPrintableDouble(tare_short));
			}
		}
	}

	private void calculatePartyNetWt() {
		if (tprRecord !=null && tprRecord.getLoadGross() != Misc.getUndefDouble() && tprRecord.getLoadTare() != Misc.getUndefDouble()) {
			Party_Net_Wt = tprRecord.getLoadGross() - tprRecord.getLoadTare();
			partyNetWt.setText(Misc.getPrintableDouble(Party_Net_Wt));
		}
	}

	private void calculateWbNetWt() {
		if (tprRecord != null && tprRecord.getUnloadGross() != Misc.getUndefDouble() && !Utils.isNull(labelWeighment.getText())) {
			double mplTare = Double.valueOf(labelWeighment.getText());
			if(!Misc.isUndef(mplTare)){
				Wb_Net_Wt = tprRecord.getUnloadGross() - (mplTare/1000);
				wbNetWt.setText(Misc.getPrintableDouble(Wb_Net_Wt));
			}
		}
	}

	private void calculateTotalShort() {
		if (Party_Net_Wt != Misc.getUndefDouble() && Wb_Net_Wt != Misc.getUndefDouble()) {
			Double total_Short = Party_Net_Wt - (Party_Net_Wt < Wb_Net_Wt ? Party_Net_Wt : Wb_Net_Wt);
			totalShort.setText(Misc.getPrintableDouble(total_Short));
		}
	}

	private void calculateAcceptedNetWt() {
		if (Party_Net_Wt != Misc.getUndefDouble() && Wb_Net_Wt != Misc.getUndefDouble()) {

			if (Party_Net_Wt < Wb_Net_Wt) {
//				String acceptedNetWt = new DecimalFormat("#.##").format(Party_Net_Wt);
				AcceptedNetWt.setText(Misc.getPrintableDouble(Party_Net_Wt));
			} else {
//				String acceptedNetWt = new DecimalFormat("#.##").format(Wb_Net_Wt);
				AcceptedNetWt.setText(Misc.getPrintableDouble(Wb_Net_Wt));
			}
		}
	}

	private void requestOverrideAction() {
		Connection conn = null;
		boolean destroyIt = false;
		try {
			conn = DBConnectionPool.getConnectionFromPoolNonWeb();
			updateTPR(conn, true);
			int stepId = InsertTPRStep(conn,true);
			/*if (!Misc.isUndef(stepId)) {
				InsertTPRQuestionDetails(conn, stepId);
			}*/
//			TPRBlockStatusHelper.allowCurrentStep(conn, tprRecord.getVehicleId(), tprRecord, TokenManager.currWorkStationId, TokenManager.currWorkStationType, TokenManager.userId, true, true);
			conn.commit();
			clearInputs(conn, false);
			getFocus();
		} catch(Exception ex){
			ex.printStackTrace();
			destroyIt = true;
		}finally{
			try{
				DBConnectionPool.returnConnectionToPoolNonWeb(conn, destroyIt);
			}catch(Exception ex){
				ex.printStackTrace();
			}
		}
	}

	private void clearAction() {
		Connection conn = null;
		boolean destroyIt = false;
		try{
			conn = DBConnectionPool.getConnectionFromPoolNonWeb();
			setWhiteBackColor();
			clearInputs(conn, true);
			getFocus();
		}catch(Exception ex){
			ex.printStackTrace();
			destroyIt = true;
		}finally{
			try{
				DBConnectionPool.returnConnectionToPoolNonWeb(conn, destroyIt);
			}catch(Exception ex){
				ex.printStackTrace();
			}
		}
	}

	private void enableDenyEntry(boolean show) {
		if (show || vehicleBlackListed) {
			/*manualEntryButton.setEnabled(true);
            quickCreate.setEnabled(false);*/
			override.setText("BLOCKED");
			isRequestOverride = true;
			saveAndOpen.setText("Request Override");
		} else {
			isRequestOverride = false;
			override.setText("NOT_BLOCKED");
			saveAndOpen.setText("Save And Open Gate");
			/*manualEntryButton.setEnabled(false);
            quickCreate.setEnabled(true);*/
		}
	}

	private void vehicleNameAction() {
		Connection conn = null;
		boolean destroyIt = false;
		try{
			conn = DBConnectionPool.getConnectionFromPoolNonWeb();
			int vehId = Misc.getUndefInt();
			if (Utils.isNull(vehicleName.getText())) {
				JOptionPane.showMessageDialog(null, "Please Enter Vehicle !!!");
				return;
			} else {
				try {
					vehicleName.setText(CacheTrack.standardizeName(vehicleName.getText()));
					Pair<Integer, String> vehPair = TPRInformation.getVehicle(conn, null, vehicleName.getText());
					if (vehPair != null) {
						vehId = vehPair.first;
					}
					if (vehId != Misc.getUndefInt()) {
						isVehicleExist = true;
					}
				} catch (Exception ex) {
					ex.printStackTrace();
				}
				if (!isVehicleExist) {
					JOptionPane.showMessageDialog(null, "Invalid Vehicle,please enter valid vehicle");
					/*
					Object[] options = {"  Re-Enter  ", "  Continue  "};
					String msg = "Invalid Vehicle Please Go to Registration Office";
					int responseVehicleDialog = ConfirmationDialog.getDialogBox(new javax.swing.JFrame(), true, options, msg);
					if (responseVehicleDialog == reEnter) {
						setWhiteBackColor();
						vehicleName.setText("");
						vehicleName.setTextBackground(UIConstant.focusPanelColor);
						return;
					} else if (responseVehicleDialog == contiNue) {
						setWhiteBackColor();
						vehicleName.setText("");
						vehicleName.setTextBackground(UIConstant.focusPanelColor);
						return;
					}
					 */
					} else {
					try {
						setWhiteBackColor();
						paperCollectedPanel.requestFocusInWindow();
						paperCollectedPanel.setBackground(UIConstant.focusPanelColor);
						setTPRecord(vehicleName.getText());
					} catch (IOException ex) {
						ex.printStackTrace();
					}

				}
			}
		}catch(Exception ex){
			ex.printStackTrace();
			destroyIt = true;
		}finally{
			try{
				DBConnectionPool.returnConnectionToPoolNonWeb(conn, destroyIt);
			}catch(Exception ex){
				ex.printStackTrace();
			}
		}
	}
	private void setBlockingStatus(){
    	if(tprBlockManager == null){
    		
    		enableDenyEntry(false);
    		return;
    	}
    	try{
    		int blockStatus = tprBlockManager.getBlockStatus();
    		if (blockStatus == UIConstant.BLOCKED) {
                vehicleBlackListed = true;
                blocking_reason.setText(tprBlockManager.getBlockingReason());
                override.setText("BLOCKED");
//                saveAndOpen.requestFocusInWindow();
            }else{
            	vehicleBlackListed = false;
            	override.setText("NOT_BLOCKED");
            	blocking_reason.setText("");
            }
    		enableDenyEntry(vehicleBlackListed);
    	}catch(Exception ex){
    		ex.printStackTrace();
    	}
    }
	private void setQuetionsBlocking(int questionId, int answerId){
    	if(Misc.isUndef(questionId))
    		return;
    	if(tprBlockManager != null){
    		TPSQuestionDetail tpsQuestionBean = new TPSQuestionDetail();
    		tpsQuestionBean.setQuestionId(questionId);
    		tpsQuestionBean.setAnswerId(answerId);
    		tprBlockManager.addQuestions(tpsQuestionBean);
    		setBlockingStatus();
    	}
    }
}
