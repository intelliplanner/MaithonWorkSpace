/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.ipssi.rfid.ui;

/**
 *
 * @author Vi$ky
 */
import com.ipssi.gen.utils.Misc;
import com.ipssi.rfid.connection.ConfigUtility;
import com.ipssi.rfid.constant.UIConstant;
import java.awt.Button;
import java.io.IOException;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ButtonGroup;
import javax.swing.JOptionPane;

public class ScreenList extends javax.swing.JDialog {

    /**
     * Creates new form ScreenList
     */
    public ScreenList(java.awt.Frame parent, boolean modal, Properties screenList) {
        super(parent, modal);
        initComponents();
        this.setLocation(350, 120);
        setAlreadySelectedScreen(screenList);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        weighBridgeIn = new javax.swing.JCheckBox();
        yardOut = new javax.swing.JCheckBox();
        vehicleMaster = new javax.swing.JCheckBox();
        coalGateOut = new javax.swing.JCheckBox();
        yardIn = new javax.swing.JCheckBox();
        coalGateIn = new javax.swing.JCheckBox();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        weighBridgeOut = new javax.swing.JCheckBox();
        flyAshIn = new javax.swing.JCheckBox();
        flyAshGrossWt = new javax.swing.JCheckBox();
        flyAshTareWt = new javax.swing.JCheckBox();
        stoneGrossWt = new javax.swing.JCheckBox();
        stoneTareWt = new javax.swing.JCheckBox();
        secondWeightment = new javax.swing.JCheckBox();
        firstWeightment = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));

        jLabel3.setFont(UIConstant.subHeadingFont);
        jLabel3.setText("SCREEN LIST");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 49, Short.MAX_VALUE)
            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        weighBridgeIn.setFont(UIConstant.textFont);
        weighBridgeIn.setBackground(new java.awt.Color(255, 255, 255));
        weighBridgeIn.setText("WeighBridge In");
        weighBridgeIn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                weighBridgeInActionPerformed(evt);
            }
        });

        yardOut.setFont(UIConstant.textFont);
        yardOut.setBackground(new java.awt.Color(255, 255, 255));
        yardOut.setText("Yard Out");
        yardOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                yardOutActionPerformed(evt);
            }
        });

        vehicleMaster.setFont(UIConstant.textFont);
        vehicleMaster.setBackground(new java.awt.Color(255, 255, 255));
        vehicleMaster.setText("Vehicle Master ");
        vehicleMaster.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vehicleMasterActionPerformed(evt);
            }
        });

        coalGateOut.setFont(UIConstant.textFont);
        coalGateOut.setBackground(new java.awt.Color(255, 255, 255));
        coalGateOut.setText("Coal Gate Out");
        coalGateOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                coalGateOutActionPerformed(evt);
            }
        });

        yardIn.setFont(UIConstant.textFont);
        yardIn.setBackground(new java.awt.Color(255, 255, 255));
        yardIn.setText("Yard In");
        yardIn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                yardInActionPerformed(evt);
            }
        });

        coalGateIn.setFont(UIConstant.textFont);
        coalGateIn.setBackground(new java.awt.Color(255, 255, 255));
        coalGateIn.setText("Coal Gate In");
        coalGateIn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                coalGateInActionPerformed(evt);
            }
        });

        jButton1.setFont(UIConstant.buttonFont);
        jButton1.setText("Clear");

        jButton2.setFont(UIConstant.textFont);
        jButton2.setText("Submit");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        weighBridgeOut.setFont(UIConstant.textFont);
        weighBridgeOut.setBackground(new java.awt.Color(255, 255, 255));
        weighBridgeOut.setText("WeighBridge Out");
        weighBridgeOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                weighBridgeOutActionPerformed(evt);
            }
        });

        flyAshIn.setBackground(new java.awt.Color(255, 255, 255));
        flyAshIn.setText("flyAshIn");
        flyAshIn.setFont(UIConstant.textFont);

        flyAshGrossWt.setBackground(new java.awt.Color(255, 255, 255));
        flyAshGrossWt.setText("flyAshGrossWt");
        flyAshGrossWt.setFont(UIConstant.textFont);

        flyAshTareWt.setBackground(new java.awt.Color(255, 255, 255));
        flyAshTareWt.setText("flyAshTareWt");
        flyAshTareWt.setFont(UIConstant.textFont);

        stoneGrossWt.setBackground(new java.awt.Color(255, 255, 255));
        stoneGrossWt.setText("stoneGrossWt");
        stoneGrossWt.setFont(UIConstant.textFont);
        stoneGrossWt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stoneGrossWtActionPerformed(evt);
            }
        });

        stoneTareWt.setBackground(new java.awt.Color(255, 255, 255));
        stoneTareWt.setText("stoneTareWt");
        stoneTareWt.setFont(UIConstant.textFont);
        stoneTareWt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stoneTareWtActionPerformed(evt);
            }
        });

        secondWeightment.setBackground(new java.awt.Color(255, 255, 255));
        secondWeightment.setFont(UIConstant.textFont);
        secondWeightment.setText("Second Weightment");
        stoneTareWt.setFont(UIConstant.textFont);

        firstWeightment.setBackground(new java.awt.Color(255, 255, 255));
        firstWeightment.setFont(UIConstant.textFont);
        firstWeightment.setText("First Weightment");
        stoneTareWt.setFont(UIConstant.textFont);
        firstWeightment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                firstWeightmentActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(156, 156, 156)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(67, 67, 67)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(yardOut, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(coalGateIn, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(weighBridgeOut, javax.swing.GroupLayout.DEFAULT_SIZE, 165, Short.MAX_VALUE)
                            .addComponent(flyAshTareWt, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(firstWeightment, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(6, 6, 6)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(coalGateOut, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(yardIn, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(vehicleMaster, javax.swing.GroupLayout.DEFAULT_SIZE, 144, Short.MAX_VALUE)
                                    .addComponent(flyAshIn, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(stoneGrossWt, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(secondWeightment, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(weighBridgeIn, javax.swing.GroupLayout.DEFAULT_SIZE, 144, Short.MAX_VALUE)
                                    .addComponent(stoneTareWt, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(flyAshGrossWt, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))
                .addContainerGap(74, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(coalGateOut, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(yardIn, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(coalGateIn, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(yardOut, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(vehicleMaster, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(weighBridgeIn, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(flyAshIn, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(flyAshGrossWt, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(weighBridgeOut, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(flyAshTareWt, javax.swing.GroupLayout.DEFAULT_SIZE, 38, Short.MAX_VALUE)
                    .addComponent(stoneGrossWt, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(stoneTareWt, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(secondWeightment, javax.swing.GroupLayout.DEFAULT_SIZE, 38, Short.MAX_VALUE)
                    .addComponent(firstWeightment, javax.swing.GroupLayout.DEFAULT_SIZE, 38, Short.MAX_VALUE))
                .addGap(27, 27, 27)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(63, 63, 63))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void weighBridgeInActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_weighBridgeInActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_weighBridgeInActionPerformed

    private void yardOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_yardOutActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_yardOutActionPerformed

    private void vehicleMasterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vehicleMasterActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_vehicleMasterActionPerformed

    private void coalGateOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_coalGateOutActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_coalGateOutActionPerformed

    private void yardInActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_yardInActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_yardInActionPerformed

    private void coalGateInActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_coalGateInActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_coalGateInActionPerformed

    private void weighBridgeOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_weighBridgeOutActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_weighBridgeOutActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        Properties defaultProps = new Properties();
        int i = 0;
        if (yardIn.isSelected()) {
            defaultProps.setProperty("yardIn", "1");
            i++;
        } else {
            defaultProps.setProperty("yardIn", "0");
        }
        if (yardOut.isSelected()) {
            defaultProps.setProperty("yardOut", "1");
            i++;
        } else {
            defaultProps.setProperty("yardOut", "0");
        }
        if (weighBridgeIn.isSelected()) {
            defaultProps.setProperty("weighBridgeIn", "1");
            i++;
        } else {
            defaultProps.setProperty("weighBridgeIn", "0");
        }
        if (weighBridgeOut.isSelected()) {
            defaultProps.setProperty("weighBridgeOut", "1");
            i++;
        } else {
            defaultProps.setProperty("weighBridgeOut", "0");
        }
        if (vehicleMaster.isSelected()) {
            defaultProps.setProperty("vehicleMaster", "1");
            i++;
        } else {
            defaultProps.setProperty("vehicleMaster", "0");
        }
        if (coalGateIn.isSelected()) {
            defaultProps.setProperty("coalGateIn", "1");
            i++;
        } else {
            defaultProps.setProperty("coalGateIn", "0");
        }
        if (coalGateOut.isSelected()) {
            defaultProps.setProperty("coalGateOut", "1");
            i++;
        } else {
            defaultProps.setProperty("coalGateOut", "0");
        }
//         int flyAshIn = Misc.getParamAsInt(pros.getProperty("flyAshIn"));
//                int flyAshGrossWt = Misc.getParamAsInt(pros.getProperty("flyAshGrossWt"));
//                int flyAshTareWt = Misc.getParamAsInt(pros.getProperty("flyAshTareWt"));
//                int stoneGrossWt = Misc.getParamAsInt(pros.getProperty("stoneGrossWt"));
//                int stoneTareWt = Misc.getParamAsInt(pros.getProperty("stoneTareWt"));
//        
        if (flyAshIn.isSelected()) {
            defaultProps.setProperty("flyAshIn", "1");
            i++;
        } else {
            defaultProps.setProperty("flyAshIn", "0");
        }
        if (flyAshGrossWt.isSelected()) {
            defaultProps.setProperty("flyAshGrossWt", "1");
            i++;
        } else {
            defaultProps.setProperty("flyAshGrossWt", "0");
        }
        if (flyAshTareWt.isSelected()) {
            defaultProps.setProperty("flyAshTareWt", "1");
            i++;
        } else {
            defaultProps.setProperty("flyAshTareWt", "0");
        }
        if (stoneGrossWt.isSelected()) {
            defaultProps.setProperty("stoneGrossWt", "1");
            i++;
        } else {
            defaultProps.setProperty("stoneGrossWt", "0");
        }
        if (stoneTareWt.isSelected()) {
            defaultProps.setProperty("stoneTareWt", "1");
            i++;
        } else {
            defaultProps.setProperty("stoneTareWt", "0");
        }
        if (firstWeightment.isSelected()) {
            defaultProps.setProperty("firstWeightment", "1");
            i++;
        } else {
            defaultProps.setProperty("firstWeightment", "0");
        }
        if (secondWeightment.isSelected()) {
            defaultProps.setProperty("secondWeightment", "1");
            i++;
        } else {
            defaultProps.setProperty("secondWeightment", "0");
        }
        if (i > 0) {
            ConfigUtility cfg = new ConfigUtility();
            try {
                cfg.setScreenList(defaultProps);
            } catch (IOException ex) {
                Logger.getLogger(ScreenList.class.getName()).log(Level.SEVERE, null, ex);
            }
            this.dispose();
            
        } else {
            JOptionPane.showMessageDialog(null, "Please Select Atleast One");
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void firstWeightmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_firstWeightmentActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_firstWeightmentActionPerformed

    private void stoneTareWtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stoneTareWtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_stoneTareWtActionPerformed

    private void stoneGrossWtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stoneGrossWtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_stoneGrossWtActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ScreenList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ScreenList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ScreenList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ScreenList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                ScreenList dialog = new ScreenList(new javax.swing.JFrame(), true);
//                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
//                    @Override
//                    public void windowClosing(java.awt.event.WindowEvent e) {
//                        System.exit(0);
//                    }
//                });
//                dialog.setVisible(true);
//            }
//        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox coalGateIn;
    private javax.swing.JCheckBox coalGateOut;
    private javax.swing.JCheckBox firstWeightment;
    private javax.swing.JCheckBox flyAshGrossWt;
    private javax.swing.JCheckBox flyAshIn;
    private javax.swing.JCheckBox flyAshTareWt;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JCheckBox secondWeightment;
    private javax.swing.JCheckBox stoneGrossWt;
    private javax.swing.JCheckBox stoneTareWt;
    private javax.swing.JCheckBox vehicleMaster;
    private javax.swing.JCheckBox weighBridgeIn;
    private javax.swing.JCheckBox weighBridgeOut;
    private javax.swing.JCheckBox yardIn;
    private javax.swing.JCheckBox yardOut;
    // End of variables declaration//GEN-END:variables

    private void setAlreadySelectedScreen(Properties pros) {
        if (pros != null) {
            int coalGateIns = Misc.getParamAsInt(pros.getProperty("coalGateIn"));
            int weighBridgeIns = Misc.getParamAsInt(pros.getProperty("weighBridgeIn"));
            int yardOuts = Misc.getParamAsInt(pros.getProperty("yardOut"));
            int weighBridgeOuts = Misc.getParamAsInt(pros.getProperty("weighBridgeOut"));
            int coalGateOuts = Misc.getParamAsInt(pros.getProperty("coalGateOut"));
            int vehicleMasters = Misc.getParamAsInt(pros.getProperty("vehicleMaster"));
            int yardIns = Misc.getParamAsInt(pros.getProperty("yardIn"));
            int flyAshIns = Misc.getParamAsInt(pros.getProperty("flyAshIn"));
            int flyAshGrossWts = Misc.getParamAsInt(pros.getProperty("flyAshGrossWt"));
            int flyAshTareWts = Misc.getParamAsInt(pros.getProperty("flyAshTareWt"));
            int stoneGrossWts = Misc.getParamAsInt(pros.getProperty("stoneGrossWt"));
            int stoneTareWts = Misc.getParamAsInt(pros.getProperty("stoneTareWt"));
            int firstWeightments = Misc.getParamAsInt(pros.getProperty("firstWeightment"));
            int secondWeightments = Misc.getParamAsInt(pros.getProperty("secondWeightment"));
            if (coalGateIns == 1) {
                coalGateIn.setSelected(true);
            }
            if (weighBridgeIns == 1) {
                weighBridgeIn.setSelected(true);
            }
            if (yardOuts == 1) {
                yardOut.setSelected(true);
            }
            if (weighBridgeOuts == 1) {
                weighBridgeOut.setSelected(true);
            }
            if (coalGateOuts == 1) {
                coalGateOut.setSelected(true);
            }
            if (vehicleMasters == 1) {
                vehicleMaster.setSelected(true);
            }
            if (yardIns == 1) {
                yardIn.setSelected(true);
            }

            if (flyAshIns == 1) {
                flyAshIn.setSelected(true);
            }
            if (flyAshGrossWts == 1) {
                flyAshGrossWt.setSelected(true);
            }
            if (flyAshTareWts == 1) {
                flyAshTareWt.setSelected(true);
            }
            if (stoneGrossWts == 1) {
                stoneGrossWt.setSelected(true);
            }
            if (stoneTareWts == 1) {
                stoneTareWt.setSelected(true);
            
            }
             if (firstWeightments == 1) {
                firstWeightment.setSelected(true);
            }
            if (secondWeightments == 1) {
                secondWeightment.setSelected(true);
            }
                                    
        }
    }
}
